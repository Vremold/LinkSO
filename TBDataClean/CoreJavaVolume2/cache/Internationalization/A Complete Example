
413

java.util.ResourceBundle 1.1 (Continued)

• Enumeration<String> getKeys()
returns an enumeration object to enumerate the keys of this resource bundle. It
enumerates the keys in the parent bundles as well.
• Object handleGetObject(String key)
should be overridden to look up the resource value associated with the given key
if you define your own resource lookup mechanism.

7.9 A Complete Example
In this section, we apply the material of this chapter to localize a retirement calculator. The program calculates whether or not you are saving enough money
for your retirement. You enter your age, how much money you save every month,
and so on (see Figure 7.4).
The text area and the graph show the balance of the retirement account for every
year. If the numbers turn negative toward the later part of your life and the bars
in the graph appear below the x axis, you need to do something—for example,
save more money, postpone your retirement, die earlier, or be younger.

Figure 7.4 The retirement calculator in English

From the Library of Hristo Dimov Hristov

414

Chapter 7

Internationalization

The retirement calculator works in three locales (English, German, and Chinese).
Here are some of the highlights of the internationalization:
• The labels, buttons, and messages are translated into German and Chinese.
You can find them in the classes RetireResources_de and RetireResources_zh. English
is used as the fallback—see the RetireResources file. To generate the Chinese
messages, we first typed the file, using Notepad running in Chinese Windows,
and then we used the native2ascii utility to convert the characters to Unicode.
• Whenever the locale changes, we reset the labels and reformat the contents
of the text fields.
• The text fields handle numbers, currency amounts, and percentages in the
local format.
• The computation field uses a MessageFormat. The format string is stored in the
resource bundle of each language.
• Just to show that it can be done, we use different colors for the bar graph,
depending on the language chosen by the user.
Listings 7.5 through 7.8 show the code. Listings 7.9 through 7.11 are the property
files for the localized strings. Figures 7.5 and 7.6 show the outputs in German and
Chinese, respectively. To see Chinese characters, be sure you have Chinese fonts
installed and configured with your Java runtime. Otherwise, Chinese characters
will show up as “missing character” icons.

Figure 7.5 The retirement calculator in German

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

415

Figure 7.6 The retirement calculator in Chinese
Listing 7.5
1

retire/Retire.java

package retire;

2
3
4
5
6

import java.awt.*;
import java.awt.geom.*;
import java.text.*;
import java.util.*;

7
8

import javax.swing.*;

9
10
11
12
13
14
15
16
17
18
19
20
21
22

/**
* This program shows a retirement calculator. The UI is displayed in English, German, and
* Chinese.
* @version 1.24 2016-05-06
* @author Cay Horstmann
*/
public class Retire
{
public static void main(String[] args)
{
EventQueue.invokeLater(() ->
{
JFrame frame = new RetireFrame();
(Continues)

From the Library of Hristo Dimov Hristov

416

Chapter 7

Internationalization

Listing 7.5 (Continued)
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
});

23
24
25

}

26
27

}

28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59

class RetireFrame extends JFrame
{
private JTextField savingsField = new JTextField(10);
private JTextField contribField = new JTextField(10);
private JTextField incomeField = new JTextField(10);
private JTextField currentAgeField = new JTextField(4);
private JTextField retireAgeField = new JTextField(4);
private JTextField deathAgeField = new JTextField(4);
private JTextField inflationPercentField = new JTextField(6);
private JTextField investPercentField = new JTextField(6);
private JTextArea retireText = new JTextArea(10, 25);
private RetireComponent retireCanvas = new RetireComponent();
private JButton computeButton = new JButton();
private JLabel languageLabel = new JLabel();
private JLabel savingsLabel = new JLabel();
private JLabel contribLabel = new JLabel();
private JLabel incomeLabel = new JLabel();
private JLabel currentAgeLabel = new JLabel();
private JLabel retireAgeLabel = new JLabel();
private JLabel deathAgeLabel = new JLabel();
private JLabel inflationPercentLabel = new JLabel();
private JLabel investPercentLabel = new JLabel();
private RetireInfo info = new RetireInfo();
private Locale[] locales = { Locale.US, Locale.CHINA, Locale.GERMANY };
private Locale currentLocale;
private JComboBox<Locale> localeCombo = new LocaleCombo(locales);
private ResourceBundle res;
private ResourceBundle resStrings;
private NumberFormat currencyFmt;
private NumberFormat numberFmt;
private NumberFormat percentFmt;

60
61
62
63
64
65
66
67
68
69
70

public RetireFrame()
{
setLayout(new GridBagLayout());
add(languageLabel, new GBC(0, 0).setAnchor(GBC.EAST));
add(savingsLabel, new GBC(0, 1).setAnchor(GBC.EAST));
add(contribLabel, new GBC(2, 1).setAnchor(GBC.EAST));
add(incomeLabel, new GBC(4, 1).setAnchor(GBC.EAST));
add(currentAgeLabel, new GBC(0, 2).setAnchor(GBC.EAST));
add(retireAgeLabel, new GBC(2, 2).setAnchor(GBC.EAST));
add(deathAgeLabel, new GBC(4, 2).setAnchor(GBC.EAST));

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

417

add(inflationPercentLabel, new GBC(0, 3).setAnchor(GBC.EAST));
add(investPercentLabel, new GBC(2, 3).setAnchor(GBC.EAST));
add(localeCombo, new GBC(1, 0, 3, 1));
add(savingsField, new GBC(1, 1).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(contribField, new GBC(3, 1).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(incomeField, new GBC(5, 1).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(currentAgeField, new GBC(1, 2).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(retireAgeField, new GBC(3, 2).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(deathAgeField, new GBC(5, 2).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(inflationPercentField, new GBC(1, 3).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(investPercentField, new GBC(3, 3).setWeight(100, 0).setFill(GBC.HORIZONTAL));
add(retireCanvas, new GBC(0, 4, 4, 1).setWeight(100, 100).setFill(GBC.BOTH));
add(new JScrollPane(retireText), new GBC(4, 4, 2, 1).setWeight(0, 100).setFill(GBC.BOTH));

71
72
73
74
75
76
77
78
79
80
81
82
83
84

computeButton.setName("computeButton");
computeButton.addActionListener(event ->
{
getInfo();
updateData();
updateGraph();
});
add(computeButton, new GBC(5, 3));

85
86
87
88
89
90
91
92
93

retireText.setEditable(false);
retireText.setFont(new Font("Monospaced", Font.PLAIN, 10));

94
95
96

info.setSavings(0);
info.setContrib(9000);
info.setIncome(60000);
info.setCurrentAge(35);
info.setRetireAge(65);
info.setDeathAge(85);
info.setInvestPercent(0.1);
info.setInflationPercent(0.05);

97
98
99
100
101
102
103
104
105

int localeIndex = 0; // US locale is default selection
for (int i = 0; i < locales.length; i++)
// if current locale one of the choices, select it
if (getLocale().equals(locales[i])) localeIndex = i;
setCurrentLocale(locales[localeIndex]);

106
107
108
109
110
111

localeCombo.addActionListener(event ->
{
setCurrentLocale((Locale) localeCombo.getSelectedItem());
validate();
});
pack();

112
113
114
115
116
117
118

}

119

(Continues)

From the Library of Hristo Dimov Hristov

418

Chapter 7

Internationalization

Listing 7.5 (Continued)
120
121
122
123
124
125
126
127
128

/**
* Sets the current locale.
* @param locale the desired locale
*/
public void setCurrentLocale(Locale locale)
{
currentLocale = locale;
localeCombo.setLocale(currentLocale);
localeCombo.setSelectedItem(currentLocale);

129

res = ResourceBundle.getBundle("retire.RetireResources", currentLocale);
resStrings = ResourceBundle.getBundle("retire.RetireStrings", currentLocale);
currencyFmt = NumberFormat.getCurrencyInstance(currentLocale);
numberFmt = NumberFormat.getNumberInstance(currentLocale);
percentFmt = NumberFormat.getPercentInstance(currentLocale);

130
131
132
133
134
135

updateDisplay();
updateInfo();
updateData();
updateGraph();

136
137
138
139
140

}

141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157

/**
* Updates all labels in the display.
*/
public void updateDisplay()
{
languageLabel.setText(resStrings.getString("language"));
savingsLabel.setText(resStrings.getString("savings"));
contribLabel.setText(resStrings.getString("contrib"));
incomeLabel.setText(resStrings.getString("income"));
currentAgeLabel.setText(resStrings.getString("currentAge"));
retireAgeLabel.setText(resStrings.getString("retireAge"));
deathAgeLabel.setText(resStrings.getString("deathAge"));
inflationPercentLabel.setText(resStrings.getString("inflationPercent"));
investPercentLabel.setText(resStrings.getString("investPercent"));
computeButton.setText(resStrings.getString("computeButton"));
}

158
159
160
161
162
163
164
165
166
167

/**
* Updates the information in the text fields.
*/
public void updateInfo()
{
savingsField.setText(currencyFmt.format(info.getSavings()));
contribField.setText(currencyFmt.format(info.getContrib()));
incomeField.setText(currencyFmt.format(info.getIncome()));
currentAgeField.setText(numberFmt.format(info.getCurrentAge()));

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

retireAgeField.setText(numberFmt.format(info.getRetireAge()));
deathAgeField.setText(numberFmt.format(info.getDeathAge()));
investPercentField.setText(percentFmt.format(info.getInvestPercent()));
inflationPercentField.setText(percentFmt.format(info.getInflationPercent()));

168
169
170
171
172

419

}

173
174
175
176
177
178
179
180
181
182

/**
* Updates the data displayed in the text area.
*/
public void updateData()
{
retireText.setText("");
MessageFormat retireMsg = new MessageFormat("");
retireMsg.setLocale(currentLocale);
retireMsg.applyPattern(resStrings.getString("retire"));

183

for (int i = info.getCurrentAge(); i <= info.getDeathAge(); i++)
{
Object[] args = { i, info.getBalance(i) };
retireText.append(retireMsg.format(args) + "\n");
}

184
185
186
187
188
189

}

190
191
192
193
194
195
196
197
198
199
200
201

/**
* Updates the graph.
*/
public void updateGraph()
{
retireCanvas.setColorPre((Color) res.getObject("colorPre"));
retireCanvas.setColorGain((Color) res.getObject("colorGain"));
retireCanvas.setColorLoss((Color) res.getObject("colorLoss"));
retireCanvas.setInfo(info);
repaint();
}

202
203
204
205
206
207
208
209
210
211
212
213
214
215
216

/**
* Reads the user input from the text fields.
*/
public void getInfo()
{
try
{
info.setSavings(currencyFmt.parse(savingsField.getText()).doubleValue());
info.setContrib(currencyFmt.parse(contribField.getText()).doubleValue());
info.setIncome(currencyFmt.parse(incomeField.getText()).doubleValue());
info.setCurrentAge(numberFmt.parse(currentAgeField.getText()).intValue());
info.setRetireAge(numberFmt.parse(retireAgeField.getText()).intValue());
info.setDeathAge(numberFmt.parse(deathAgeField.getText()).intValue());
info.setInvestPercent(percentFmt.parse(investPercentField.getText()).doubleValue());
(Continues)

From the Library of Hristo Dimov Hristov

420

Chapter 7

Internationalization

Listing 7.5 (Continued)
info.setInflationPercent(
percentFmt.parse(inflationPercentField.getText()).doubleValue());

217
218

}
catch (ParseException ex)
{
ex.printStackTrace();
}

219
220
221
222
223

}

224
225

}

226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241

/**
* The information required to compute retirement income data.
*/
class RetireInfo
{
private double savings;
private double contrib;
private double income;
private int currentAge;
private int retireAge;
private int deathAge;
private double inflationPercent;
private double investPercent;
private int age;
private double balance;

242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264

/**
* Gets the available balance for a given year.
* @param year the year for which to compute the balance
* @return the amount of money available (or required) in that year
*/
public double getBalance(int year)
{
if (year < currentAge) return 0;
else if (year == currentAge)
{
age = year;
balance = savings;
return balance;
}
else if (year == age) return balance;
if (year != age + 1) getBalance(year - 1);
age = year;
if (age < retireAge) balance += contrib;
else balance -= income;
balance = balance * (1 + (investPercent - inflationPercent));
return balance;
}

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

421

265
266
267
268
269
270
271
272
273

/**
* Gets the amount of prior savings.
* @return the savings amount
*/
public double getSavings()
{
return savings;
}

274
275
276
277
278
279
280
281
282

/**
* Sets the amount of prior savings.
* @param newValue the savings amount
*/
public void setSavings(double newValue)
{
savings = newValue;
}

283
284
285
286
287
288
289
290
291

/**
* Gets the annual contribution to the retirement account.
* @return the contribution amount
*/
public double getContrib()
{
return contrib;
}

292
293
294
295
296
297
298
299
300

/**
* Sets the annual contribution to the retirement account.
* @param newValue the contribution amount
*/
public void setContrib(double newValue)
{
contrib = newValue;
}

301
302
303
304
305
306
307
308
309

/**
* Gets the annual income.
* @return the income amount
*/
public double getIncome()
{
return income;
}

310
311
312
313

/**
* Sets the annual income.
* @param newValue the income amount
(Continues)

From the Library of Hristo Dimov Hristov

422

Chapter 7

Internationalization

Listing 7.5 (Continued)
314
315
316
317
318

*/
public void setIncome(double newValue)
{
income = newValue;
}

319
320
321
322
323
324
325
326
327

/**
* Gets the current age.
* @return the age
*/
public int getCurrentAge()
{
return currentAge;
}

328
329
330
331
332
333
334
335
336

/**
* Sets the current age.
* @param newValue the age
*/
public void setCurrentAge(int newValue)
{
currentAge = newValue;
}

337
338
339
340
341
342
343
344
345

/**
* Gets the desired retirement age.
* @return the age
*/
public int getRetireAge()
{
return retireAge;
}

346
347
348
349
350
351
352
353
354

/**
* Sets the desired retirement age.
* @param newValue the age
*/
public void setRetireAge(int newValue)
{
retireAge = newValue;
}

355
356
357
358
359
360

/**
* Gets the expected age of death.
* @return the age
*/
public int getDeathAge()

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

423

{

361

return deathAge;

362

}

363
364

/**
* Sets the expected age of death.
* @param newValue the age
*/
public void setDeathAge(int newValue)
{
deathAge = newValue;
}

365
366
367
368
369
370
371
372
373

/**
* Gets the estimated percentage of inflation.
* @return the percentage
*/
public double getInflationPercent()
{
return inflationPercent;
}

374
375
376
377
378
379
380
381
382

/**
* Sets the estimated percentage of inflation.
* @param newValue the percentage
*/
public void setInflationPercent(double newValue)
{
inflationPercent = newValue;
}

383
384
385
386
387
388
389
390
391

/**
* Gets the estimated yield of the investment.
* @return the percentage
*/
public double getInvestPercent()
{
return investPercent;
}

392
393
394
395
396
397
398
399
400

/**
* Sets the estimated yield of the investment.
* @param newValue the percentage
*/
public void setInvestPercent(double newValue)
{
investPercent = newValue;
}

401
402
403
404
405
406
407
408
409

}
(Continues)

From the Library of Hristo Dimov Hristov

424

Chapter 7

Internationalization

Listing 7.5 (Continued)
410
411
412
413
414
415
416
417
418
419
420
421
422

/**
* This component draws a graph of the investment result.
*/
class RetireComponent extends JComponent
{
private static final int PANEL_WIDTH = 400;
private static final int PANEL_HEIGHT = 200;
private static final Dimension PREFERRED_SIZE = new Dimension(800, 600);
private RetireInfo info = null;
private Color colorPre;
private Color colorGain;
private Color colorLoss;

423
424
425
426
427

public RetireComponent()
{
setSize(PANEL_WIDTH, PANEL_HEIGHT);
}

428
429
430
431
432
433
434
435
436
437

/**
* Sets the retirement information to be plotted.
* @param newInfo the new retirement info
*/
public void setInfo(RetireInfo newInfo)
{
info = newInfo;
repaint();
}

438
439
440
441
442

public void paintComponent(Graphics g)
{
Graphics2D g2 = (Graphics2D) g;
if (info == null) return;

443
444
445
446
447
448
449
450
451
452
453

double minValue = 0;
double maxValue = 0;
int i;
for (i = info.getCurrentAge(); i <= info.getDeathAge(); i++)
{
double v = info.getBalance(i);
if (minValue > v) minValue = v;
if (maxValue < v) maxValue = v;
}
if (maxValue == minValue) return;

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

425

454

int barWidth = getWidth() / (info.getDeathAge() - info.getCurrentAge() + 1);
double scale = getHeight() / (maxValue - minValue);

455
456
457

for (i = info.getCurrentAge(); i <= info.getDeathAge(); i++)
{
int x1 = (i - info.getCurrentAge()) * barWidth + 1;
int y1;
double v = info.getBalance(i);
int height;
int yOrigin = (int) (maxValue * scale);

458
459
460
461
462
463
464
465

if (v >= 0)
{
y1 = (int) ((maxValue - v) * scale);
height = yOrigin - y1;
}
else
{
y1 = yOrigin;
height = (int) (-v * scale);
}

466
467
468
469
470
471
472
473
474
475
476

if (i < info.getRetireAge()) g2.setPaint(colorPre);
else if (v >= 0) g2.setPaint(colorGain);
else g2.setPaint(colorLoss);
Rectangle2D bar = new Rectangle2D.Double(x1, y1, barWidth - 2, height);
g2.fill(bar);
g2.setPaint(Color.black);
g2.draw(bar);

477
478
479
480
481
482
483

}

484
485

}

486
487
488
489
490
491
492
493
494
495

/**
* Sets the color to be used before retirement.
* @param color the desired color
*/
public void setColorPre(Color color)
{
colorPre = color;
repaint();
}

496
497
498
499
500

/**
* Sets the color to be used after retirement while the account balance is positive.
* @param color the desired color
*/
(Continues)

From the Library of Hristo Dimov Hristov

426

Chapter 7

Internationalization

Listing 7.5 (Continued)
public void setColorGain(Color color)
{
colorGain = color;
repaint();
}

501
502
503
504
505
506

/**
* Sets the color to be used after retirement when the account balance is negative.
* @param color the desired color
*/
public void setColorLoss(Color color)
{
colorLoss = color;
repaint();
}

507
508
509
510
511
512
513
514
515
516

public Dimension getPreferredSize() { return PREFERRED_SIZE; }

517
518

}

Listing 7.6
1

retire/RetireResources.java

package retire;

2
3

import java.awt.*;

4
5
6
7
8
9
10
11
12
13
14
15
16

/**
* These are the English non-string resources for the retirement calculator.
* @version 1.21 2001-08-27
* @author Cay Horstmann
*/
public class RetireResources extends java.util.ListResourceBundle
{
private static final Object[][] contents = {
// BEGIN LOCALIZE
{ "colorPre", Color.blue }, { "colorGain", Color.white }, { "colorLoss", Color.red }
// END LOCALIZE
};

17

public Object[][] getContents()
{
return contents;
}

18
19
20
21
22

}

From the Library of Hristo Dimov Hristov

7.9 A Complete Example

Listing 7.7
1

427

retire/RetireResources_de.java

package retire;

2
3

import java.awt.*;

4
5
6
7
8
9
10
11
12
13
14
15
16

/**
* These are the German non-string resources for the retirement calculator.
* @version 1.21 2001-08-27
* @author Cay Horstmann
*/
public class RetireResources_de extends java.util.ListResourceBundle
{
private static final Object[][] contents = {
// BEGIN LOCALIZE
{ "colorPre", Color.yellow }, { "colorGain", Color.black }, { "colorLoss", Color.red }
// END LOCALIZE
};

17

public Object[][] getContents()
{
return contents;
}

18
19
20
21
22

}

Listing 7.8
1

retire/RetireResources_zh.java

package retire;

2
3

import java.awt.*;

4
5
6
7
8
9
10
11
12
13
14
15
16

/**
* These are the Chinese non-string resources for the retirement calculator.
* @version 1.21 2001-08-27
* @author Cay Horstmann
*/
public class RetireResources_zh extends java.util.ListResourceBundle
{
private static final Object[][] contents = {
// BEGIN LOCALIZE
{ "colorPre", Color.red }, { "colorGain", Color.blue }, { "colorLoss", Color.yellow }
// END LOCALIZE
};

17

public Object[][] getContents()
{
return contents;
}

18
19
20
21
22

}

From the Library of Hristo Dimov Hristov

428

Chapter 7

Internationalization

Listing 7.9
1
2
3
4
5
6
7
8
9
10
11

language=Language
computeButton=Compute
savings=Prior Savings
contrib=Annual Contribution
income=Retirement Income
currentAge=Current Age
retireAge=Retirement Age
deathAge=Life Expectancy
inflationPercent=Inflation
investPercent=Investment Return
retire=Age: {0,number} Balance: {1,number,currency}

Listing 7.10
1
2
3
4
5
6
7
8
9
10
11

2
3
4
5
6
7
8
9
10
11

retire/RetireStrings_de.properties

language=Sprache
computeButton=Rechnen
savings=Vorherige Ersparnisse
contrib=J\u00e4hrliche Einzahlung
income=Einkommen nach Ruhestand
currentAge=Jetziges Alter
retireAge=Ruhestandsalter
deathAge=Lebenserwartung
inflationPercent=Inflation
investPercent=Investitionsgewinn
retire=Alter: {0,number} Guthaben: {1,number,currency}

Listing 7.11
1

retire/RetireStrings.properties

retire/RetireStrings_zh.properties

language=\u8bed\u8a00
computeButton=\u8ba1\u7b97
savings=\u65e2\u5b58
contrib=\u6bcf\u5e74\u5b58\u91d1
income=\u9000\u4f11\u6536\u5165
currentAge=\u73b0\u9f84
retireAge=\u9000\u4f11\u5e74\u9f84
deathAge=\u9884\u671f\u5bff\u547d
inflationPercent=\u901a\u8d27\u81a8\u6da8
investPercent=\u6295\u8d44\u62a5\u916c
retire=\u5e74\u9f84: {0,number} \u603b\u7ed3: {1,number,currency}

You have seen how to use the internationalization features of the Java language.
You can now use resource bundles to provide translations into multiple languages,
and use formatters and collators for locale-specific text processing.
In the next chapter, we will delve into scripting, compiling, and annotation
processing.

From the Library of Hristo Dimov Hristov

