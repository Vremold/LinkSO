
333

javax.sql.rowset.RowSetFactory 7

•
•
•
•
•

CachedRowSet createCachedRowSet()
FilteredRowSet createFilteredRowSet()
JdbcRowSet createJdbcRowSet()
JoinRowSet createJoinRowSet()
WebRowSet createWebRowSet()

creates a row set of the specified type.

5.8 Metadata
In the preceding sections, you saw how to populate, query, and update database
tables. However, JDBC can give you additional information about the structure
of a database and its tables. For example, you can get a list of the tables in a particular database or the column names and types of a table. This information is
not useful when you are implementing a business application with a predefined
database. After all, if you design the tables, you know their structure. Structural
information is, however, extremely useful for programmers who write tools that
work with any database.
In SQL, data that describe the database or one of its parts are called metadata (to
distinguish them from the actual data stored in the database). You can get three
kinds of metadata: about a database, about a result set, and about parameters of
prepared statements.
To find out more about the database, request an object of type DatabaseMetaData from
the database connection.
DatabaseMetaData meta = conn.getMetaData();

Now you are ready to get some metadata. For example, the call
ResultSet mrs = meta.getTables(null, null, null, new String[] { "TABLE" });

returns a result set that contains information about all tables in the database. (See
the API note at the end of this section for other parameters to this method.)
Each row in the result set contains information about a table in the database. The
third column is the name of the table. (Again, see the API note for the other
columns.) The following loop gathers all table names:
while (mrs.next())
tableNames.addItem(mrs.getString(3));

From the Library of Hristo Dimov Hristov

334

Chapter 5

Database Programming

There is a second important use for database metadata. Databases are complex,
and the SQL standard leaves plenty of room for variability. Well over a hundred
methods in the DatabaseMetaData interface can inquire about the database, including
calls with such exotic names as
meta.supportsCatalogsInPrivilegeDefinitions()

and
meta.nullPlusNonNullIsNull()

Clearly, these are geared toward advanced users with special needs—in particular,
those who need to write highly portable code that works with multiple databases.
The DatabaseMetaData interface gives data about the database. A second metadata interface, ResultSetMetaData, reports information about a result set. Whenever you have
a result set from a query, you can inquire about the number of columns and each
column’s name, type, and field width. Here is a typical loop:
ResultSet rs = stat.executeQuery("SELECT * FROM " + tableName);
ResultSetMetaData meta = rs.getMetaData();
for (int i = 1; i <= meta.getColumnCount(); i++)
{
String columnName = meta.getColumnLabel(i);
int columnWidth = meta.getColumnDisplaySize(i);
...
}

In this section, we will show you how to write such a simple tool. The program
in Listing 5.4 uses metadata to let you browse all tables in a database. The
program also illustrates the use of a cached row set.
The combo box on top displays all tables in the database. Select one of them, and
the center of the frame is filled with the field names of that table and the values
of the first row, as shown in Figure 5.6. Click Next and Previous to scroll through
the rows in the table. You can also delete a row and edit the row values. Click the
Save button to save the changes to the database.

NOTE: Many databases come with much more sophisticated tools for viewing
and editing tables. If your database doesn’t, check out iSQL-Viewer
(http://isql.sourceforge.net) or SQuirreL (http://squirrel-sql.sourceforge.net). These
programs can view the tables in any JDBC database. Our example program is
not intended as a replacement for these tools, but it shows you how to implement
a tool for working with arbitrary tables.

From the Library of Hristo Dimov Hristov

5.8 Metadata

335

Figure 5.6 The ViewDB application
Listing 5.4
1

view/ViewDB.java

package view;

2
3
4
5
6
7
8

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.*;
import java.sql.*;
import java.util.*;

9
10
11
12

import javax.sql.*;
import javax.sql.rowset.*;
import javax.swing.*;

13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31

/**
* This program uses metadata to display arbitrary tables in a database.
* @version 1.33 2016-04-27
* @author Cay Horstmann
*/
public class ViewDB
{
public static void main(String[] args)
{
EventQueue.invokeLater(() ->
{
JFrame frame = new ViewDBFrame();
frame.setTitle("ViewDB");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
});
}
}
(Continues)

From the Library of Hristo Dimov Hristov

336

Chapter 5

Database Programming

Listing 5.4 (Continued)
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47

/**
* The frame that holds the data panel and the navigation buttons.
*/
class ViewDBFrame extends JFrame
{
private JButton previousButton;
private JButton nextButton;
private JButton deleteButton;
private JButton saveButton;
private DataPanel dataPanel;
private Component scrollPane;
private JComboBox<String> tableNames;
private Properties props;
private CachedRowSet crs;
private Connection conn;

48
49
50
51

public ViewDBFrame()
{
tableNames = new JComboBox<String>();

52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72

try
{
readDatabaseProperties();
conn = getConnection();
DatabaseMetaData meta = conn.getMetaData();
try (ResultSet mrs = meta.getTables(null, null, null, new String[] { "TABLE" }))
{
while (mrs.next())
tableNames.addItem(mrs.getString(3));
}
}
catch (SQLException ex)
{
for (Throwable t : ex)
t.printStackTrace();
}
catch (IOException ex)
{
ex.printStackTrace();
}

73
74
75
76
77
78

tableNames.addActionListener(
event -> showTable((String) tableNames.getSelectedItem(), conn));
add(tableNames, BorderLayout.NORTH);
addWindowListener(new WindowAdapter()
{

From the Library of Hristo Dimov Hristov

5.8 Metadata

337

public void windowClosing(WindowEvent event)
{
try
{
if (conn != null) conn.close();
}
catch (SQLException ex)
{
for (Throwable t : ex)
t.printStackTrace();
}
}
});

79
80
81
82
83
84
85
86
87
88
89
90
91
92

JPanel buttonPanel = new JPanel();
add(buttonPanel, BorderLayout.SOUTH);

93
94
95

previousButton = new JButton("Previous");
previousButton.addActionListener(event -> showPreviousRow());
buttonPanel.add(previousButton);

96
97
98
99

nextButton = new JButton("Next");
nextButton.addActionListener(event -> showNextRow());
buttonPanel.add(nextButton);

100
101
102
103

deleteButton = new JButton("Delete");
deleteButton.addActionListener(event -> deleteRow());
buttonPanel.add(deleteButton);

104
105
106
107

saveButton = new JButton("Save");
saveButton.addActionListener(event -> saveChanges());
buttonPanel.add(saveButton);
if (tableNames.getItemCount() > 0)
showTable(tableNames.getItemAt(0), conn);

108
109
110
111
112
113

}

114
115
116
117
118
119
120
121
122
123
124
125

/**
* Prepares the text fields for showing a new table, and shows the first row.
* @param tableName the name of the table to display
* @param conn the database connection
*/
public void showTable(String tableName, Connection conn)
{
try (Statement stat = conn.createStatement();
ResultSet result = stat.executeQuery("SELECT * FROM " + tableName))
{
// get result set

126
127

// copy into cached row set
(Continues)

From the Library of Hristo Dimov Hristov

338

Chapter 5

Database Programming

Listing 5.4 (Continued)
RowSetFactory factory = RowSetProvider.newFactory();
crs = factory.createCachedRowSet();
crs.setTableName(tableName);
crs.populate(result);

128
129
130
131
132

if (scrollPane != null) remove(scrollPane);
dataPanel = new DataPanel(crs);
scrollPane = new JScrollPane(dataPanel);
add(scrollPane, BorderLayout.CENTER);
pack();
showNextRow();

133
134
135
136
137
138

}
catch (SQLException ex)
{
for (Throwable t : ex)
t.printStackTrace();
}

139
140
141
142
143
144
145

}

146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163

/**
* Moves to the previous table row.
*/
public void showPreviousRow()
{
try
{
if (crs == null || crs.isFirst()) return;
crs.previous();
dataPanel.showRow(crs);
}
catch (SQLException ex)
{
for (Throwable t : ex)
t.printStackTrace();
}
}

164
165
166
167
168
169
170
171
172
173
174
175

/**
* Moves to the next table row.
*/
public void showNextRow()
{
try
{
if (crs == null || crs.isLast()) return;
crs.next();
dataPanel.showRow(crs);
}

From the Library of Hristo Dimov Hristov

5.8 Metadata

catch (SQLException ex)
{
for (Throwable t : ex)
t.printStackTrace();
}

176
177
178
179
180
181

339

}

182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204

/**
* Deletes current table row.
*/
public void deleteRow()
{
if (crs == null) return;
new SwingWorker<Void, Void>()
{
public Void doInBackground() throws SQLException
{
crs.deleteRow();
crs.acceptChanges(conn);
if (crs.isAfterLast())
if (!crs.last()) crs = null;
return null;
}
public void done()
{
dataPanel.showRow(crs);
}
}.execute();
}

205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221

/**
* Saves all changes.
*/
public void saveChanges()
{
if (crs == null) return;
new SwingWorker<Void, Void>()
{
public Void doInBackground() throws SQLException
{
dataPanel.setRow(crs);
crs.acceptChanges(conn);
return null;
}
}.execute();
}

222
223
224

private void readDatabaseProperties() throws IOException
{
(Continues)

From the Library of Hristo Dimov Hristov

340

Chapter 5

Database Programming

Listing 5.4 (Continued)
props = new Properties();
try (InputStream in = Files.newInputStream(Paths.get("database.properties")))
{
props.load(in);
}
String drivers = props.getProperty("jdbc.drivers");
if (drivers != null) System.setProperty("jdbc.drivers", drivers);

225
226
227
228
229
230
231

}

232
233

/**
* Gets a connection from the properties specified in the file database.properties.
* @return the database connection
*/
private Connection getConnection() throws SQLException
{
String url = props.getProperty("jdbc.url");
String username = props.getProperty("jdbc.username");
String password = props.getProperty("jdbc.password");

234
235
236
237
238
239
240
241
242
243

return DriverManager.getConnection(url, username, password);

244

}

245
246

}

247
248
249
250
251
252
253

/**
* This panel displays the contents of a result set.
*/
class DataPanel extends JPanel
{
private java.util.List<JTextField> fields;

254
255
256
257
258
259
260
261
262
263
264
265

/**
* Constructs the data panel.
* @param rs the result set whose contents this panel displays
*/
public DataPanel(RowSet rs) throws SQLException
{
fields = new ArrayList<>();
setLayout(new GridBagLayout());
GridBagConstraints gbc = new GridBagConstraints();
gbc.gridwidth = 1;
gbc.gridheight = 1;

266
267
268
269

ResultSetMetaData rsmd = rs.getMetaData();
for (int i = 1; i <= rsmd.getColumnCount(); i++)
{

From the Library of Hristo Dimov Hristov

5.8 Metadata

341

gbc.gridy = i - 1;

270
271

String columnName = rsmd.getColumnLabel(i);
gbc.gridx = 0;
gbc.anchor = GridBagConstraints.EAST;
add(new JLabel(columnName), gbc);

272
273
274
275
276

int columnWidth = rsmd.getColumnDisplaySize(i);
JTextField tb = new JTextField(columnWidth);
if (!rsmd.getColumnClassName(i).equals("java.lang.String"))
tb.setEditable(false);

277
278
279
280
281

fields.add(tb);

282
283

gbc.gridx = 1;
gbc.anchor = GridBagConstraints.WEST;
add(tb, gbc);

284
285
286

}

287
288

}

289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310

/**
* Shows a database row by populating all text fields with the column values.
*/
public void showRow(ResultSet rs)
{
try
{
if (rs == null) return;
for (int i = 1; i <= fields.size(); i++)
{
String field = rs == null ? "" : rs.getString(i);
JTextField tb = fields.get(i - 1);
tb.setText(field);
}
}
catch (SQLException ex)
{
for (Throwable t : ex)
t.printStackTrace();
}
}

311
312
313
314
315
316

/**
* Updates changed data into the current row of the row set.
*/
public void setRow(RowSet rs) throws SQLException
{
(Continues)

From the Library of Hristo Dimov Hristov

342

Chapter 5

Database Programming

Listing 5.4 (Continued)
for (int i = 1; i <= fields.size(); i++)
{
String field = rs.getString(i);
JTextField tb = fields.get(i - 1);
if (!field.equals(tb.getText()))
rs.updateString(i, tb.getText());
}
rs.updateRow();

317
318
319
320
321
322
323
324

}

325
326

}

java.sql.Connection 1.1

• DatabaseMetaData getMetaData()
returns the metadata for the connection as a DatabaseMetaData object.

java.sql.DatabaseMetaData 1.1

• ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String
types[])

returns a description of all tables in a catalog that match the schema and table name
patterns and the type criteria. (A schema describes a group of related tables and access
permissions. A catalog describes a related group of schemas. These concepts are
important for structuring large databases.)
The catalog and schemaPattern parameters can be "" to retrieve those tables without a
catalog or schema, or null to return tables regardless of catalog or schema.
The types array contains the names of the table types to include. Typical types are
TABLE, VIEW, SYSTEM TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. If types is
null, tables of all types are returned.
The result set has five columns, all of which are of type String.
Column

Name

1

TABLE_CAT

Explanation
Table catalog (may be null)

2

TABLE_SCHEM

Table schema (may be null)

3

TABLE_NAME

Table name

4

TABLE_TYPE

Table type

5

REMARKS

Comment on the table
(Continues)

From the Library of Hristo Dimov Hristov

5.8 Metadata

343

java.sql.DatabaseMetaData 1.1 (Continued)

• int getJDBCMajorVersion() 1.4
• int getJDBCMinorVersion() 1.4
returns the major or minor JDBC version numbers of the driver that established the
database connection. For example, a JDBC 3.0 driver has major version number 3
and minor version number 0.
• int getMaxConnections()
returns the maximum number of concurrent connections allowed to this database.
• int getMaxStatements()
returns the maximum number of concurrently open statements allowed per database
connection, or 0 if the number is unlimited or unknown.

java.sql.ResultSet 1.1

• ResultSetMetaData getMetaData()
returns the metadata associated with the current ResultSet columns.

java.sql.ResultSetMetaData 1.1

• int getColumnCount()
returns the number of columns in the current ResultSet object.
• int getColumnDisplaySize(int column)
returns the maximum width of the column specified by the index parameter.
Parameters:

column

The column number

• String getColumnLabel(int column)
returns the suggested title for the column.
Parameters:

column

The column number

• String getColumnName(int column)
returns the column name associated with the column index specified.
Parameters:

column

The column number

From the Library of Hristo Dimov Hristov

344

Chapter 5

Database Programming

