As we said earlier, applets were what started the Java craze. In practice, people
discovered that although they could write animated applets (like the famous

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

547

“nervous text”), applets could not do a whole lot of useful stuff in the JDK 1.0
security model. For example, since applets under JDK 1.0 were so closely supervised, they couldn’t do much good on a corporate intranet, even though relatively
little risk attaches to executing an applet from your company’s secure intranet.
It quickly became clear to Sun that for applets to become truly useful, users need
to be able to assign different levels of security, depending on where the applet
originated. If an applet comes from a trusted supplier and has not been tampered
with, the user of that applet can decide whether to give the applet more privileges.
To give more trust to an applet, we need to know two things:
• Where did the applet come from?
• Was the code corrupted in transit?
In the past 50 years, mathematicians and computer scientists have developed
sophisticated algorithms for ensuring the integrity of data and for electronic signatures. The java.security package contains implementations of many of these algorithms. Fortunately, you don’t need to understand the underlying mathematics
to use the algorithms in the java.security package. In the next sections, we’ll show
you how message digests can detect changes in data files and how digital
signatures can prove the identity of the signer.

9.4.1 Message Digests
A message digest is a digital fingerprint of a block of data. For example, the socalled SHA-1 (Secure Hash Algorithm #1) condenses any data block, no matter
how long, into a sequence of 160 bits (20 bytes). As with real fingerprints, one
hopes that no two messages have the same SHA-1 fingerprint. Of course, that
cannot be true—there are only 2160 SHA-1 fingerprints, so there must be some
messages with the same fingerprint. But 2160 is so large that the probability of
duplication occurring is negligible. How negligible? According to James Walsh
in True Odds: How Risks Affect Your Everyday Life (Merritt Publishing, 1996), the
chance that you will die from being struck by lightning is about one in 30,000.
Now, think of nine other people—for example, your nine least favorite managers
or professors. The chance that you and all of them will die from lightning strikes
is higher than that of a forged message having the same SHA-1 fingerprint as the
original. (Of course, more than ten people, none of whom you are likely to know,
will die from lightning strikes. However, we are talking about the far slimmer
chance that your particular choice of people will be wiped out.)
A message digest has two essential properties:
• If one bit or several bits of the data are changed, the message digest also
changes.

From the Library of Hristo Dimov Hristov

548

Chapter 9

Security

• A forger who is in possession of a given message cannot construct a fake
message that has the same message digest as the original.
The second property is, again, a matter of probabilities. Consider the following
message by the billionaire father:
“Upon my death, my property shall be divided equally among my children; however,
my son George shall receive nothing.”
That message (with a final newline) has an SHA-1 fingerprint of
12 5F 09 03 E7 31 30 19 2E A6 E7 E4 90 43 84 B4 38 99 8F 67

The distrustful father has deposited the message with one attorney and the
fingerprint with another. Now, suppose George bribes the lawyer holding
the message. He wants to change the message so that Bill gets nothing. Of course,
that changes the fingerprint to a completely different bit pattern:
7D F6 AB 08 EB 40 EC CD AB 74 ED E9 86 F9 ED 99 D1 45 B1 57

Can George find some other wording that matches the fingerprint? If he had been
the proud owner of a billion computers from the time the Earth was formed, each
computing a million messages a second, he would not yet have found a message
he could substitute.
A number of algorithms have been designed to compute such message digests.
Among them are SHA-1, the secure hash algorithm developed by the National
Institute of Standards and Technology, and MD5, an algorithm invented by Ronald
Rivest of MIT. Both algorithms scramble the bits of a message in ingenious ways.
For details about these algorithms, see, for example, Cryptography and Network
Security, Fifth Edition, by William Stallings (Prentice Hall, 2011). However, subtle
regularities have been discovered in both algorithms, and NIST recommends to
switch to stronger alternatives such as SHA-256, SHA-384, or SHA-512.
The Java programming language implements MD5, SHA-1, SHA-256, SHA-384,
and SHA-512. The MessageDigest class is a factory for creating objects that encapsulate
the fingerprinting algorithms. It has a static method, called getInstance, that returns
an object of a class that extends the MessageDigest class. This means the MessageDigest
class serves double duty:
• As a factory class
• As the superclass for all message digest algorithms
For example, here is how you obtain an object that can compute SHA fingerprints:
MessageDigest alg = MessageDigest.getInstance("SHA-1");

(To get an object that can compute MD5, use the string "MD5" as the argument to
getInstance.)

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

549

After you have obtained a MessageDigest object, feed it all the bytes in the message
by repeatedly calling the update method. For example, the following code passes
all bytes in a file to the alg object just created to do the fingerprinting:
InputStream in = . . .
int ch;
while ((ch = in.read()) != -1)
alg.update((byte) ch);

Alternatively, if you have the bytes in an array, you can update the entire array
at once:
byte[] bytes = . . .;
alg.update(bytes);

When you are done, call the digest method. This method pads the input as required
by the fingerprinting algorithm, does the computation, and returns the digest as
an array of bytes.
byte[] hash = alg.digest();

The program in Listing 9.16 computes a message digest, using MD5, SHA-1,
SHA-256, SHA-384, or SHA-512. Run it as
java hash.Digest hash/input.txt

or
java hash.Digest hash/input.txt MD5

Listing 9.16
1

hash/Digest.java

package hash;

2
3
4
5

import java.io.*;
import java.nio.file.*;
import java.security.*;

6
7
8
9
10
11
12
13
14
15
16
17

/**
* This program computes the message digest of a file.
* @version 1.20 2012-06-16
* @author Cay Horstmann
*/
public class Digest
{
/**
* @param args args[0] is the filename, args[1] is optionally the algorithm
* (SHA-1, SHA-256, or MD5)
*/
(Continues)

From the Library of Hristo Dimov Hristov

550

Chapter 9

Security

Listing 9.16 (Continued)
public static void main(String[] args) throws IOException, GeneralSecurityException
{
String algname = args.length >= 2 ? args[1] : "SHA-1";
MessageDigest alg = MessageDigest.getInstance(algname);
byte[] input = Files.readAllBytes(Paths.get(args[0]));
byte[] hash = alg.digest(input);
String d = "";
for (int i = 0; i < hash.length; i++)
{
int v = hash[i] & 0xFF;
if (v < 16) d += "0";
d += Integer.toString(v, 16).toUpperCase() + " ";
}
System.out.println(d);
}

18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33

}

java.security.MessageDigest 1.1

• static MessageDigest getInstance(String algorithmName)
returns a MessageDigest object that implements the specified algorithm. Throws
NoSuchAlgorithmException if the algorithm is not provided.
• void update(byte input)
• void update(byte[] input)
• void update(byte[] input, int offset, int len)
updates the digest, using the specified bytes.
• byte[] digest()
completes the hash computation, returns the computed digest, and resets the
algorithm object.
• void reset()
resets the digest.

9.4.2 Message Signing
In the last section, you saw how to compute a message digest—a fingerprint for
the original message. If the message is altered, the fingerprint of the altered
message will not match the fingerprint of the original. If the message and its
fingerprint are delivered separately, the recipient can check whether the message
has been tampered with. However, if both the message and the fingerprint were
intercepted, it is an easy matter to modify the message and then recompute the

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

551

fingerprint. After all, the message digest algorithms are publicly known, and they
don’t require secret keys. In that case, the recipient of the forged message and the
recomputed fingerprint would never know that the message has been altered.
Digital signatures solve this problem.
To help you understand how digital signatures work, we’ll explain a few concepts
from the field called public key cryptography. Public key cryptography is based on
the notion of a public key and private key. The idea is that you tell everyone in the
world your public key. However, only you hold the private key, and it is important
that you safeguard it and don’t release it to anyone else. The keys are matched
by mathematical relationships, though the exact nature of these relationships is
not important to us. (If you are interested, look it up in The Handbook of Applied
Cryptography at www.cacr.math.uwaterloo.ca/hac.)
The keys are quite long and complex. For example, here is a matching pair of
public and private Digital Signature Algorithm (DSA) keys.
Public key:
p: fca682ce8e12caba26efccf7110e526db078b05edecbcd1eb4a208f3ae1617ae01f35b91a47e6df63413c5e12ed089
9bcd132acd50d99151bdc43ee737592e17
q: 962eddcc369cba8ebb260ee6b6a126d9346e38c5
g: 678471b27a9cf44ee91a49c5147db1a9aaf244f05a434d6486931d2d14271b9e35030b71fd73da179069b32e293563
0e1c2062354d0da20a6c416e50be794ca4
y: c0b6e67b4ac098eb1a32c5f8c4c1f0e7e6fb9d832532e27d0bdab9ca2d2a8123ce5a8018b8161a760480fadd040b92
7281ddb22cb9bc4df596d7de4d1b977d50

Private key:
p: fca682ce8e12caba26efccf7110e526db078b05edecbcd1eb4a208f3ae1617ae01f35b91a47e6df63413c5e12ed089
9bcd132acd50d99151bdc43ee737592e17
q: 962eddcc369cba8ebb260ee6b6a126d9346e38c5
g: 678471b27a9cf44ee91a49c5147db1a9aaf244f05a434d6486931d2d14271b9e35030b71fd73da179069b32e293563
0e1c2062354d0da20a6c416e50be794ca4
x: 146c09f881656cc6c51f27ea6c3a91b85ed1d70a

It is believed to be practically impossible to compute one key from the other. That
is, even though everyone knows your public key, they can’t compute your private
key in your lifetime, no matter how many computing resources they have
available.
It might seem difficult to believe that you can’t compute the private key from the
public key, but nobody has ever found an algorithm to do this for the encryption

From the Library of Hristo Dimov Hristov

552

Chapter 9

Security

algorithms in common use today. If the keys are sufficiently long, brute
force—simply trying all possible keys—would require more computers than can
be built from all the atoms in the solar system, crunching away for thousands of
years. Of course it is possible that someone could come up with algorithms for
computing keys that are much more clever than brute force. For example, the
RSA algorithm (the encryption algorithm invented by Rivest, Shamir, and Adleman) depends on the difficulty of factoring large numbers. For the last 20 years,
many of the best mathematicians have tried to come up with good factoring algorithms, but so far with no success. For that reason, most cryptographers believe
that keys with a “modulus” of 2,000 bits or more are currently completely safe
from any attack. DSA is believed to be similarly secure.
Figure 9.11 illustrates how the process works in practice.

Figure 9.11 Public key signature exchange with DSA

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

553

Suppose Alice wants to send Bob a message, and Bob wants to know this message
came from Alice and not an impostor. Alice writes the message and signs the
message digest with her private key. Bob gets a copy of her public key. Bob then
applies the public key to verify the signature. If the verification passes, Bob can
be assured of two facts:
• The original message has not been altered.
• The message was signed by Alice, the holder of the private key that matches
the public key that Bob used for verification.
You can see why the security of private keys is so important. If someone steals
Alice’s private key, or if a government can require her to turn it over, then she is
in trouble. The thief or a government agent can now impersonate her by sending
messages, such as money transfer instructions, that others will believe came from
Alice.

9.4.3 Verifying a Signature
The JDK comes with the keytool program, which is a command-line tool to generate
and manage a set of certificates. We expect that ultimately the functionality of
this tool will be embedded in other, more user-friendly programs. But right now,
we’ll use keytool to show how Alice can sign a document and send it to Bob, and
how Bob can verify that the document really was signed by Alice and not an
impostor.
The keytool program manages keystores, databases of certificates and private/public
key pairs. Each entry in the keystore has an alias. Here is how Alice creates
a keystore, alice.certs, and generates a key pair with alias alice:
keytool -genkeypair -keystore alice.certs -alias alice

When creating or opening a keystore, you are prompted for a keystore password.
For this example, just use secret. If you were to use the keytool-generated keystore
for any serious purpose, you would need to choose a good password and
safeguard this file.
When generating a key, you are prompted for the following information:
Enter keystore password: secret
Reenter new password: secret
What is your first and last name?
[Unknown]: Alice Lee

From the Library of Hristo Dimov Hristov

554

Chapter 9

Security

What is the name of your organizational unit?
[Unknown]: Engineering
What is the name of your organization?
[Unknown]: ACME Software
What is the name of your City or Locality?
[Unknown]: San Francisco
What is the name of your State or Province?
[Unknown]: CA
What is the two-letter country code for this unit?
[Unknown]: US
Is <CN=Alice Lee, OU=Engineering, O=ACME Software, L=San Francisco, ST=CA, C=US> correct?
[no]: yes

The keytool uses names in the X.500 format, whose components are Common Name
(CN), Organizational Unit (OU), Organization (O), Location (L), State (ST), and
Country (C), to identify key owners and certificate issuers.
Finally, specify a key password, or press Enter to use the keystore password as
the key password.
Suppose Alice wants to give her public key to Bob. She needs to export a
certificate file:
keytool -exportcert -keystore alice.certs -alias alice -file alice.cer

Now Alice can send the certificate to Bob. When Bob receives the certificate, he
can print it:
keytool -printcert -file alice.cer

The printout looks like this:
Owner: CN=Alice Lee, OU=Engineering, O=ACME Software, L=San Francisco, ST=CA, C=US
Issuer: CN=Alice Lee, OU=Engineering, O=ACME Software, L=San Francisco, ST=CA, C=US
Serial number: 470835ce
Valid from: Sat Oct 06 18:26:38 PDT 2007 until: Fri Jan 04 17:26:38 PST 2008
Certificate fingerprints:
MD5: BC:18:15:27:85:69:48:B1:5A:C3:0B:1C:C6:11:B7:81
SHA1: 31:0A:A0:B8:C2:8B:3B:B6:85:7C:EF:C0:57:E5:94:95:61:47:6D:34
Signature algorithm name: SHA1withDSA
Version: 3

If Bob wants to check that he got the right certificate, he can call Alice and verify
the certificate fingerprint over the phone.

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

555

NOTE: Some certificate issuers publish certificate fingerprints on their web sites.
For example, to check the VeriSign certificate in the keystore
jre/lib/security/cacerts directory, use the -list option:
keytool -list -v -keystore jre/lib/security/cacerts

The password for this keystore is changeit. One of the certificates in this keystore is
Owner: OU=VeriSign Trust Network, OU="(c) 1998 VeriSign, Inc. - For authorized use only",
OU=Class 1 Public Primary Certification Authority - G2, O="VeriSign, Inc.", C=US
Issuer: OU=VeriSign Trust Network, OU="(c) 1998 VeriSign, Inc. - For authorized
use only", OU=Class 1 Public Primary Certification Authority - G2, O="VeriSign, Inc.",
C=US
Serial number: 4cc7eaaa983e71d39310f83d3a899192
Valid from: Sun May 17 17:00:00 PDT 1998 until: Tue Aug 01 16:59:59 PDT 2028
Certificate fingerprints:
MD5: DB:23:3D:F9:69:FA:4B:B9:95:80:44:73:5E:7D:41:83
SHA1: 27:3E:E1:24:57:FD:C4:F9:0C:55:E8:2B:56:16:7F:62:F5:32:E5:47

You can check that your certificate is valid by visiting the web site
www.verisign.com/repository/root.html.

Once Bob trusts the certificate, he can import it into his keystore.
keytool -importcert -keystore bob.certs -alias alice -file alice.cer

CAUTION: Never import into a keystore a certificate that you don’t fully trust.
Once a certificate is added to the keystore, any program that uses the keystore
assumes that the certificate can be used to verify signatures.

Now Alice can start sending signed documents to Bob. The jarsigner tool signs and
verifies JAR files. Alice simply adds the document to be signed into a JAR file.
jar cvf document.jar document.txt

She then uses the jarsigner tool to add the signature to the file. She needs to specify
the keystore, the JAR file, and the alias of the key to use.
jarsigner -keystore alice.certs document.jar alice

When Bob receives the file, he uses the -verify option of the jarsigner program.
jarsigner -verify -keystore bob.certs document.jar

From the Library of Hristo Dimov Hristov

556

Chapter 9

Security

Bob does not need to specify the key alias. The jarsigner program finds the X.500
name of the key owner in the digital signature and looks for a matching certificate
in the keystore.
If the JAR file is not corrupted and the signature matches, the jarsigner program
prints
jar verified.

Otherwise, the program displays an error message.

9.4.4 The Authentication Problem
Suppose you get a message from your friend Alice, signed with her private key,
using the method we just showed you. You might already have her public
key, or you can easily get it by asking her for a copy or by getting it from her web
page. Then, you can verify that the message was in fact authored by Alice and
has not been tampered with. Now, suppose you get a message from a stranger
who claims to represent a famous software company, urging you to run a program
attached to the message. The stranger even sends you a copy of his public key so
you can verify that he authored the message. You check that the signature is valid.
This proves that the message was signed with the matching private key and has
not been corrupted.
Be careful: You still have no idea who wrote the message. Anyone could have generated a pair of public and private keys, signed the message with the private key,
and sent the signed message and the public key to you. The problem of
determining the identity of the sender is called the authentication problem.
The usual way to solve the authentication problem is simple. Suppose the stranger
and you have a common acquaintance you both trust. Suppose the stranger meets
your acquaintance in person and hands over a disk with the public key. Your
acquaintance later meets you, assures you that he met the stranger and that the
stranger indeed works for the famous software company, and then gives you the
disk (see Figure 9.12). That way, your acquaintance vouches for the authenticity
of the stranger.
In fact, your acquaintance does not actually need to meet you. Instead, he can
use his private key to sign the stranger’s public key file (see Figure 9.13).
When you get the public key file, you verify the signature of your friend, and
because you trust him, you are confident that he did check the stranger’s
credentials before applying his signature.
However, you might not have a common acquaintance. Some trust models assume
that there is always a “chain of trust”—a chain of mutual acquaintances—so that
you trust every member of that chain. In practice, of course, that isn’t always

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

557

Figure 9.12 Authentication through a trusted intermediary
true. You might trust your friend, Alice, and you know that Alice trusts Bob, but
you don’t know Bob and aren’t sure that you trust him. Other trust models assume
that there is a benevolent big brother—a company in which we all trust. The best
known of such companies is VeriSign, Inc. (www.verisign.com).
You will often encounter digital signatures signed by one or more entities who
will vouch for the authenticity, and you will need to evaluate to what degree you
trust the authenticators. You might place a great deal of trust in VeriSign, perhaps
because you saw their logo on many web pages or because you heard that they
require multiple people with black attaché cases to come together into a secure
chamber whenever new master keys are to be minted.
However, you should have realistic expectations about what is actually being
authenticated. The CEO of VeriSign does not personally meet every individual
or company representative when authenticating a public key. You can get a
“class 1” ID simply by filling out a web form and paying a small fee. The key is
mailed to the e-mail address included in the certificate. Thus, you can be reasonably assured that the e-mail address is genuine, but the requestor could have
filled in any name and organization. There are more stringent classes of IDs. For
example, with a “class 3” ID, VeriSign will require an individual requestor to
appear before a notary public, and it will check the financial rating of a corporate
requestor. Other authenticators will have different procedures. Thus, when you
receive an authenticated message, it is important that you understand what, in
fact, is being authenticated.

From the Library of Hristo Dimov Hristov

558

Chapter 9

Security

Figure 9.13 Authentication through a trusted intermediary’s signature

9.4.5 Certificate Signing
In Section 9.4.3, “Verifying a Signature,” on p. 553 you saw how Alice used a selfsigned certificate to distribute a public key to Bob. However, Bob needed to ensure
that the certificate was valid by verifying the fingerprint with Alice.
Suppose Alice wants to send her colleague Cindy a signed message, but Cindy
doesn’t want to bother with verifying lots of signature fingerprints. Now suppose
there is an entity that Cindy trusts to verify signatures. In this example, Cindy
trusts the Information Resources Department at ACME Software.

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

559

That department operates a certificate authority (CA). Everyone at ACME has the
CA’s public key in their keystore, installed by a system administrator who carefully checked the key fingerprint. The CA signs the keys of ACME employees.
When they install each other’s keys, the keystore will trust them implicitly because
they are signed by a trusted key.
Here is how you can simulate this process. Create a keystore acmesoft.certs. Generate
a key pair and export the public key:
keytool -genkeypair -keystore acmesoft.certs -alias acmeroot
keytool -exportcert -keystore acmesoft.certs -alias acmeroot -file acmeroot.cer

The public key is exported into a “self-signed” certificate. Then add it to every
employee’s keystore.
keytool -importcert -keystore cindy.certs -alias acmeroot -file acmeroot.cer

For Alice to send messages to Cindy and to everyone else at ACME Software, she
needs to bring her certificate to the Information Resources Department and have
it signed. Unfortunately, this functionality is missing in the keytool program. In
the book’s companion code, we supply a CertificateSigner class to fill the gap. An
authorized staff member at ACME Software would verify Alice’s identity and
generate a signed certificate as follows:
java CertificateSigner -keystore acmesoft.certs -alias acmeroot
-infile alice.cer -outfile alice_signedby_acmeroot.cer

The certificate signer program must have access to the ACME Software keystore,
and the staff member must know the keystore password. Clearly, this is a sensitive
operation.
Alice gives the file alice_signedby_acmeroot.cer file to Cindy and to anyone else in ACME
Software. Alternatively, ACME Software can simply store the file in a company
directory. Remember, this file contains Alice’s public key and an assertion by
ACME Software that this key really belongs to Alice.
Now Cindy imports the signed certificate into her keystore:
keytool -importcert -keystore cindy.certs -alias alice -file alice_signedby_acmeroot.cer

The keystore verifies that the key was signed by a trusted root key that is already
present in the keystore. Cindy is not asked to verify the certificate fingerprint.
Once Cindy has added the root certificate and the certificates of the people who
regularly send her documents, she never has to worry about the keystore again.

From the Library of Hristo Dimov Hristov

560

Chapter 9

Security

9.4.6 Certificate Requests
In the preceding section, we simulated a CA with a keystore and the CertificateSigner
tool. However, most CAs run more sophisticated software to manage certificates,
and they use slightly different formats for certificates. This section shows the
added steps required to interact with those software packages.
We will use the OpenSSL software package as an example. The software is preinstalled on many Linux systems and Mac OS X, and a Cygwin port is also available.
You can also download the software at www.openssl.org.
To create a CA, run the CA script. The exact location depends on your operating
system. On Ubuntu, run
/usr/lib/ssl/misc/CA.pl -newca

This script creates a subdirectory called demoCA in the current directory. The directory contains a root key pair and storage for certificates and certificate revocation
lists.
You will want to import the public key into the Java keystores of all employees,
but it is in the Privacy Enhanced Mail (PEM) format, not the DER format that the
keystore accepts easily. Copy the file demoCA/cacert.pem to a file acmeroot.pem and open
that file in a text editor. Remove everything before the line
-----BEGIN CERTIFICATE-----

and after the line
-----END CERTIFICATE-----

Now you can import acmeroot.pem into each keystore in the usual way:
keytool -importcert -keystore cindy.certs -alias alice -file acmeroot.pem

It seems quite incredible that the keytool cannot carry out this editing operation
itself.
To sign Alice’s public key, you start by generating a certificate request that contains
the certificate in the PEM format:
keytool -certreq -keystore alice.store -alias alice -file alice.pem

To sign the certificate, run
openssl ca -in alice.pem -out alice_signedby_acmeroot.pem

As before, cut out everything outside the BEGIN CERTIFICATE/END CERTIFICATE markers
from alice_signedby_acmeroot.pem. Then import it into the keystore:
keytool -importcert -keystore cindy.certs -alias alice -file alice_signedby_acmeroot.pem

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

561

You can use the same steps to have a certificate signed by a public certificate
authority such as VeriSign.

9.4.7 Code Signing
A common use of authentication technology is signing executable programs. If
you download a program, you are naturally concerned about the damage it can
do. For example, the program could have been infected by a virus. If you know
where the code comes from and that it has not been tampered with since it left its
origin, your comfort level will be a lot higher than without this knowledge.
In this section, we’ll show you how to sign JAR files, and how you can configure
Java to verify the signature. This capability was designed for the Java Plug-in,
the launching point for applets and Java Web Start applications. These are no
longer commonly used technologies, but you may still need to support them in
legacy products.
When Java was first released, applets ran in the “sandbox,” with limited permissions, as soon as they were loaded. If users wanted to use applets that can access
the local file system, make network connections, and so on, they had to explicitly
agree. To ensure that the applet code was not tampered with in transit, it had to
be digitally signed.
Here is a specific example. Suppose that while surfing the Internet, you encounter
a web site that offers to run an applet from an unfamiliar vendor, provided you
grant it the permission to do so (see Figure 9.14). Such a program is signed with
a software developer certificate issued by a certificate authority that the Java runtime
trusts. The pop-up dialog box identifies the software developer and the certificate
issuer. Now you need to decide whether to authorize the program.
What facts do you have at your disposal that might influence your decision? Here
is what you know:
• Thawte sold a certificate to the software developer.
• The program really was signed with that certificate, and it hasn’t been modified
in transit.
• The certificate really was signed by Thawte—it was verified by the public key
in the local cacerts file.
Does that tell you whether the code is safe to run? Can you trust a vendor if all
you know is the vendor’s name and the fact that Thawte sold them a software
developer certificate? One would like to think that Thawte went to some degree
of trouble to assure itself that ChemAxon Kft. is not an outright cracker. However,
no certificate issuer carries out a comprehensive audit of the honesty and

From the Library of Hristo Dimov Hristov

562

Chapter 9

Security

Figure 9.14 Launching a signed applet
competence of software vendors. They merely verify the identity, typically by
inspecting a scanned copy of a business license or passport.
As you can see, this is not a satisfactory solution. A better way might have been
to expand the functionality of the sandbox. When the Java Web Start technology
was first released, it went beyond the sandbox and enabled users to agree to
limited file and printer access. However, that concept was never further developed.
Instead, the opposite happened. When the sandbox was under attack by hackers,
Oracle found it too difficult to keep up and discontinued support for unsigned
applets altogether.
Nowadays, applets are quite uncommon and mostly used for legacy purposes.
If you need to support an applet served to the public, sign it with a certificate
from a vendor who is trusted by the Java runtime environment.
For intranet application, one can do a bit better. One can install policy files and
certificates on local machines so that no user interaction is required for launching

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

563

code from trusted sources. Whenever the Java Plug-in tool loads signed code, it
consults the policy file for the permissions and the keystore for signatures.
For the remainder of this section, we will describe how you can build policy files
that grant specific permissions to code from known sources. Building and deploying these policy files is not for casual end users. However, system administrators
can carry out these tasks in preparation for distributing intranet programs.
Suppose ACME Software wants its employees to run certain programs that require
local file access, and it wants to deploy these programs through a browser as
applets or Web Start applications.
As you saw earlier in this chapter, ACME could identify the programs by their
code base. But that means ACME would need to update the policy files each time
the programs are moved to a different web server. Instead, ACME decides to
sign the JAR files that contain the program code.
First, ACME generates a root certificate:
keytool -genkeypair -keystore acmesoft.certs -alias acmeroot

Of course, the keystore containing the private root key must be kept in a safe
place. Therefore, we create a second keystore client.certs for the public certificates
and add the public acmeroot certificate into it.
keytool -exportcert -keystore acmesoft.certs -alias acmeroot -file acmeroot.cer
keytool -importcert -keystore client.certs -alias acmeroot -file acmeroot.cer

To make a signed JAR file, programmers add their class files to a JAR file in the
usual way. For example,
javac FileReadApplet.java
jar cvf FileReadApplet.jar *.class

Then a trusted person at ACME runs the jarsigner tool, specifying the JAR file and
the alias of the private key:
jarsigner -keystore acmesoft.certs FileReadApplet.jar acmeroot

The signed applet is now ready to be deployed on a web server.
Next, let us turn to the client machine configuration. A policy file must be
distributed to each client machine.
To reference a keystore, a policy file starts with the line
keystore "keystoreURL", "keystoreType";

The URL can be absolute or relative. Relative URLs are relative to the location of
the policy file. The type is JKS if the keystore was generated by keytool. For example,

From the Library of Hristo Dimov Hristov

564

Chapter 9

Security

keystore "client.certs", "JKS";

Then grant clauses can have suffixes signedBy "alias", such as this one:
grant signedBy "acmeroot"
{
...
};

Any signed code that can be verified with the public key associated with the alias
is now granted the permissions inside the grant clause.
You can try out the code signing process with the applet in Listing 9.17. The applet
tries to read from a local file. The default security policy only lets the applet read
files from its code base and any subdirectories. Use appletviewer to run the applet
and verify that you can view files from the code base directory, but not from
other directories.
We provide a policy file applet.policy with the contents:
keystore "client.certs", "JKS";
grant signedBy "acmeroot"
{
permission java.lang.RuntimePermission "usePolicy";
permission java.io.FilePermission "/etc/*", "read";
};

The usePolicy permission overrides the default “all or nothing” permission for
signed applets. Here, we say that any applets signed by acmeroot are allowed to
read files in the /etc directory. (Windows users: Substitute another directory such
as C:\Windows.)
Tell the applet viewer to use the policy file:
appletviewer -J-Djava.security.policy=applet.policy FileReadApplet.html

Now the applet can read files from the /etc directory, thus demonstrating that the
signing mechanism works.

TIP: If you have trouble getting this step to work, add the option
-J-Djava.security.debug=policy, and you will be rewarded with detailed messages
that trace how the program establishes the security policy.

As a final test, you can run your applet inside the browser (see Figure 9.15). You
need to copy the permission file and the keystore inside the Java deployment directory. If you run UNIX or Linux, that directory is the .java/deployment subdirectory

From the Library of Hristo Dimov Hristov

9.4 Digital Signatures

565

of your home directory. In Windows, it is the C:\Users\yourLoginName\AppData\Sun\
Java\Deployment directory. In the following, we’ll refer to that directory as deploydir .

Figure 9.15 A signed applet can read local files.
Copy applet.policy and client.certs to the deploydir/security directory. In that directory,
rename applet.policy to java.policy. (Double-check that you are not wiping out an
existing java.policy file. If there is one, add the applet.policy contents to it.)
Restart your browser and load the FileReadApplet.html. You should not be prompted
to accept any certificate. Check that you can load any file from the /etc directory
and the directory from which the applet was loaded, but not from other directories.
When you are done, remember to clean up your deploydir/security directory. Remove
the files java.policy and client.certs. Restart your browser. If you load the applet
again after cleaning up, you should no longer be able to read files from the local
file system. Instead, you will be prompted for a certificate. We’ll discuss security
certificates in the next section.

From the Library of Hristo Dimov Hristov

566

Chapter 9

Security

TIP: For more details on configuring client Java security, we refer you to the
Java Rich Internet Applications Guide at http://docs.oracle.com/javase/8/docs/
technotes/guides/jweb/index.html.

Listing 9.17
1

signed/FileReadApplet.java

package signed;

2
3
4
5
6
7

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.*;
import javax.swing.*;

8
9
10
11
12
13
14
15
16
17
18

/**
* This applet can run "outside the sandbox" and read local files when it is given the right
* permissions.
* @version 1.13 2016-05-10
* @author Cay Horstmann
*/
public class FileReadApplet extends JApplet
{
private JTextField fileNameField;
private JTextArea fileText;

19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37

public void init()
{
EventQueue.invokeLater(() ->
{
fileNameField = new JTextField(20);
JPanel panel = new JPanel();
panel.add(new JLabel("File name:"));
panel.add(fileNameField);
JButton openButton = new JButton("Open");
panel.add(openButton);
ActionListener listener = event -> loadFile(fileNameField.getText());
fileNameField.addActionListener(listener);
openButton.addActionListener(listener);
add(panel, "North");
fileText = new JTextArea();
add(new JScrollPane(fileText), "Center");
});
}

38
39
40
41
42

/**
* Loads the contents of a file into the text area.
* @param filename the file name
*/

From the Library of Hristo Dimov Hristov

