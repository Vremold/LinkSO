
public static void main(String[] args) throws IOException
{
if (args.length > 0)
{
String host = args[0];
InetAddress[] addresses = InetAddress.getAllByName(host);
for (InetAddress a : addresses)
System.out.println(a);
}
else
{
InetAddress localHostAddress = InetAddress.getLocalHost();
System.out.println(localHostAddress);
}
}

14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29

241

}

java.net.InetAddress 1.0

• static InetAddress getByName(String host)
• static InetAddress[] getAllByName(String host)
constructs an InetAddress, or an array of all Internet addresses, for the given host
name.
• static InetAddress getLocalHost()
constructs an InetAddress for the local host.
• byte[] getAddress()
returns an array of bytes that contains the numerical address.
• String getHostAddress()
returns a string with decimal numbers, separated by periods, for example
"129.6.15.28".
• String getHostName()
returns the host name.

4.2 Implementing Servers
Now that we have implemented a basic network client that receives data from
the Internet, let’s program a simple server that can send information to clients.
In the previous section, we have implemented a basic network client that receives
data from the Internet. In the following sections, we will program a simple server
that can send information to clients.

From the Library of Hristo Dimov Hristov

242

Chapter 4

Networking

4.2.1 Server Sockets
A server program, when started, waits for a client to attach to its port. For our
example program, we chose port number 8189, which is not used by any of
the standard services. The ServerSocket class establishes a socket. In our case, the
command
ServerSocket s = new ServerSocket(8189);

establishes a server that monitors port 8189. The command
Socket incoming = s.accept();

tells the program to wait indefinitely until a client connects to that port. Once
someone connects to this port by sending the correct request over the network,
this method returns a Socket object that represents the connection that was made.
You can use this object to get input and output streams, as is shown in the
following code:
InputStream inStream = incoming.getInputStream();
OutputStream outStream = incoming.getOutputStream();

Everything that the server sends to the server output stream becomes the input
of the client program, and all the output from the client program ends up in the
server input stream.
In all the examples in this chapter, we transmit text through sockets. We therefore
turn the streams into scanners and writers.
Scanner in = new Scanner(inStream, "UTF-8");
PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream, "UTF-8"),
true /* autoFlush */);

Let’s send the client a greeting:
out.println("Hello! Enter BYE to exit.");

When you use telnet to connect to this server program at port 8189, you will see
this greeting on the terminal screen.
In this simple server, we just read the client’s input, a line at a time, and echo it.
This demonstrates that the program receives the input. An actual server would
obviously compute and return an answer depending on the input.
String line = in.nextLine();
out.println("Echo: " + line);
if (line.trim().equals("BYE")) done = true;

In the end, we close the incoming socket.
incoming.close();

From the Library of Hristo Dimov Hristov

4.2 Implementing Servers

243

That is all there is to it. Every server program, such as an HTTP web server,
continues performing this loop:
1.
2.
3.
4.

It receives a command from the client (“get me this information”) through
an incoming data stream.
It decodes the client command.
It gathers the information that the client requested.
It sends the information to the client through the outgoing data stream.

Listing 4.3 is the complete program.

Listing 4.3
1

server/EchoServer.java

package server;

2
3
4
5

import java.io.*;
import java.net.*;
import java.util.*;

6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24

/**
* This program implements a simple server that listens to port 8189 and echoes back all client
* input.
* @version 1.21 2012-05-19
* @author Cay Horstmann
*/
public class EchoServer
{
public static void main(String[] args) throws IOException
{
// establish server socket
try (ServerSocket s = new ServerSocket(8189))
{
// wait for client connection
try (Socket incoming = s.accept())
{
InputStream inStream = incoming.getInputStream();
OutputStream outStream = incoming.getOutputStream();

25
26
27
28
29
30

try (Scanner in = new Scanner(inStream, "UTF-8"))
{
PrintWriter out = new PrintWriter(
new OutputStreamWriter(outStream, "UTF-8"),
true /* autoFlush */);

31
32

out.println("Hello! Enter BYE to exit.");

33
34

// echo client input
(Continues)

From the Library of Hristo Dimov Hristov

244

Chapter 4

Networking

Listing 4.3 (Continued)
boolean done = false;
while (!done && in.hasNextLine())
{
String line = in.nextLine();
out.println("Echo: " + line);
if (line.trim().equals("BYE")) done = true;
}

35
36
37
38
39
40
41

}

42

}

43

}

44

}

45
46

}

To try it out, compile and run the program. Then use telnet to connect to the
server localhost (or IP address 127.0.0.1) and port 8189.
If you are connected directly to the Internet, anyone in the world can access your
echo server, provided they know your IP address and the magic port number.
When you connect to the port, you will see the message shown in Figure 4.4:
Hello! Enter BYE to exit.

Figure 4.4 Accessing an echo server

From the Library of Hristo Dimov Hristov

4.2 Implementing Servers

245

Type anything and watch the input echo on your screen. Type BYE (all uppercase
letters) to disconnect. The server program will terminate as well.
java.net.ServerSocket 1.0

• ServerSocket(int port)
creates a server socket that monitors a port.
• Socket accept()
waits for a connection. This method blocks (i.e., idles) the current thread until the
connection is made. The method returns a Socket object through which the program
can communicate with the connecting client.
• void close()
closes the server socket.

4.2.2 Serving Multiple Clients
There is one problem with the simple server in the preceding example. Suppose
we want to allow multiple clients to connect to our server at the same time. Typically, a server runs constantly on a server computer, and clients from all over
the Internet might want to use it at the same time. Rejecting multiple connections
allows any one client to monopolize the service by connecting to it for a long time.
We can do much better through the magic of threads.
Every time we know the program has established a new socket connection—that
is, every time the call to accept() returns a socket—we will launch a new thread to
take care of the connection between the server and that client. The main program
will just go back and wait for the next connection. For this to happen, the main
loop of the server should look like this:
while (true)
{
Socket incoming = s.accept();
Runnable r = new ThreadedEchoHandler(incoming);
Thread t = new Thread(r);
t.start();
}

The ThreadedEchoHandler class implements Runnable and contains the communication
loop with the client in its run method.
class ThreadedEchoHandler implements Runnable
{
...

From the Library of Hristo Dimov Hristov

246

Chapter 4

Networking

public void run()
{
try (InputStream inStream = incoming.getInputStream();
OutputStream outStream = incoming.getOutputStream())
{
Process input and send response
}
catch(IOException e)
{
Handle exception
}
}
}

When each connection starts a new thread, multiple clients can connect to the
server at the same time. You can easily check this out.
1.
2.

Compile and run the server program (Listing 4.4).
Open several telnet windows as we have in Figure 4.5.

Figure 4.5 Several telnet windows communicating simultaneously

From the Library of Hristo Dimov Hristov

4.2 Implementing Servers

3.
4.

247

Switch between windows and type commands. Note that you can
communicate through all of them simultaneously.
When you are done, switch to the window from which you launched the
server program and press Ctrl+C to kill it.

NOTE: In this program, we spawn a separate thread for each connection. This
approach is not satisfactory for high-performance servers. You can achieve
greater server throughput by using features of the java.nio package. See
www.ibm.com/developerworks/java/library/j-javaio for more information.

Listing 4.4
1

threaded/ThreadedEchoServer.java

package threaded;

2
3
4
5

import java.io.*;
import java.net.*;
import java.util.*;

6
7
8
9
10
11
12
13
14
15
16
17
18
19

/**
* This program implements a multithreaded server that listens to port 8189 and echoes back
* all client input.
* @author Cay Horstmann
* @version 1.22 2016-04-27
*/
public class ThreadedEchoServer
{
public static void main(String[] args )
{
try (ServerSocket s = new ServerSocket(8189))
{
int i = 1;

20
21
22
23
24
25
26
27
28
29
30
31
32
33

while (true)
{
Socket incoming = s.accept();
System.out.println("Spawning " + i);
Runnable r = new ThreadedEchoHandler(incoming);
Thread t = new Thread(r);
t.start();
i++;
}
}
catch (IOException e)
{
e.printStackTrace();
(Continues)

From the Library of Hristo Dimov Hristov

248

Chapter 4

Networking

Listing 4.4 (Continued)
}

34

}

35
36

}

37
38
39
40
41
42
43

/**
* This class handles the client input for one server socket connection.
*/
class ThreadedEchoHandler implements Runnable
{
private Socket incoming;

44

/**
Constructs a handler.
@param incomingSocket the incoming socket
*/
public ThreadedEchoHandler(Socket incomingSocket)
{
incoming = incomingSocket;
}

45
46
47
48
49
50
51
52
53

public void run()
{
try (InputStream inStream = incoming.getInputStream();
OutputStream outStream = incoming.getOutputStream())
{
Scanner in = new Scanner(inStream, "UTF-8");
PrintWriter out = new PrintWriter(
new OutputStreamWriter(outStream, "UTF-8"),
true /* autoFlush */);

54
55
56
57
58
59
60
61
62
63

out.println( "Hello! Enter BYE to exit." );

64
65

// echo client input
boolean done = false;
while (!done && in.hasNextLine())
{
String line = in.nextLine();
out.println("Echo: " + line);
if (line.trim().equals("BYE"))
done = true;
}

66
67
68
69
70
71
72
73
74

}
catch (IOException e)
{
e.printStackTrace();
}

75
76
77
78
79

}

80
81

}

From the Library of Hristo Dimov Hristov

4.2 Implementing Servers

249

4.2.3 Half-Close
The half-close allows one end of a socket connection to terminate its output while
still receiving data from the other end.
Here is a typical situation. Suppose you transmit data to the server but you don’t
know at the outset how much data you have. With a file, you’d just close the file
at the end of the data. However, if you close a socket, you immediately disconnect
from the server and cannot read the response.
The half-close overcomes this problem. You can close the output stream of a
socket, thereby indicating to the server the end of the requested data, but keep
the input stream open.
The client side looks like this:
try (Socket socket = new Socket(host, port))
{
Scanner in = new Scanner(socket.getInputStream(), "UTF-8");
PrintWriter writer = new PrintWriter(socket.getOutputStream());
// send request data
writer.print(. . .);
writer.flush();
socket.shutdownOutput();
// now socket is half-closed
// read response data
while (in.hasNextLine() != null) { String line = in.nextLine(); . . . }
}

The server side simply reads input until the end of the input stream is reached.
Then it sends the response.
Of course, this protocol is only useful for one-shot services such as HTTP where
the client connects, issues a request, catches the response, and then disconnects.
java.net.Socket 1.0

• void shutdownOutput() 1.3
sets the output stream to “end of stream.”
• void shutdownInput() 1.3
sets the input stream to “end of stream.”
• boolean isOutputShutdown() 1.4
returns true if output has been shut down.
• boolean isInputShutdown() 1.4
returns true if input has been shut down.

From the Library of Hristo Dimov Hristov

250

Chapter 4

Networking

