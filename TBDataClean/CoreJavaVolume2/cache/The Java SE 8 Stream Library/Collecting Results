
19

public static Optional<Double> squareRoot(Double x)
{
return x < 0 ? Optional.empty() : Optional.of(Math.sqrt(x));
}

59
60
61
62

}

63

java.util.Optional 8

• <U> Optional<U> flatMap(Function<? super T,Optional<U>> mapper)
yields the result of applying mapper to the value of this Optional, or an empty Optional
if this Optional is empty.

1.8 Collecting Results
When you are done with a stream, you will often want to look at its elements.
You can call the iterator method, which yields an old-fashioned iterator that you
can use to visit the elements.
Alternatively, you can call the forEach method to apply a function to each element:
stream.forEach(System.out::println);

On a parallel stream, the forEach method traverses elements in arbitrary order.
If you want to process them in stream order, call forEachOrdered instead. Of course,
you might then give up some or all of the benefits of parallelism.
But more often than not, you will want to collect the result in a data structure.
You can call toArray and get an array of the stream elements.
Since it is not possible to create a generic array at runtime, the expression
stream.toArray() returns an Object[] array. If you want an array of the correct type,
pass in the array constructor:
String[] result = stream.toArray(String[]::new);
// stream.toArray() has type Object[]

For collecting stream elements to another target, there is a convenient collect
method that takes an instance of the Collector interface. The Collectors class provides
a large number of factory methods for common collectors. To collect a stream
into a list or set, simply call
List<String> result = stream.collect(Collectors.toList());

or
Set<String> result = stream.collect(Collectors.toSet());

From the Library of Hristo Dimov Hristov

20

Chapter 1

The Java SE 8 Stream Library

If you want to control which kind of set you get, use the following call instead:
TreeSet<String> result = stream.collect(Collectors.toCollection(TreeSet::new));

Suppose you want to collect all strings in a stream by concatenating them. You
can call
String result = stream.collect(Collectors.joining());

If you want a delimiter between elements, pass it to the joining method:
String result = stream.collect(Collectors.joining(", "));

If your stream contains objects other than strings, you need to first convert them
to strings, like this:
String result = stream.map(Object::toString).collect(Collectors.joining(", "));

If you want to reduce the stream results to a sum, average, maximum, or minimum, use one of the summarizing(Int|Long|Double) methods. These methods take a
function that maps the stream objects to a number and yield a result of type
(Int|Long|Double)SummaryStatistics, simultaneously computing the sum, count, average,
minimum, and maximum.
IntSummaryStatistics summary = stream.collect(
Collectors.summarizingInt(String::length));
double averageWordLength = summary.getAverage();
double maxWordLength = summary.getMax();

java.util.stream.BaseStream 8

• Iterator<T> iterator()
yields an iterator for obtaining the elements of this stream. This is a terminal
operation.

The example program in Listing 1.4 shows how to collect elements from a stream.

Listing 1.4
1

collecting/CollectingResults.java

package collecting;

2
3
4
5

import java.io.*;
import java.nio.charset.*;
import java.nio.file.*;

From the Library of Hristo Dimov Hristov

1.8 Collecting Results

6
7

21

import java.util.*;
import java.util.stream.*;

8
9
10
11
12
13
14
15
16
17
18
19

public class CollectingResults
{
public static Stream<String> noVowels() throws IOException
{
String contents = new String(Files.readAllBytes(
Paths.get("../gutenberg/alice30.txt")),
StandardCharsets.UTF_8);
List<String> wordList = Arrays.asList(contents.split("\\PL+"));
Stream<String> words = wordList.stream();
return words.map(s -> s.replaceAll("[aeiouAEIOU]", ""));
}

20
21
22
23
24
25
26
27

public static <T> void show(String label, Set<T> set)
{
System.out.print(label + ": " + set.getClass().getName());
System.out.println("["
+ set.stream().limit(10).map(Object::toString)
.collect(Collectors.joining(", ")) + "]");
}

28
29
30
31
32
33
34

public static void main(String[] args) throws IOException
{
Iterator<Integer> iter = Stream.iterate(0, n -> n + 1).limit(10)
.iterator();
while (iter.hasNext())
System.out.println(iter.next());

35
36
37

Object[] numbers = Stream.iterate(0, n -> n + 1).limit(10).toArray();
System.out.println("Object array:" + numbers); // Note it's an Object[] array

38
39
40
41
42
43
44
45
46
47
48
49

try
{
Integer number = (Integer) numbers[0]; // OK
System.out.println("number: " + number);
System.out.println("The following statement throws an exception:");
Integer[] numbers2 = (Integer[]) numbers; // Throws exception
}
catch (ClassCastException ex)
{
System.out.println(ex);
}

50
51
52
53

Integer[] numbers3 = Stream.iterate(0, n -> n + 1).limit(10)
.toArray(Integer[]::new);
System.out.println("Integer array: " + numbers3); // Note it's an Integer[] array
(Continues)

From the Library of Hristo Dimov Hristov

22

Chapter 1

The Java SE 8 Stream Library

Listing 1.4 (Continued)
54

Set<String> noVowelSet = noVowels()
.collect(Collectors.toSet());
show("noVowelSet", noVowelSet);

55
56
57
58

TreeSet<String> noVowelTreeSet = noVowels().collect(
Collectors.toCollection(TreeSet::new));
show("noVowelTreeSet", noVowelTreeSet);

59
60
61
62

String result = noVowels().limit(10).collect(
Collectors.joining());
System.out.println("Joining: " + result);
result = noVowels().limit(10)
.collect(Collectors.joining(", "));
System.out.println("Joining with commas: " + result);

63
64
65
66
67
68
69

IntSummaryStatistics summary = noVowels().collect(
Collectors.summarizingInt(String::length));
double averageWordLength = summary.getAverage();
double maxWordLength = summary.getMax();
System.out.println("Average word length: " + averageWordLength);
System.out.println("Max word length: " + maxWordLength);
System.out.println("forEach:");
noVowels().limit(10).forEach(System.out::println);

70
71
72
73
74
75
76
77

}

78
79

}

java.util.stream.Stream 8

• void forEach(Consumer<? super T> action)
invokes action on each element of the stream. This is a terminal operation.
• Object[] toArray()
• <A> A[] toArray(IntFunction<A[]> generator)
yields an array of objects, or of type A when passed a constructor reference A[]::new.
These are terminal operations.
• <R,A> R collect(Collector<? super T,A,R> collector)
collects the elements in this stream, using the given collector. The Collectors class
has factory methods for many collectors.

From the Library of Hristo Dimov Hristov

1.8 Collecting Results

23

java.util.stream.Collectors 8

• static <T> Collector<T,?,List<T>> toList()
• static <T> Collector<T,?,Set<T>> toSet()
yields collectors that collect elements in a list or set.
• static <T,C extends Collection<T>> Collector<T,?,C> toCollection(Supplier<C> collectionFactory)
yields a collector that collects elements into an arbitrary collection. Pass a constructor
reference such as TreeSet::new.
• static Collector<CharSequence,?,String> joining()
• static Collector<CharSequence,?,String> joining(CharSequence delimiter)
• static Collector<CharSequence,?,String> joining(CharSequence delimiter, CharSequence prefix,
CharSequence suffix)

yields a collector that joins strings. The delimiter is placed between strings, and the
prefix and suffix before the first and after the last string. When not specified, these
are empty.
• static <T> Collector<T,?,IntSummaryStatistics> summarizingInt(ToIntFunction<? super T> mapper)
• static<T>Collector<T,?,LongSummaryStatistics>summarizingLong(ToLongFunction<?superT>mapper)
• static <T> Collector<T,?,DoubleSummaryStatistics> summarizingDouble(ToDoubleFunction<? super
T> mapper)

yields collectors that produce an (Int|Long|Double)SummaryStatistics object, from which
you can obtain the count, sum, average, maximum, and minimum of the results of
applying mapper to each element.

IntSummaryStatistics 8
LongSummaryStatistics 8
DoubleSummaryStatistics 8

• long getCount()
yields the count of the summarized elements.
• (int|long|double) getSum()
• double getAverage()
yields the sum or average of the summarized elements, or zero if there are no
elements.
• (int|long|double) getMax()
• (int|long|double) getMin()
yields the maximum or minimum of the summarized
(Integer|Long|Double).(MAX|MIN)_VALUE if there are no elements.

elements,

or

From the Library of Hristo Dimov Hristov

24

Chapter 1

The Java SE 8 Stream Library

