
807

java.awt.Graphics2D 1.2

• void clip(Shape s)
intersects the current clipping shape with the shape s.
• FontRenderContext getFontRenderContext()
returns a font render context that is necessary for constructing TextLayout objects.

java.awt.font.TextLayout 1.2

• TextLayout(String s, Font f, FontRenderContext context)
constructs a text layout object from a given string and font, using the font render
context to obtain font properties for a particular device.
• float getAdvance()
returns the width of this text layout.
• float getAscent()
• float getDescent()
returns the height of this text layout above and below the baseline.
• float getLeading()
returns the distance between successive lines in the font used by this text layout.

11.8 Transparency and Composition
In the standard RGB color model, every color is described by its red, green, and
blue components. However, it is also convenient to describe areas of an image
that are transparent or partially transparent. When you superimpose an image onto
an existing drawing, the transparent pixels do not obscure the pixels under them
at all, whereas partially transparent pixels are mixed with the pixels under them.
Figure 11.21 shows the effect of overlaying a partially transparent rectangle on
an image. You can still see the details of the image shine through from under the
rectangle.
In the Java 2D API, transparency is described by an alpha channel. Each pixel has,
in addition to its red, green, and blue color components, an alpha value between
0 (fully transparent) and 1 (fully opaque). For example, the rectangle in
Figure 11.21 was filled with a pale yellow color with 50% transparency:
new Color(0.7F, 0.7F, 0.0F, 0.5F);

From the Library of Hristo Dimov Hristov

808

Chapter 11

Advanced AWT

Figure 11.21 Overlaying a partially transparent rectangle on an image
Now let us look at what happens if you superimpose two shapes. You need to
blend or compose the colors and alpha values of the source and destination pixels.
Porter and Duff, two researchers in the field of computer graphics, have formulated 12 possible composition rules for this blending process. The Java 2D API implements all of these rules. Before going any further, we’d like to point out that
only two of these rules have practical significance. If you find the rules arcane or
confusing, just use the SRC_OVER rule. It is the default rule for a Graphics2D object, and
it gives the most intuitive results.
Here is the theory behind the rules. Suppose you have a source pixel with alpha
value aS. In the image, there is already a destination pixel with alpha value aD. You
want to compose the two. The diagram in Figure 11.22 shows how to design a
composition rule.

Figure 11.22 Designing a composition rule

From the Library of Hristo Dimov Hristov

11.8 Transparency and Composition

809

Porter and Duff consider the alpha value as the probability that the pixel color
should be used. From the perspective of the source, there is a probability aS that
it wants to use the source color and a probability of 1 – aS that it doesn’t care. The
same holds for the destination. When composing the colors, let us assume that
the probabilities are independent. Then there are four cases, as shown in
Figure 11.22. If the source wants to use the source color and the destination doesn’t
care, then it seems reasonable to let the source have its way. That’s why the upper
right corner of the diagram is labeled “S”. The probability for that event is
aS · (1 – aD). Similarly, the lower left corner is labeled “D”. What should one do if
both destination and source would like to select their color? That’s where the
Porter–Duff rules come in. If we decide that the source is more important, we label
the lower right corner with an “S” as well. That rule is called SRC_OVER. In that rule,
you combine the source colors with a weight of aS and the destination colors with
a weight of (1 – aS) · aD.
The visual effect is a blending of the source and destination, with preference
given to the source. In particular, if aS is 1, then the destination color is not taken
into account at all. If aS is 0, then the source pixel is completely transparent and
the destination color is unchanged.
The other rules depend on what letters you put in the boxes of the probability
diagram. Table 11.1 and Figure 11.23 show all rules that are supported by the Java
2D API. The images in the figure show the results of the rules when a rectangular
source region with an alpha of 0.75 is combined with an elliptical destination
region with an alpha of 1.0.
As you can see, most of the rules aren’t very useful. Consider, as an extreme case,
the DST_IN rule. It doesn’t take the source color into account at all, but it uses the
alpha of the source to affect the destination. The SRC rule is potentially useful—it
forces the source color to be used, turning off blending with the destination.
For more information on the Porter–Duff rules, see, for example, Computer
Graphics: Principles and Practice, Second Edition in C, by James D. Foley, Andries
van Dam, Steven K. Feiner, et al.
Use the setComposite method of the Graphics2D class to install an object of a class that
implements the Composite interface. The Java 2D API supplies one such class,
AlphaComposite, that implements all the Porter–Duff rules in Figure 11.23.
The factory method getInstance of the AlphaComposite class yields an AlphaComposite object.
You supply the rule and the alpha value to be used for source pixels. For example,
consider the following code:

From the Library of Hristo Dimov Hristov

810

Chapter 11

Advanced AWT

Table 11.1 The Porter–Duff Composition Rules
Rule

Explanation

CLEAR

Source clears destination.

SRC

Source overwrites destination and empty pixels.

DST

Source does not affect destination.

SRC_OVER

Source blends with destination and overwrites empty pixels.

DST_OVER

Source does not affect destination and overwrites empty pixels.

SRC_IN

Source overwrites destination.

SRC_OUT

Source clears destination and overwrites empty pixels.

DST_IN

Source alpha modifies destination.

DST_OUT

Source alpha complement modifies destination.

SRC_ATOP

Source blends with destination.

DST_ATOP

Source alpha modifies destination. Source overwrites empty pixels.

XOR

Source alpha complement modifies destination. Source overwrites
empty pixels.

int rule = AlphaComposite.SRC_OVER;
float alpha = 0.5f;
g2.setComposite(AlphaComposite.getInstance(rule, alpha));
g2.setPaint(Color.blue);
g2.fill(rectangle);

The rectangle is then painted with blue color and an alpha value of 0.5. Since the
composition rule is SRC_OVER, it is transparently overlaid on the existing image.
The program in Listing 11.3 lets you explore these composition rules. Pick a rule
from the combo box and use the slider to set the alpha value of the AlphaComposite
object.
Furthermore, the program displays a verbal description of each rule. Note that
the descriptions are computed from the composition rule diagrams. For example,
a "DS" in the second row stands for “blends with destination.”
The program has one important twist. There is no guarantee that the graphics
context that corresponds to the screen has an alpha channel. (In fact, it generally
does not.) When pixels are deposited to a destination without an alpha channel,
the pixel colors are multiplied with the alpha value and the alpha value is

From the Library of Hristo Dimov Hristov

11.8 Transparency and Composition

811

Figure 11.23 Porter–Duff composition rules
discarded. Now, several of the Porter–Duff rules use the alpha values of the
destination, which means a destination alpha channel is important. For that reason,
we use a buffered image with the ARGB color model to compose the shapes. After
the images have been composed, we draw the resulting image to the screen.
BufferedImage image = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
Graphics2D gImage = image.createGraphics();
// now draw to gImage
g2.drawImage(image, null, 0, 0);

Listings 11.3 and 11.4 show the frame and component class. The Rule class
in Listing 11.5 provides a brief explanation for each rule—see Figure 11.24. As
you run the program, move the alpha slider from left to right to see the effect on
the composed shapes. In particular, note that the only difference between the
DST_IN and DST_OUT rules is how the destination (!) color changes when you change
the source alpha.

From the Library of Hristo Dimov Hristov

812

Chapter 11

Advanced AWT

Figure 11.24 The CompositeTest program
Listing 11.3
1

composite/CompositeTestFrame.java

package composite;

2
3

import java.awt.*;

4
5

import javax.swing.*;

6
7
8
9
10
11
12
13
14

/**
* This frame contains a combo box to choose a composition rule, a slider to change the source
* alpha channel, and a component that shows the composition.
*/
class CompositeTestFrame extends JFrame
{
private static final int DEFAULT_WIDTH = 400;
private static final int DEFAULT_HEIGHT = 400;

15

From the Library of Hristo Dimov Hristov

11.8 Transparency and Composition

813

private CompositeComponent canvas;
private JComboBox<Rule> ruleCombo;
private JSlider alphaSlider;
private JTextField explanation;

16
17
18
19
20

public CompositeTestFrame()
{
setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);

21
22
23
24

canvas = new CompositeComponent();
add(canvas, BorderLayout.CENTER);

25
26
27

ruleCombo = new JComboBox<>(new Rule[] { new Rule("CLEAR", " ", " "),
new Rule("SRC", " S", " S"), new Rule("DST", " ", "DD"),
new Rule("SRC_OVER", " S", "DS"), new Rule("DST_OVER", " S", "DD"),
new Rule("SRC_IN", " ", " S"), new Rule("SRC_OUT", " S", " "),
new Rule("DST_IN", " ", " D"), new Rule("DST_OUT", " ", "D "),
new Rule("SRC_ATOP", " ", "DS"), new Rule("DST_ATOP", " S", " D"),
new Rule("XOR", " S", "D "), });
ruleCombo.addActionListener(event ->
{
Rule r = (Rule) ruleCombo.getSelectedItem();
canvas.setRule(r.getValue());
explanation.setText(r.getExplanation());
});

28
29
30
31
32
33
34
35
36
37
38
39
40
41

alphaSlider = new JSlider(0, 100, 75);
alphaSlider.addChangeListener(event -> canvas.setAlpha(alphaSlider.getValue()));
JPanel panel = new JPanel();
panel.add(ruleCombo);
panel.add(new JLabel("Alpha"));
panel.add(alphaSlider);
add(panel, BorderLayout.NORTH);

42
43
44
45
46
47
48
49

explanation = new JTextField();
add(explanation, BorderLayout.SOUTH);

50
51
52

canvas.setAlpha(alphaSlider.getValue());
Rule r = ruleCombo.getItemAt(ruleCombo.getSelectedIndex());
canvas.setRule(r.getValue());
explanation.setText(r.getExplanation());

53
54
55
56

}

57
58

}

From the Library of Hristo Dimov Hristov

814

Chapter 11

Listing 11.4
1

Advanced AWT

composite/CompositeComponent.java

package composite;

2
3
4
5
6

import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import javax.swing.*;

7
8
9
10
11
12
13
14
15
16

/**
* This component draws two shapes, composed with a composition rule.
*/
class CompositeComponent extends JComponent
{
private int rule;
private Shape shape1;
private Shape shape2;
private float alpha;

17
18
19
20
21
22

public CompositeComponent()
{
shape1 = new Ellipse2D.Double(100, 100, 150, 100);
shape2 = new Rectangle2D.Double(150, 150, 150, 100);
}

23
24
25
26

public void paintComponent(Graphics g)
{
Graphics2D g2 = (Graphics2D) g;

27

BufferedImage image = new BufferedImage(getWidth(), getHeight(),
BufferedImage.TYPE_INT_ARGB);
Graphics2D gImage = image.createGraphics();
gImage.setPaint(Color.red);
gImage.fill(shape1);
AlphaComposite composite = AlphaComposite.getInstance(rule, alpha);
gImage.setComposite(composite);
gImage.setPaint(Color.blue);
gImage.fill(shape2);
g2.drawImage(image, null, 0, 0);

28
29
30
31
32
33
34
35
36
37
38

}

39
40
41
42
43
44
45
46
47
48

/**
* Sets the composition rule.
* @param r the rule (as an AlphaComposite constant)
*/
public void setRule(int r)
{
rule = r;
repaint();
}

From the Library of Hristo Dimov Hristov

11.8 Transparency and Composition

815

49

/**
* Sets the alpha of the source.
* @param a the alpha value between 0 and 100
*/
public void setAlpha(int a)
{
alpha = (float) a / 100.0F;
repaint();
}

50
51
52
53
54
55
56
57
58
59

}

Listing 11.5
1

composite/Rule.java

package composite;

2
3

import java.awt.*;

4
5
6
7
8
9
10
11
12

/**
* This class describes a Porter-Duff rule.
*/
class Rule
{
private String name;
private String porterDuff1;
private String porterDuff2;

13
14
15
16
17
18
19
20
21
22
23
24
25

/**
* Constructs a Porter-Duff rule.
* @param n the rule name
* @param pd1 the first row of the Porter-Duff square
* @param pd2 the second row of the Porter-Duff square
*/
public Rule(String n, String pd1, String pd2)
{
name = n;
porterDuff1 = pd1;
porterDuff2 = pd2;
}

26
27
28
29
30
31
32

/**
* Gets an explanation of the behavior of this rule.
* @return the explanation
*/
public String getExplanation()
{
(Continues)

From the Library of Hristo Dimov Hristov

816

Chapter 11

Advanced AWT

Listing 11.5 (Continued)
StringBuilder r = new StringBuilder("Source ");
if (porterDuff2.equals(" ")) r.append("clears");
if (porterDuff2.equals(" S")) r.append("overwrites");
if (porterDuff2.equals("DS")) r.append("blends with");
if (porterDuff2.equals(" D")) r.append("alpha modifies");
if (porterDuff2.equals("D ")) r.append("alpha complement modifies");
if (porterDuff2.equals("DD")) r.append("does not affect");
r.append(" destination");
if (porterDuff1.equals(" S")) r.append(" and overwrites empty pixels");
r.append(".");
return r.toString();

33
34
35
36
37
38
39
40
41
42
43

}

44
45

public String toString()
{
return name;
}

46
47
48
49
50

/**
* Gets the value of this rule in the AlphaComposite class.
* @return the AlphaComposite constant value, or -1 if there is no matching constant
*/
public int getValue()
{
try
{
return (Integer) AlphaComposite.class.getField(name).get(null);
}
catch (Exception e)
{
return -1;
}
}

51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66

}

java.awt.Graphics2D 1.2

• void setComposite(Composite s)
sets the composite of this graphics context to the given object that implements the
Composite interface.

From the Library of Hristo Dimov Hristov

