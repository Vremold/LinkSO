
817

java.awt.AlphaComposite 1.2

• static AlphaComposite getInstance(int rule)
• static AlphaComposite getInstance(int rule, float sourceAlpha)
constructs an alpha composite object. The rule is one of CLEAR, SRC, SRC_OVER, DST_OVER,
SRC_IN, SRC_OUT, DST_IN, DST_OUT, DST, DST_ATOP, SRC_ATOP, XOR.

11.9 Rendering Hints
In the preceding sections you have seen that the rendering process is quite complex. Although the Java 2D API is surprisingly fast in most cases, sometimes you
would like to have control over trade-offs between speed and quality. You can
achieve this by setting rendering hints. The setRenderingHint method of the Graphics2D
class lets you set a single hint. The hints’ keys and values are declared in the
RenderingHints class. Table 11.2 summarizes the choices. The values that end in _DEFAULT
denote the defaults that are chosen by a particular implementation as a good
trade-off between performance and quality.

Table 11.2 Rendering Hints
Key

Value

Explanation

KEY_ANTIALIASING

VALUE_ANTIALIAS_ON
VALUE_ANTIALIAS_OFF
VALUE_ANTIALIAS_DEFAULT

Turn antialiasing for shapes
on or off.

KEY_TEXT_ANTIALIASING

VALUE_TEXT_ANTIALIAS_ON
VALUE_TEXT_ANTIALIAS_OFF
VALUE_TEXT_ANTIALIAS_DEFAULT
VALUE_TEXT_ANTIALIAS_GASP 6
VALUE_TEXT_ANTIALIAS_LCD_HRGB 6
VALUE_TEXT_ANTIALIAS_LCD_HBGR 6
VALUE_TEXT_ANTIALIAS_LCD_VRGB 6
VALUE_TEXT_ANTIALIAS_LCD_VBGR 6

Turn antialiasing for fonts
on or off. When using the
value VALUE_TEXT_ANTIALIAS_GASP,
the “gasp table” of the font
is consulted to decide
whether a particular size of
a font should be antialiased.
The LCD values force
subpixel rendering for a
particular display type.

KEY_FRACTIONALMETRICS

VALUE_FRACTIONALMETRICS_ON
VALUE_FRACTIONALMETRICS_OFF
VALUE_FRACTIONALMETRICS_DEFAULT

Turn the computation of
fractional character
dimensions on or off.
Fractional character
dimensions lead to better
placement of characters.
(Continues)

From the Library of Hristo Dimov Hristov

818

Chapter 11

Advanced AWT

Table 11.2 (Continued)
Key

Value

Explanation

KEY_RENDERING

VALUE_RENDER_QUALITY
VALUE_RENDER_SPEED
VALUE_RENDER_DEFAULT

When available, select the
rendering algorithm for
greater quality or speed.

KEY_STROKE_CONTROL 1.3

VALUE_STROKE_NORMALIZE
VALUE_STROKE_PURE
VALUE_STROKE_DEFAULT

Select whether the
placement of strokes is
controlled by the graphics
accelerator (which may
move it by up to half a
pixel) or is computed by the
“pure” rule that mandates
that strokes run through the
centers of pixels.

KEY_DITHERING

VALUE_DITHER_ENABLE
VALUE_DITHER_DISABLE
VALUE_DITHER_DEFAULT

Turn dithering for colors on
or off. Dithering
approximates color values
by drawing groups of pixels
of similar colors. (Note that
antialiasing can interfere
with dithering.)

KEY_ALPHA_INTERPOLATION

VALUE_ALPHA_INTERPOLATION_QUALITY
VALUE_ALPHA_INTERPOLATION_SPEED
VALUE_ALPHA_INTERPOLATION_DEFAULT

Turn precise computation
of alpha composites on or
off.

KEY_COLOR_RENDERING

VALUE_COLOR_RENDER_QUALITY
VALUE_COLOR_RENDER_SPEED
VALUE_COLOR_RENDER_DEFAULT

Select quality or speed for
color rendering. This is only
an issue when you use
different color spaces.

KEY_INTERPOLATION

VALUE_INTERPOLATION_NEAREST_NEIGHBOR
VALUE_INTERPOLATION_BILINEAR
VALUE_INTERPOLATION_BICUBIC

Select a rule for
interpolating pixels when
scaling or rotating images.

The most useful of these settings involves antialiasing. This technique removes
the “jaggies” from slanted lines and curves. As you can see in Figure 11.25, a
slanted line must be drawn as a “staircase” of pixels. Especially on low-resolution
screens, this line can look ugly. But if, instead of drawing each pixel completely
on or off, you color in the pixels that are partially covered with the color value
proportional to the area of the pixel that the line covers, then the result looks
much smoother. This technique is called antialiasing. Of course, antialiasing takes
a bit longer because it has to compute all those color values.

From the Library of Hristo Dimov Hristov

11.9 Rendering Hints

819

Figure 11.25 Antialiasing
For example, here is how you can request the use of antialiasing:
g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

It also makes sense to use antialiasing for fonts.
g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

The other rendering hints are not as commonly used.
You can also put a bunch of key/value hint pairs into a map and set them all at
once by calling the setRenderingHints method. Any collection class implementing the
map interface will do, but you might as well use the RenderingHints class itself. It
implements the Map interface and supplies a default map implementation if you
pass null to the constructor. For example,
RenderingHints hints = new RenderingHints(null);
hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
hints.put(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
g2.setRenderingHints(hints);

That is the technique we use in Listing 11.6. The program shows several rendering
hints that we found beneficial. Note the following:
• Antialiasing smooths the ellipse.
• Text antialiasing smooths the text.

From the Library of Hristo Dimov Hristov

820

Chapter 11

Advanced AWT

• On some platforms, fractional text metrics move the letters a bit closer together.
• Selecting VALUE_RENDER_QUALITY smooths the scaled image. (You would get the same
effect by setting KEY_INTERPOLATION to VALUE_INTERPOLATION_BICUBIC.)
• When antialiasing is turned off, selecting VALUE_STROKE_NORMALIZE changes the appearance of the ellipse and the placement of the diagonal line in the square.
Figure 11.26 shows a screen capture of the program.

Figure 11.26 Testing the effect of rendering hints
Listing 11.6
1

renderQuality/RenderQualityTestFrame.java

package renderQuality;

2
3
4

import java.awt.*;
import java.awt.geom.*;

5
6

import javax.swing.*;

7
8
9
10
11
12
13
14
15
16
17

/**
* This frame contains buttons to set rendering hints and an image that is drawn with the selected
* hints.
*/
public class RenderQualityTestFrame extends JFrame
{
private RenderQualityComponent canvas;
private JPanel buttonBox;
private RenderingHints hints;
private int r;

18

From the Library of Hristo Dimov Hristov

11.9 Rendering Hints

19
20
21
22
23

821

public RenderQualityTestFrame()
{
buttonBox = new JPanel();
buttonBox.setLayout(new GridBagLayout());
hints = new RenderingHints(null);

24

makeButtons("KEY_ANTIALIASING", "VALUE_ANTIALIAS_OFF", "VALUE_ANTIALIAS_ON");
makeButtons("KEY_TEXT_ANTIALIASING", "VALUE_TEXT_ANTIALIAS_OFF", "VALUE_TEXT_ANTIALIAS_ON");
makeButtons("KEY_FRACTIONALMETRICS", "VALUE_FRACTIONALMETRICS_OFF",
"VALUE_FRACTIONALMETRICS_ON");
makeButtons("KEY_RENDERING", "VALUE_RENDER_SPEED", "VALUE_RENDER_QUALITY");
makeButtons("KEY_STROKE_CONTROL", "VALUE_STROKE_PURE", "VALUE_STROKE_NORMALIZE");
canvas = new RenderQualityComponent();
canvas.setRenderingHints(hints);

25
26
27
28
29
30
31
32
33

add(canvas, BorderLayout.CENTER);
add(buttonBox, BorderLayout.NORTH);
pack();

34
35
36
37

}

38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53

/**
* Makes a set of buttons for a rendering hint key and values.
* @param key the key name
* @param value1 the name of the first value for the key
* @param value2 the name of the second value for the key
*/
void makeButtons(String key, String value1, String value2)
{
try
{
final RenderingHints.Key k =
(RenderingHints.Key) RenderingHints.class.getField(key).get(null);
final Object v1 = RenderingHints.class.getField(value1).get(null);
final Object v2 = RenderingHints.class.getField(value2).get(null);
JLabel label = new JLabel(key);

54
55
56
57

buttonBox.add(label, new GBC(0, r).setAnchor(GBC.WEST));
ButtonGroup group = new ButtonGroup();
JRadioButton b1 = new JRadioButton(value1, true);

58
59
60
61
62
63
64
65
66

buttonBox.add(b1, new GBC(1, r).setAnchor(GBC.WEST));
group.add(b1);
b1.addActionListener(event ->
{
hints.put(k, v1);
canvas.setRenderingHints(hints);
});
JRadioButton b2 = new JRadioButton(value2, false);
(Continues)

From the Library of Hristo Dimov Hristov

822

Chapter 11

Advanced AWT

Listing 11.6 (Continued)
67

buttonBox.add(b2, new GBC(2, r).setAnchor(GBC.WEST));
group.add(b2);
b2.addActionListener(event ->
{
hints.put(k, v2);
canvas.setRenderingHints(hints);
});
hints.put(k, v1);
r++;

68
69
70
71
72
73
74
75
76

}
catch (Exception e)
{
e.printStackTrace();
}

77
78
79
80
81

}

82
83

}

84
85
86
87
88
89
90
91
92

/**
* This component produces a drawing that shows the effect of rendering hints.
*/
class RenderQualityComponent extends JComponent
{
private static final Dimension PREFERRED_SIZE = new Dimension(750, 150);
private RenderingHints hints = new RenderingHints(null);
private Image image;

93
94
95
96
97

public RenderQualityComponent()
{
image = new ImageIcon(getClass().getResource("face.gif")).getImage();
}

98
99
100
101
102

public void paintComponent(Graphics g)
{
Graphics2D g2 = (Graphics2D) g;
g2.setRenderingHints(hints);

103

g2.draw(new Ellipse2D.Double(10, 10, 60, 50));
g2.setFont(new Font("Serif", Font.ITALIC, 40));
g2.drawString("Hello", 75, 50);

104
105
106
107

g2.draw(new Rectangle2D.Double(200, 10, 40, 40));
g2.draw(new Line2D.Double(201, 11, 239, 49));

108
109
110

g2.drawImage(image, 250, 10, 100, 100, null);

111
112

}

From the Library of Hristo Dimov Hristov

