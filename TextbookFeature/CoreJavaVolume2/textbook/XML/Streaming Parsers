  199   org.w3c.dom.Node 1.4   • String getLocalName() returns the local name (without prefix), or null if the parser is not namespace-aware. 
  • String getNamespaceURI() returns the namespace URI, or null if the node is not part of a namespace or if the parser is not namespace-aware. 
  javax.xml.parsers.DocumentBuilderFactory 1.4   • boolean isNamespaceAware() • void setNamespaceAware(boolean value) gets or sets the namespaceAware property of the factory. If set to true, the parsers that this factory generates are namespace-aware. 
  3.6 Streaming Parsers The DOM parser reads an XML document in its entirety into a tree data structure. 
  For most practical applications, DOM works fine. However, it can be inefficient if the document is large and if your processing algorithm is simple enough that you can analyze nodes on the fly, without having to see all of the tree structure. 
  In these cases, you should use a streaming parser. 
  In the following sections, we discuss the streaming parsers supplied by the Java library: the venerable SAX parser and the more modern StAX parser that was added to Java SE 6. The SAX parser uses event callbacks, and the StAX parser provides an iterator through the parsing events. The latter is usually a bit more convenient. 
3.6.1 Using the SAX Parser
  The SAX parser reports events as it parses the components of the XML input, but it does not store the document in any way—it is up to the event handlers to build a data structure. In fact, the DOM parser is built on top of the SAX parser. It builds the DOM tree as it receives the parser events. 
  Whenever you use a SAX parser, you need a handler that defines the event actions for the various parse events. The ContentHandler interface defines several callback methods that the parser executes as it parses the document. Here are the most important ones:   From the Library of Hristo Dimov Hristov   200   Chapter 3   XML   • startElement and endElement are called each time a start tag or end tag is encountered. 
  • characters is called whenever character data are encountered. 
  • startDocument and endDocument are called once each, at the start and the end of the document. 
  For example, when parsing the fragment <font> <name>Helvetica</name> <size units="pt">36</size> </font>   the parser makes the following callbacks: 1. 
  2. 
3.
   
  4. 
  5. 
  6. 
  7. 
  8. 
  startElement, element name: font startElement, element name: name characters, content: Helvetica endElement, element name: name startElement, element name: size, attributes: units="pt" 
  characters, content: 36 endElement, element name: size endElement, element name: font   Your handler needs to override these methods and have them carry out whatever action you want to carry out as you parse the file. The program at the end of this section prints all links <a href=". . ."> in an HTML file. It simply overrides the startElement method of the handler to check for links with name a and an attribute with name href. This is potentially useful for implementing a “web crawler”—a program that reaches more and more web pages by following links. 
  NOTE: HTML doesn’t have to be valid XML, and many web pages deviate so much from proper XML that the example programs will not be able to parse them. However, most pages authored by the W3C are written in XHTML (an HTML dialect that is proper XML). You can use those pages to test the example program. For example, if you run java SAXTest http://www.w3c.org/MarkUp   you will see a list of the URLs of all links on that page. 
  The sample program is a good example for the use of SAX. We don’t care at all in which context the a elements occur, and there is no need to store a tree structure. 
  From the Library of Hristo Dimov Hristov   3.6 Streaming Parsers   201   Here is how you get a SAX parser: SAXParserFactory factory = SAXParserFactory.newInstance(); 
  SAXParser parser = factory.newSAXParser(); 
  You can now process a document: parser.parse(source, handler); 
  Here, source can be a file, URL string, or input stream. The handler belongs to a subclass of DefaultHandler. The DefaultHandler class defines do-nothing methods for the four interfaces: ContentHandler DTDHandler EntityResolver ErrorHandler   The example program defines a handler that overrides the startElement method of the ContentHandler interface to watch out for a elements with an href attribute: DefaultHandler handler = new DefaultHandler() { public void startElement(String namespaceURI, String lname, String qname, Attributes attrs) throws SAXException { if (lname.equalsIgnoreCase("a") && attrs != null) { for (int i = 0; i < attrs.getLength(); i++) { String aname = attrs.getLocalName(i); 
  if (aname.equalsIgnoreCase("href")) System.out.println(attrs.getValue(i)); 
  } 
  } 
  } 
  }; 
  The startElement method has three parameters that describe the element name. The qname parameter reports the qualified name of the form prefix:localname. If namespace processing is turned on, then the namespaceURI and lname parameters provide the namespace and local (unqualified) name. 
  As with the DOM parser, namespace processing is turned off by default. To activate namespace processing, call the setNamespaceAware method of the factory class: SAXParserFactory factory = SAXParserFactory.newInstance(); 
  factory.setNamespaceAware(true); 
  SAXParser saxParser = factory.newSAXParser(); 
  From the Library of Hristo Dimov Hristov   202   Chapter 3   XML   In this program, we cope with another common issue. An XHTML file starts with a tag that contains a DTD reference, and the parser will want to load it. Understandably, the W3C isn’t too happy to serve billions of copies of files such as www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd. At one point, they refused altogether, but at the time of this writing, they serve the DTD at a glacial pace. If you don’t need to validate the document, just call factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); 
  Listing 3.8 contains the code for the web crawler program. Later in this chapter, you will see another interesting use of SAX. An easy way of turning a non-XML data source into XML is to report the SAX events that an XML parser would report. 
  See Section 3.8, “XSL Transformations,” on p. 222 for details. 
  Listing 3.8 1   sax/SAXTest.java   package sax; 
  2 3 4 5 6 7   import java.io.*; 
  import java.net.*; 
  import javax.xml.parsers.*; 
  import org.xml.sax.*; 
  import org.xml.sax.helpers.*; 
  8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26   /** * This program demonstrates how to use a SAX parser. The program prints all hyperlinks of an * XHTML web page. <br> * Usage: java sax.SAXTest URL * @version 1.00 2001-09-29 * @author Cay Horstmann */ public class SAXTest { public static void main(String[] args) throws Exception { String url; 
  if (args.length == 0) { url = "http://www.w3c.org"; 
  System.out.println("Using " + url); 
  } 
  else url = args[0]; 
  27 28 29 30 31 32   DefaultHandler handler = new DefaultHandler() { public void startElement(String namespaceURI, String lname, String qname, Attributes attrs) {   From the Library of Hristo Dimov Hristov   3.6 Streaming Parsers   203   if (lname.equals("a") && attrs != null) { for (int i = 0; i < attrs.getLength(); i++) { String aname = attrs.getLocalName(i); 
  if (aname.equals("href")) System.out.println(attrs.getValue(i)); 
  } 
  } 
  33 34 35 36 37 38 39 40   } 
  41   }; 
  42 43   SAXParserFactory factory = SAXParserFactory.newInstance(); 
  factory.setNamespaceAware(true); 
  factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); 
  SAXParser saxParser = factory.newSAXParser(); 
  InputStream in = new URL(url).openStream(); 
  saxParser.parse(in, handler); 
  44 45 46 47 48 49   } 
  50 51   } 
  javax.xml.parsers.SAXParserFactory 1.4   • static SAXParserFactory newInstance() returns an instance of the SAXParserFactory class. 
  • SAXParser newSAXParser() returns an instance of the SAXParser class. 
  • boolean isNamespaceAware() • void setNamespaceAware(boolean value) gets or sets the namespaceAware property of the factory. If set to true, the parsers that this factory generates are namespace-aware. 
  • boolean isValidating() • void setValidating(boolean value) gets or sets the validating property of the factory. If set to true, the parsers that this factory generates validate their input. 
  javax.xml.parsers.SAXParser 1.4   • void parse(File f, DefaultHandler handler) • void parse(String url, DefaultHandler handler) • void parse(InputStream in, DefaultHandler handler) parses an XML document from the given file, URL, or input stream and reports parse events to the given handler. 
  From the Library of Hristo Dimov Hristov   204   Chapter 3   XML   org.xml.sax.ContentHandler 1.4   • void startDocument() • void endDocument() is called at the start or the end of the document. 
  • void startElement(String uri, String lname, String qname, Attributes attr) • void endElement(String uri, String lname, String qname) is called at the start or the end of an element. 
  Parameters:   uri   The URI of the namespace (if the parser is namespace-aware)   lname   The local name without prefix (if the parser is namespace-aware)   qname   The element name if the parser is not namespace-aware, or the qualified name with prefix if the parser reports qualified names in addition to local names   • void characters(char[] data, int start, int length) is called when the parser reports character data. 
  Parameters:   data   An array of character data   start   The index of the first character in the data array that is a part of the reported characters   length   The length of the reported character string   org.xml.sax.Attributes 1.4   • int getLength() returns the number of attributes stored in this attribute collection. 
  • String getLocalName(int index) returns the local name (without prefix) of the attribute with the given index, or the empty string if the parser is not namespace-aware. 
  • String getURI(int index) returns the namespace URI of the attribute with the given index, or the empty string if the node is not part of a namespace or if the parser is not namespace-aware. 
  • String getQName(int index) returns the qualified name (with prefix) of the attribute with the given index, or the empty string if the qualified name is not reported by the parser. 
  (Continues)   From the Library of Hristo Dimov Hristov   3.6 Streaming Parsers   205   org.xml.sax.Attributes 1.4 (Continued)   • String getValue(int index) • String getValue(String qname) • String getValue(String uri, String lname) returns the attribute value from a given index, qualified name, or namespace URI + local name. Returns null if the value doesn’t exist. 
  3.6.2 Using the StAX Parser The StAX parser is a “pull parser.” Instead of installing an event handler, you simply iterate through the events, using this basic loop: InputStream in = url.openStream(); 
  XMLInputFactory factory = XMLInputFactory.newInstance(); 
  XMLStreamReader parser = factory.createXMLStreamReader(in); 
  while (parser.hasNext()) { int event = parser.next(); 
  Call parser methods to obtain event details } 
  For example, when parsing the fragment <font> <name>Helvetica</name> <size units="pt">36</size> </font>   the parser yields the following events: 1. 
  START_ELEMENT, element name: font   2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  9. 
  10. 
  11. 
  CHARACTERS, content: white space START_ELEMENT, element name: name CHARACTERS, content: Helvetica END_ELEMENT, element name: name CHARACTERS, content: white space START_ELEMENT, element name: size CHARACTERS, content: 36 END_ELEMENT, element name: size CHARACTERS, content: white space END_ELEMENT, element name: font   From the Library of Hristo Dimov Hristov   206   Chapter 3   XML   To analyze the attribute values, call the appropriate methods of the XMLStreamReader class. For example, String units = parser.getAttributeValue(null, "units"); 
  gets the units attribute of the current element. 
  By default, namespace processing is enabled. You can deactivate it by modifying the factory: XMLInputFactory factory = XMLInputFactory.newInstance(); 
  factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, false); 
  Listing 3.9 contains the code for the web crawler program implemented with the StAX parser. As you can see, the code is simpler than the equivalent SAX code because you don’t have to worry about event handling. 
  Listing 3.9 1   stax/StAXTest.java   package stax; 
  2 3 4 5   import java.io.*; 
  import java.net.*; 
  import javax.xml.stream.*; 
  6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31   /** * This program demonstrates how to use a StAX parser. The program prints all hyperlinks of * an XHTML web page. <br> * Usage: java stax.StAXTest URL * @author Cay Horstmann * @version 1.0 2007-06-23 */ public class StAXTest { public static void main(String[] args) throws Exception { String urlString; 
  if (args.length == 0) { urlString = "http://www.w3c.org"; 
  System.out.println("Using " + urlString); 
  } 
  else urlString = args[0]; 
  URL url = new URL(urlString); 
  InputStream in = url.openStream(); 
  XMLInputFactory factory = XMLInputFactory.newInstance(); 
  XMLStreamReader parser = factory.createXMLStreamReader(in); 
  while (parser.hasNext()) { int event = parser.next(); 
  From the Library of Hristo Dimov Hristov   3.6 Streaming Parsers   if (event == XMLStreamConstants.START_ELEMENT) { if (parser.getLocalName().equals("a")) { String href = parser.getAttributeValue(null, "href"); 
  if (href != null) System.out.println(href); 
  } 
  } 
  32 33 34 35 36 37 38 39 40   } 
  41   } 
  42 43   207   } 
  javax.xml.stream.XMLInputFactory 6   • static XMLInputFactory newInstance() returns an instance of the XMLInputFactory class. 
  • void setProperty(String name, Object value) sets a property for this factory, or throws an IllegalArgumentException if the property is not supported or cannot be set to the given value. The Java SE implementation supports the following Boolean-valued properties:   • • • •   "javax.xml.stream.isValidating" 
  When false (the default), the document is not validated. Not required by the specification. 
  "javax.xml.stream.isNamespaceAware" 
  When true (the default), namespaces are processed. Not required by the specification. 
  "javax.xml.stream.isCoalescing" 
  When false (the default), adjacent character data are not coalesced. 
  "javax.xml.stream.isReplacingEntityReferences" 
  When true (the default), entity references are replaced and reported as character data. 
  "javax.xml.stream.isSupportingExternalEntities" 
  When true (the default), external entities are resolved. The specification gives no default for this property. 
  "javax.xml.stream.supportDTD" 
  When true (the default), DTDs are reported as events. 
  XMLStreamReader createXMLStreamReader(InputStream in) XMLStreamReader createXMLStreamReader(InputStream in, String characterEncoding) XMLStreamReader createXMLStreamReader(Reader in) XMLStreamReader createXMLStreamReader(Source in)   creates a parser that reads from the given stream, reader, or JAXP source. 
  From the Library of Hristo Dimov Hristov   208   Chapter 3   XML   javax.xml.stream.XMLStreamReader 6   • boolean hasNext() returns true if there is another parse event. 
  • int next() sets the parser state to the next parse event and returns one of the following constants: START_ELEMENT, END_ELEMENT, CHARACTERS, START_DOCUMENT, END_DOCUMENT, CDATA, COMMENT, SPACE (ignorable whitespace), PROCESSING_INSTRUCTION, ENTITY_REFERENCE, DTD. 
  • • • •   boolean isStartElement() boolean isEndElement() boolean isCharacters() boolean isWhiteSpace()   returns true if the current event is a start element, end element, character data, or whitespace. 
  • QName getName() • String getLocalName() gets the name of the element in a START_ELEMENT or END_ELEMENT event. 
  • String getText() returns the characters of a CHARACTERS, COMMENT, or CDATA event, the replacement value for an ENTITY_REFERENCE, or the internal subset of a DTD. 
  • • • •   int getAttributeCount() QName getAttributeName(int index) String getAttributeLocalName(int index) String getAttributeValue(int index)   gets the attribute count and the names and values of the attributes, provided the current event is START_ELEMENT. 
  • String getAttributeValue(String namespaceURI, String name) gets the value of the attribute with the given name, provided the current event is START_ELEMENT. If namespaceURI is null, the namespace is not checked. 
