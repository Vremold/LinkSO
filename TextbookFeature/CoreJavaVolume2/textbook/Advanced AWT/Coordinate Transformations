  799   java.awt.TexturePaint 1.2   • TexturePaint(BufferedImage texture, Rectangle2D anchor) creates a texture paint object. The anchor rectangle defines the tiling of the space to be painted; it is repeated indefinitely in x and y directions, and the texture image is scaled to fill each tile. 
  11.6 Coordinate Transformations Suppose you need to draw an object, such as an automobile. You know, from the manufacturer’s specifications, the height, wheelbase, and total length. You could, of course, figure out all pixel positions, assuming some number of pixels per meter. However, there is an easier way: You can ask the graphics context to carry out the conversion for you. 
  g2.scale(pixelsPerMeter, pixelsPerMeter); 
  g2.draw(new Line2D.Double(coordinates in meters)); // converts to pixels and draws scaled line   The scale method of the Graphics2D class sets the coordinate transformation of the graphics context to a scaling transformation. That transformation changes user coordinates (user-specified units) to device coordinates (pixels). Figure 11.17 shows how the transformation works. 
  Figure 11.17 User and device coordinates   From the Library of Hristo Dimov Hristov   800   Chapter 11   Advanced AWT   Coordinate transformations are very useful in practice. They allow you to work with convenient coordinate values. The graphics context takes care of the dirty work of transforming them to pixels. 
  There are four fundamental transformations. 
  • • • •   Scaling: blowing up, or shrinking, all distances from a fixed point Rotation: rotating all points around a fixed center Translation: moving all points by a fixed amount Shear: leaving one line fixed and “sliding” the lines parallel to it by an amount that is proportional to the distance from the fixed line   Figure 11.18 shows how these four fundamental transformations act on a unit square. 
  Figure 11.18 The fundamental transformations The scale, rotate, translate, and shear methods of the Graphics2D class set the coordinate transformation of the graphics context to one of these fundamental transformations. 
  You can compose the transformations. For example, you might want to rotate shapes and double their size; supply both a rotation and a scaling transformation: g2.rotate(angle); 
  g2.scale(2, 2); 
  g2.draw(. . .); 
  In this case, it does not matter in which order you supply the transformations. 
  However, with most transformations, order does matter. For example, if you want to rotate and shear, then it makes a difference which of the transformations you supply first. You need to figure out what your intention is. The graphics   From the Library of Hristo Dimov Hristov   11.6 Coordinate Transformations   801   context will apply the transformations in the order opposite to that in which you supplied them—that is, the last transformation you supply is applied first. 
  You can supply as many transformations as you like. For example, consider the following sequence of transformations: g2.translate(x, y); 
  g2.rotate(a); 
  g2.translate(-x, -y); 
  The last transformation (which is applied first) moves the point (x, y) to the origin. The second transformation rotates with an angle a around the origin. The final transformation moves the origin back to (x, y). The overall effect is a rotation with center point (x, y)—see Figure 11.19. Since rotating about a point other than the origin is such a common operation, there is a shortcut: g2.rotate(a, x, y); 
  Figure 11.19 Composing transformations   From the Library of Hristo Dimov Hristov   802   Chapter 11   Advanced AWT   If you know some matrix theory, you are probably aware that all rotations, translations, scalings, shears, and their compositions can be expressed by transformation matrices of the form: xnew ynew 1   =   a c e b d f 0 0 1   ·   x y 1   Such a transformation is called an affine transformation. In the Java 2D API, the AffineTransform class describes such a transformation. If you know the components of a particular transformation matrix, you can construct it directly as AffineTransform t = new AffineTransform(a, b, c, d, e, f); 
  Additionally, the factory methods getRotateInstance, getScaleInstance, getTranslateInstance, and getShearInstance construct the matrices that represent these transformation types. 
  For example, the call t = AffineTransform.getScaleInstance(2.0F, 0.5F); 
  returns a transformation that corresponds to the matrix 2 0 0 0 0.5 0 0 0 1 Finally, the instance methods setToRotation, setToScale, setToTranslation, and setToShear set a transformation object to a new type. Here is an example: t.setToRotation(angle); // sets t to a rotation   You can set the coordinate transformation of the graphics context to an AffineTransform object. 
  g2.setTransform(t); // replaces current transformation   However, in practice, you shouldn’t call the setTransform operation, as it replaces any existing transformation that the graphics context may have. For example, a graphics context for printing in landscape mode already contains a 90-degree rotation transformation. If you call setTransform, you obliterate that rotation. Instead, call the transform method. 
  g2.transform(t); // composes current transformation with t   It composes the existing transformation with the new AffineTransform object. 
  If you just want to apply a transformation temporarily, first get the old transformation, compose it with your new transformation, and finally restore the old transformation when you are done. 
  From the Library of Hristo Dimov Hristov   11.6 Coordinate Transformations   803   AffineTransform oldTransform = g2.getTransform(); // save old transform g2.transform(t); // apply temporary transform draw on g2 g2.setTransform(oldTransform); // restore old transform   java.awt.geom.AffineTransform 1.2   • AffineTransform(double a, double b, double c, double d, double e, double f) • AffineTransform(float a, float b, float c, float d, float e, float f) constructs the affine transform with matrix a   c   e   b   d   f   0   0   1   • AffineTransform(double[] m) • AffineTransform(float[] m) constructs the affine transform with matrix m[0]   m[2]   m[4]   m[1]   m[3]   m[5]   0   0   1   • static AffineTransform getRotateInstance(double a) creates a rotation around the origin by the angle a (in radians). The transformation matrix is cos(a) –sin(a) 0 sin(a)   cos(a) 0   0   0   1   If a is between 0 and / 2, the rotation moves the positive x axis toward the positive y axis. 
  • static AffineTransform getRotateInstance(double a, double x, double y) creates a rotation around the point (x,y) by the angle a (in radians). 
  • static AffineTransform getScaleInstance(double sx, double sy) creates a scaling transformation that scales the x axis by sx and the y axis by sy. The transformation matrix is sx   0   0   0   sy   0   0   0   1 (Continues)   From the Library of Hristo Dimov Hristov   804   Chapter 11   Advanced AWT   java.awt.geom.AffineTransform 1.2 (Continued)   • static AffineTransform getShearInstance(double shx, double shy) creates a shear transformation that shears the x axis by shx and the y axis by shy.The transformation matrix is 1   shx 0   shy   1   0   0   0   1   • static AffineTransform getTranslateInstance(double tx, double ty) creates a translation that moves the x axis by tx and the y axis by ty. The transformation matrix is   • • • • •   1   0   tx   0   1   ty   0   0   1   void setToRotation(double a) void setToRotation(double a, double x, double y) void setToScale(double sx, double sy) void setToShear(double sx, double sy) void setToTranslation(double tx, double ty)   sets this affine transformation to a basic transformation with the given parameters. 
  See the getXxxInstance methods for an explanation of the basic transformations and their parameters. 
  java.awt.Graphics2D 1.2   • void setTransform(AffineTransform t) replaces the existing coordinate transformation of this graphics context with t. 
  • void transform(AffineTransform t) composes the existing coordinate transformation of this graphics context with t. 
  • • • • •   void rotate(double a) void rotate(double a, double x, double y) void scale(double sx, double sy) void shear(double sx, double sy) void translate(double tx, double ty)   composes the existing coordinate transformation of this graphics context with a basic transformation with the given parameters. See the AffineTransform.getXxxInstance methods for an explanation of the basic transformations and their parameters. 
