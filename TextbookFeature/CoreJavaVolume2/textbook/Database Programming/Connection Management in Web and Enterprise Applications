  349   Some databases provide native storage for XML data. JDBC 4 introduced a SQLXML interface that can mediate between the internal XML representation and the DOM Source/Result interfaces, as well as binary streams. See the API documentation for the SQLXML class for details. 
  We do not discuss these advanced SQL types any further. You can find more information on these topics in the JDBC API Tutorial and Reference and the JDBC specification. 
  5.11 Connection Management in Web and Enterprise Applications The simplistic database connection setup with a database.properties file, as described in the preceding sections, is suitable for small test programs but won’t scale for larger applications. 
  When a JDBC application is deployed in a web or enterprise environment, the management of database connections is integrated with the JNDI. The properties of data sources across the enterprise can be stored in a directory. Using a directory allows for centralized management of user names, passwords, database names, and JDBC URLs. 
  In such an environment, you can use the following code to establish a database connection: Context jndiContext = new InitialContext(); 
  DataSource source = (DataSource) jndiContext.lookup("java:comp/env/jdbc/corejava"); 
  Connection conn = source.getConnection(); 
  Note that the DriverManager is no longer involved. Instead, the JNDI service locates a data source. A data source is an interface that allows for simple JDBC connections as well as more advanced services, such as executing distributed transactions that involve multiple databases. The DataSource interface is defined in the javax.sql standard extension package. 
  NOTE: In a Java EE container, you don’t even have to program the JNDI lookup. 
  Simply use the Resource annotation on a DataSource field, and the data source reference will be set when your application is loaded: @Resource(name="jdbc/corejava") private DataSource source; 
  Of course, the data source needs to be configured somewhere. If you write database programs that execute in a servlet container such as Apache Tomcat or in an application server such as GlassFish, place the database configuration   From the Library of Hristo Dimov Hristov   350   Chapter 5   Database Programming   (including the JNDI name, JDBC URL, user name, and password) in a configuration file, or set it in an admin GUI. 
  Management of user names and logins is just one of the issues that require special attention. Another issue involves the cost of establishing database connections. 
  Our sample database programs used two strategies for obtaining a database connection. The QueryDB program in Listing 5.3 established a single database connection at the start of the program and closed it at the end of the program. The ViewDB program in Listing 5.4 opened a new connection whenever one was needed. 
  However, neither of these approaches is satisfactory. Database connections are a finite resource. If a user walks away from an application for some time, the connection should not be left open. Conversely, obtaining a connection for each query and closing it afterward is very costly. 
  The solution is to pool connections. This means that database connections are not physically closed but are kept in a queue and reused. Connection pooling is an important service, and the JDBC specification provides hooks for implementors to supply it. However, the JDK itself does not provide any implementation, and database vendors don’t usually include one with their JDBC drivers either. 
  Instead, vendors of web containers and application servers supply connection pool implementations. 
  Using a connection pool is completely transparent to the programmer. Acquire a connection from a source of pooled connections by obtaining a data source and calling getConnection. When you are done using the connection, call close. That doesn’t close the physical connection but tells the pool that you are done using it. The connection pool typically makes an effort to pool prepared statements as well. 
  You have now learned about the JDBC fundamentals and know enough to implement simple database applications. However, as we mentioned at the beginning of this chapter, databases are complex and quite a few advanced topics are beyond the scope of this introductory chapter. For an overview of advanced JDBC capabilities, refer to the JDBC API Tutorial and Reference or the JDBC specification. 
  In this chapter, you have learned how to work with relational databases in Java. 
  The next chapter covers the Java 8 date and time library. 
