  // Caution! Won’t work with daylight savings time System.out.println("nextMeeting: " + nextMeeting); 
  nextMeeting = meeting.plus(Period.ofDays(7)); // OK System.out.println("nextMeeting: " + nextMeeting); 
  38 39 40 41   } 
  42 43   365   } 
  6.6 Formatting and Parsing The DateTimeFormatter class provides three kinds of formatters to print a date/time value: • Predefined standard formatters (see Table 6.6) • Locale-specific formatters • Formatters with custom patterns To use one of the standard formatters, simply call its format method: String formatted = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(apollo11launch); 
  // 1969-07-16T09:32:00-04:00" 
  The standard formatters are mostly intended for machine-readable timestamps. To present dates and times to human readers, use a locale-specific formatter. There are four styles, SHORT, MEDIUM, LONG, and FULL, for both date and time—see Table 6.7. 
  The static methods ofLocalizedDate, ofLocalizedTime, and ofLocalizedDateTime create such a formatter. For example: DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG); 
  String formatted = formatter.format(apollo11launch); 
  // July 16, 1969 9:32:00 AM EDT   These methods use the default locale. To change to a different locale, simply use the withLocale method. 
  formatted = formatter.withLocale(Locale.FRENCH).format(apollo11launch); 
  // 16 juillet 1969 09:32:00 EDT   The DayOfWeek and Month enumerations have methods getDisplayName for giving the names of weekdays and months in different locales and formats. 
  for (DayOfWeek w : DayOfWeek.values()) System.out.print(w.getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + " "); 
  // Prints Mon Tue Wed Thu Fri Sat Sun   See Chapter 7 for more information about locales. 
  From the Library of Hristo Dimov Hristov   366   Chapter 6   The Date and Time API   Table 6.6 Predefined Formatters Formatter   Description   Example   BASIC_ISO_DATE   Year, month, day, zone offset without separators   19690716-0500   ISO_LOCAL_DATE, ISO_LOCAL_TIME, ISO_LOCAL_DATE_TIME   Separators -, :, T   1969-07-16, 09:32:00, 1969-07-16T09:32:00   ISO_OFFSET_DATE, ISO_OFFSET_TIME, ISO_OFFSET_DATE_TIME   Like ISO_LOCAL_XXX , but with zone offset   1969-07-16-05:00, 09:32:00-05:00, 1969-07-16T09:32:00-05:00   ISO_ZONED_DATE_TIME   With zone offset and zone ID   1969-07-16T09:32:00-05:00[America/New_York]   ISO_INSTANT   In UTC, denoted by the Z zone ID   1969-07-16T14:32:00Z   ISO_DATE, ISO_TIME, ISO_DATE_TIME   Like ISO_OFFSET_DATE, ISO_OFFSET_TIME, and ISO_ZONED_DATE_TIME, but the zone information is optional   1969-07-16-05:00, 09:32:00-05:00, 1969-07-16T09:32:00-05:00[America/New_York]   ISO_ORDINAL_DATE   The year and day of year, for LocalDate   1969-197   ISO_WEEK_DATE   The year, week, and day of week, for LocalDate   1969-W29-3   RFC_1123_DATE_TIME   The standard for email timestamps, codified in RFC 822 and updated to four digits for the year in RFC 1123   Wed, 16 Jul 1969 09:32:00 -0500   Table 6.7 Locale-Specific Formatting Styles Style   Date   Time   SHORT   7/16/69   9:32 AM   MEDIUM   Jul 16, 1969   9:32:00 AM   LONG   July 16, 1969   9:32:00 AM EDT   FULL   Wednesday, July 16, 1969   9:32:00 AM EDT   From the Library of Hristo Dimov Hristov   6.6 Formatting and Parsing   367   NOTE: The java.time.format.DateTimeFormatter class is intended as a replacement for java.util.DateFormat. If you need an instance of the latter for backward compatibility, call formatter.toFormat(). 
  Finally, you can roll your own date format by specifying a pattern. For example, formatter = DateTimeFormatter.ofPattern("E yyyy-MM-dd HH:mm"); 
  formats a date in the form Wed 1969-07-16 09:32. Each letter denotes a different time field, and the number of times the letter is repeated selects a particular format, according to rules that are arcane and seem to have organically grown over time. 
  Table 6.8 shows the most useful pattern elements. 
  Table 6.8 Commonly Used Formatting Symbols for Date/Time Formats ChronoField or Purpose   Examples   ERA   G: AD, GGGG: Anno Domini, GGGGG: A   YEAR_OF_ERA   yy: 69, yyyy: 1969   MONTH_OF_YEAR   M: 7, MM: 07, MMM: Jul, MMMM: July, MMMMM: J   DAY_OF_MONTH   d: 6, dd: 06   DAY_OF_WEEK   e: 3, E: Wed, EEEE: Wednesday, EEEEE: W   HOUR_OF_DAY   H: 9, HH: 09   CLOCK_HOUR_OF_AM_PM   K: 9, KK: 09   AMPM_OF_DAY   a: AM   MINUTE_OF_HOUR   mm: 02   SECOND_OF_MINUTE   ss: 00   NANO_OF_SECOND   nnnnnn: 000000   Time zone ID   VV: America/New_York   Time zone name   z: EDT, zzzz: Eastern Daylight Time   Zone offset   x: -04, xx: -0400, xxx: -04:00, XXX: same, but use Z for zero   Localized zone offset   O: GMT-4, OOOO: GMT-04:00   To parse a date/time value from a string, use one of the static parse methods. For example, LocalDate churchsBirthday = LocalDate.parse("1903-06-14"); 
  ZonedDateTime apollo11launch =   From the Library of Hristo Dimov Hristov   368   Chapter 6   The Date and Time API   ZonedDateTime.parse("1969-07-16 03:32:00-0400", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ssxx")); 
  The first call uses the standard ISO_LOCAL_DATE formatter, the second one a custom formatter. 
  The program in Listing 6.4 shows how to format and parse dates and times. 
  Listing 6.4 1   formatting/Formatting.java   package formatting; 
  2 3 4 5   import java.time.*; 
  import java.time.format.*; 
  import java.util.*; 
  6 7 8 9 10 11 12   public class Formatting { public static void main(String[] args) { ZonedDateTime apollo11launch = ZonedDateTime.of(1969, 7, 16, 9, 32, 0, 0, ZoneId.of("America/New_York")); 
  13   String formatted = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(apollo11launch); 
  // 1969-07-16T09:32:00-04:00 System.out.println(formatted); 
  14 15 16 17   DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG); 
  formatted = formatter.format(apollo11launch); 
  // July 16, 1969 9:32:00 AM EDT System.out.println(formatted); 
  formatted = formatter.withLocale(Locale.FRENCH).format(apollo11launch); 
  // 16 juillet 1969 09:32:00 EDT System.out.println(formatted); 
  18 19 20 21 22 23 24 25   formatter = DateTimeFormatter.ofPattern("E yyyy-MM-dd HH:mm"); 
  formatted = formatter.format(apollo11launch); 
  System.out.println(formatted); 
  26 27 28 29   LocalDate churchsBirthday = LocalDate.parse("1903-06-14"); 
  System.out.println("churchsBirthday: " + churchsBirthday); 
  apollo11launch = ZonedDateTime.parse("1969-07-16 03:32:00-0400", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ssxx")); 
  System.out.println("apollo11launch: " + apollo11launch); 
  30 31 32 33 34 35   for (DayOfWeek w : DayOfWeek.values()) System.out.print(w.getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + " "); 
  36 37 38   } 
  39 40   } 
