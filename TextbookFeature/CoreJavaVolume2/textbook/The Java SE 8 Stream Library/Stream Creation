  5   java.util.Collection<E> 1.2   • default Stream<E> stream() • default Stream<E> parallelStream() yields a sequential or parallel stream of the elements in this collection. 
  1.2 Stream Creation You have already seen that you can turn any collection into a stream with the stream method of the Collection interface. If you have an array, use the static Stream.of method instead. 
  Stream<String> words = Stream.of(contents.split("\\PL+")); 
  // split returns a String[] array   The of method has a varargs parameter, so you can construct a stream from any number of arguments: Stream<String> song = Stream.of("gently", "down", "the", "stream"); 
  Use Arrays.stream(array, from, to) to make a stream from array elements between positions from (inclusive) and to (exclusive). 
  To make a stream with no elements, use the static Stream.empty method: Stream<String> silence = Stream.empty(); 
  // Generic type <String> is inferred; same as Stream.<String>empty()   The Stream interface has two static methods for making infinite streams. The generate method takes a function with no arguments (or, technically, an object of the Supplier<T> interface). Whenever a stream value is needed, that function is called to produce a value. You can get a stream of constant values as Stream<String> echos = Stream.generate(() -> "Echo"); 
  or a stream of random numbers as Stream<Double> randoms = Stream.generate(Math::random); 
  To produce infinite sequences, such as 0 1 2 3 . . . , use the iterate method instead. 
  It takes a “seed” value and a function (technically, a UnaryOperator<T>) and repeatedly applies the function to the previous result. For example,   From the Library of Hristo Dimov Hristov   6   Chapter 1   The Java SE 8 Stream Library   Stream<BigInteger> integers = Stream.iterate(BigInteger.ZERO, n -> n.add(BigInteger.ONE)); 
  The first element in the sequence is the seed BigInteger.ZERO. The second element is f(seed), or 1 (as a big integer). The next element is f(f(seed)), or 2, and so on. 
  NOTE: A number of methods in the Java API yield streams. For example, the Pattern class has a method splitAsStream that splits a CharSequence by a regular expression. You can use the following statement to split a string into words: Stream<String> words = Pattern.compile("\\PL+").splitAsStream(contents); 
  The static Files.lines method returns a Stream of all lines in a file: try (Stream<String> lines = Files.lines(path)) { Process lines } 
  The example program in Listing 1.2 shows the various ways of creating a stream. 
  Listing 1.2 1   streams/CreatingStreams.java   package streams; 
  2 3 4 5 6 7 8 9 10 11 12   import java.io.IOException; 
  import java.math.BigInteger; 
  import java.nio.charset.StandardCharsets; 
  import java.nio.file.Files; 
  import java.nio.file.Path; 
  import java.nio.file.Paths; 
  import java.util.List; 
  import java.util.regex.Pattern; 
  import java.util.stream.Collectors; 
  import java.util.stream.Stream; 
  13 14 15 16 17 18 19 20 21   public class CreatingStreams { public static <T> void show(String title, Stream<T> stream) { final int SIZE = 10; 
  List<T> firstElements = stream .limit(SIZE + 1) .collect(Collectors.toList()); 
  From the Library of Hristo Dimov Hristov   1.2 Stream Creation   7   System.out.print(title + ": "); 
  for (int i = 0; i < firstElements.size(); i++) { if (i > 0) System.out.print(", "); 
  if (i < SIZE) System.out.print(firstElements.get(i)); 
  else System.out.print("..."); 
  } 
  System.out.println(); 
  22 23 24 25 26 27 28 29   } 
  30 31   public static void main(String[] args) throws IOException { Path path = Paths.get("../gutenberg/alice30.txt"); 
  String contents = new String(Files.readAllBytes(path), StandardCharsets.UTF_8); 
  32 33 34 35 36 37   Stream<String> words = Stream.of(contents.split("\\PL+")); 
  show("words", words); 
  Stream<String> song = Stream.of("gently", "down", "the", "stream"); 
  show("song", song); 
  Stream<String> silence = Stream.empty(); 
  show("silence", silence); 
  38 39 40 41 42 43 44   Stream<String> echos = Stream.generate(() -> "Echo"); 
  show("echos", echos); 
  45 46 47   Stream<Double> randoms = Stream.generate(Math::random); 
  show("randoms", randoms); 
  48 49 50   Stream<BigInteger> integers = Stream.iterate(BigInteger.ONE, n -> n.add(BigInteger.ONE)); 
  show("integers", integers); 
  51 52 53 54   Stream<String> wordsAnotherWay = Pattern.compile("\\PL+").splitAsStream( contents); 
  show("wordsAnotherWay", wordsAnotherWay); 
  55 56 57 58   try (Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8)) { show("lines", lines); 
  } 
  59 60 61 62   } 
  63 64   } 
  From the Library of Hristo Dimov Hristov   8   Chapter 1   The Java SE 8 Stream Library   java.util.stream.Stream 8   • static <T> Stream<T> of(T... values) yields a stream whose elements are the given values. 
  • static <T> Stream<T> empty() yields a stream with no elements. 
  • static <T> Stream<T> generate(Supplier<T> s) yields an infinite stream whose elements are constructed by repeatedly invoking the function s. 
  • static <T> Stream<T> iterate(T seed, UnaryOperator<T> f) yields an infinite stream whose elements are seed, f invoked on seed, f invoked on the preceding element, and so on. 
  java.util.Arrays 1.2   • static <T> Stream<T> stream(T[] array, int startInclusive, int endExclusive) 8 yields a stream whose elements are the specified range of the array. 
  java.util.regex.Pattern 1.4   • Stream<String> splitAsStream(CharSequence input) 8 yields a stream whose elements are the parts of the input that are delimited by this pattern. 
  java.nio.file.Files 7   • static Stream<String> lines(Path path) 8 • static Stream<String> lines(Path path, Charset cs) 8 yields a stream whose elements are the lines of the specified file, with the UTF-8 charset or the given charset. 
  java.util.function.Supplier<T> 8   • T get() supplies a value. 
