  985   gcc -D_WINDOWS -mno-cygwin -I jdk\include -I jdk\include\win32 -D__int64="long long" 
  -I c:\cygwin\usr\include\w32api -o InvocationTest   Before you run the program under Linux/UNIX, make sure that the LD_LIBRARY_PATH contains the directories for the shared libraries. For example, if you use the bash shell on Linux, issue the following command: export LD_LIBRARY_PATH=jdk/jre/lib/i386/client:$LD_LIBRARY_PATH   Invocation API Functions   • jint JNI_CreateJavaVM(JavaVM** p_jvm, void** p_env, JavaVMInitArgs* vm_args) initializes the Java virtual machine. The function returns 0 if successful, JNI_ERR on failure. 
  Parameters:   p_jvm   Filled with a pointer to the invocation API function table   p_env   Filled with a pointer to the JNI function table   vm_args   The virtual machine arguments   • jint DestroyJavaVM(JavaVM* jvm) destroys the virtual machine. Returns 0 on success, a negative number on failure. This function must be called through a virtual machine pointer, that is, (*jvm)->DestroyJavaVM(jvm). 
  12.10 A Complete Example: Accessing the Windows Registry In this section, we describe a full, working example that covers everything we discussed in this chapter: using native methods with strings, arrays, objects, constructor calls, and error handling. We’ll show you how to put a Java platform wrapper around a subset of the ordinary C-based APIs used to work with the Windows registry. Of course, the Windows registry being a Windows-specific feature, such a program is inherently nonportable. For that reason, the standard Java library has no support for the registry, and it makes sense to use native methods to gain access to it. 
12.10.1 Overview of the Windows Registry
  The Windows registry is a data depository that holds configuration information for the Windows operating system and application programs. It provides a single point for administration and backup of system and application preferences. On the downside, the registry is also a single point of failure—if you mess up the registry, your computer could malfunction or even fail to boot! 
  From the Library of Hristo Dimov Hristov   986   Chapter 12   Native Methods   We don’t suggest that you use the registry to store configuration parameters for your Java programs. The Java preferences API is a better solution (see Volume I, Chapter 13 for more information). We’ll simply use the registry to demonstrate how to wrap a nontrivial native API into a Java class. 
  The principal tool for inspecting the registry is the registry editor. Because of the potential for error by naive but enthusiastic users, there is no icon for launching the registry editor. Instead, start a DOS shell (or open the Start → Run dialog box) and type regedit. Figure 12.4 shows the registry editor in action. 
  Figure 12.4 The registry editor The left side shows the keys, which are arranged in a tree structure. Note that each key starts with one of the HKEY nodes like HKEY_CLASSES_ROOT HKEY_CURRENT_USER HKEY_LOCAL_MACHINE ... 
  From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   987   The right side shows the name/value pairs associated with a particular key. For example, if you installed Java SE 7, the key HKEY_LOCAL_MACHINE\Software\JavaSoft\Java Runtime Environment   contains a name/value pair such as CurrentVersion="1.7.0_10" 
  In this case, the value is a string. The values can also be integers or arrays of bytes. 
12.10.2 A Java Platform Interface for Accessing the Registry
  We create a simple interface to access the registry from Java code, and then implement this interface with native code. Our interface allows only a few registry operations; to keep the code size down, we omitted some important operations such as adding, deleting, and enumerating keys. (It should be easy to add the remaining registry API functions.) Even with the limited subset that we supply, you can • Enumerate all names stored in a key • Read the value stored with a name • Set the value stored with a name Here is the Java class that encapsulates a registry key: public class Win32RegKey { public Win32RegKey(int theRoot, String thePath) { . . . } 
  public Enumeration names() { . . . } 
  public native Object getValue(String name); 
  public native void setValue(String name, Object value); 
  public static final int HKEY_CLASSES_ROOT = 0×80000000; 
  public static final int HKEY_CURRENT_USER = 0×80000001; 
  public static final int HKEY_LOCAL_MACHINE = 0×80000002; 
  ... 
  } 
  The names method returns an enumeration that holds all the names stored with the key. You can get at them with the familiar hasMoreElements/nextElement methods. The getValue method returns an object that is either a string, an Integer object, or a byte array. The value parameter of the setValue method must also be of one of these three types. 
  From the Library of Hristo Dimov Hristov   988   Chapter 12   Native Methods 12.10.3 Implementation of Registry Access Functions as Native Methods
  We need to implement three actions: • Get the value of a name • Set the value of a name • Iterate through the names of a key Fortunately, you have seen essentially all the tools that are required, such as the conversion between Java strings and arrays and those of C. You also saw how to raise a Java exception in case something goes wrong. 
  Two issues make these native methods more complex than the preceding examples. The getValue and setValue methods deal with the type Object, which can be one of String, Integer, or byte[]. The enumeration object stores the state between successive calls to hasMoreElements and nextElement. 
  Let us first look at the getValue method. The method (shown in Listing 12.22) goes through the following steps: 1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  Opens the registry key. To read their values, the registry API requires that keys be open. 
  Queries the type and size of the value associated with the name. 
  Reads the data into a buffer. 
  Calls NewStringUTF to create a new string with the value data if the type is REG_SZ (a string). 
  Invokes the Integer constructor if the type is REG_DWORD (a 32-bit integer). 
  Calls NewByteArray to create a new byte array, then SetByteArrayRegion to copy the value data into the byte array, if the type is REG_BINARY. 
  If the type is none of these or if an error occurred when an API function was called, throws an exception and releases all resources that had been acquired up to that point. 
  Closes the key and returns the object (String, Integer, or byte[]) that had been created. 
  As you can see, this example illustrates quite nicely how to generate Java objects of different types. 
  In this native method, coping with the generic return type is not difficult. The jstring, jobject, or jarray reference is simply returned as a jobject. However, the setValue method receives a reference to an Object and must determine the Object’s exact type to save the Object as a string, integer, or byte array. We can make this determination by querying the class of the value object, finding the class references for   From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   989   java.lang.String, java.lang.Integer, and byte[], and comparing them with the IsAssignableFrom   function. 
  If class1 and class2 are two class references, then the call (*env)->IsAssignableFrom(env, class1, class2)   returns JNI_TRUE when class1 and class2 are the same class or when class1 is a subclass of class2. In either case, references to objects of class1 can be cast to class2. For example, when (*env)->IsAssignableFrom(env, (*env)->GetObjectClass(env, value), (*env)->FindClass(env, "[B"))   is true, we know that value is a byte array. 
  Here is an overview of the steps in the setValue method: 1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  Open the registry key for writing. 
  Find the type of the value to write. 
  Call GetStringUTFChars to get a pointer to the characters if the type is String. 
  Call the intValue method to get the integer stored in the wrapper object if the type is Integer. 
  Call GetByteArrayElements to get a pointer to the bytes if the type is byte[]. 
  Pass the data and length to the registry. 
  Close the key. 
  Release the pointer to the data if the type is String or byte[]. 
  Finally, let us turn to the native methods that enumerate keys. These are methods of the Win32RegKeyNameEnumeration class (see Listing 12.21). When the enumeration process starts, we must open the key. For the duration of the enumeration, we must retain the key handle—that is, the key handle must be stored with the enumeration object. The key handle is of type DWORD (a 32-bit quantity), so it can be stored in a Java integer. We store it in the hkey field of the enumeration class. When the enumeration starts, the field is initialized with SetIntField. Subsequent calls read the value with GetIntField. 
  In this example, we store three other data items with the enumeration object. 
  When the enumeration first starts, we can query the registry for the count of name/value pairs and the length of the longest name, which we need so we can allocate C character arrays to hold the names. These values are stored in the count and maxsize fields of the enumeration object. Finally, the index field, initialized with -1 to indicate the start of the enumeration, is set to 0 once the other instance fields are initialized, and is incremented after every enumeration step. 
  Let’s walk through the native methods that support the enumeration. The hasMoreElements method is simple:   From the Library of Hristo Dimov Hristov   990   Chapter 12   1. 
  2. 
  3. 
  Native Methods   Retrieve the index and count fields. 
  If the index is -1, call the startNameEnumeration function, which opens the key, queries the count and maximum length, and initializes the hkey, count, maxsize, and index fields. 
  Return JNI_TRUE if index is less than count, and JNI_FALSE otherwise. 
  The nextElement method needs to work a little harder: 1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  Retrieve the index and count fields. 
  If the index is -1, call the startNameEnumeration function, which opens the key, queries the count and maximum length, and initializes the hkey, count, maxsize, and index fields. 
  If index equals count, throw a NoSuchElementException. 
  Read the next name from the registry. 
  Increment index. 
  If index equals count, close the key. 
  compiling, remember to run javah on both Win32RegKey and Win32RegKeyNameEnumeration. The complete command line for the Microsoft compiler is   Before   cl -I jdk\include -I jdk\include\win32 -LD Win32RegKey.c advapi32.lib -FeWin32RegKey.dll   With Cygwin, use gcc -mno-cygwin -D __int64="long long" -I jdk\include -I jdk\include\win32 -I c:\cygwin\usr\include\w32api -shared -Wl,--add-stdcall-alias -o Win32RegKey.dll Win32RegKey.c   As the registry API is specific to Windows, this program will not work on other operating systems. 
  Listing 12.23 shows a program to test our new registry functions. We add three name/value pairs, a string, an integer, and a byte array to the key HKEY_CURRENT_USER\Software\JavaSoft\Java Runtime Environment   We then enumerate all names of that key and retrieve their values. The program will print Default user=Harry Hacker Lucky number=13 Small primes=2 3 5 7 11 13   Although adding these name/value pairs to that key probably does no harm, you might want to use the registry editor to remove them after running this program. 
  From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   Listing 12.21 1   991   win32reg/Win32RegKey.java   import java.util.*; 
  2 3 4 5 6 7 8 9 10 11 12 13 14 15 16   /** * A Win32RegKey object can be used to get and set values of a registry key in the Windows * registry. 
  * @version 1.00 1997-07-01 * @author Cay Horstmann */ public class Win32RegKey { public static final int HKEY_CLASSES_ROOT = 0x80000000; 
  public static final int HKEY_CURRENT_USER = 0x80000001; 
  public static final int HKEY_LOCAL_MACHINE = 0x80000002; 
  public static final int HKEY_USERS = 0x80000003; 
  public static final int HKEY_CURRENT_CONFIG = 0x80000005; 
  public static final int HKEY_DYN_DATA = 0x80000006; 
  17 18 19   private int root; 
  private String path; 
  20 21 22 23 24 25 26   /** * Gets the value of a registry entry. 
  * @param name the entry name * @return the associated value */ public native Object getValue(String name); 
  27 28 29 30 31 32 33   /** * Sets the value of a registry entry. 
  * @param name the entry name * @param value the new value */ public native void setValue(String name, Object value); 
  34 35 36 37 38 39 40 41 42 43 44 45   /** * Construct a registry key object. 
  * @param theRoot one of HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS, * HKEY_CURRENT_CONFIG, HKEY_DYN_DATA * @param thePath the registry key path */ public Win32RegKey(int theRoot, String thePath) { root = theRoot; 
  path = thePath; 
  } 
  (Continues)   From the Library of Hristo Dimov Hristov   992   Chapter 12   Native Methods   Listing 12.21 (Continued) 46   /** * Enumerates all names of registry entries under the path that this object describes. 
  * @return an enumeration listing all entry names */ public Enumeration<String> names() { return new Win32RegKeyNameEnumeration(root, path); 
  } 
  47 48 49 50 51 52 53 54 55   static { System.loadLibrary("Win32RegKey"); 
  } 
  56 57 58 59 60   } 
  61 62 63 64 65 66 67 68 69 70 71   class Win32RegKeyNameEnumeration implements Enumeration<String> { public native String nextElement(); 
  public native boolean hasMoreElements(); 
  private int root; 
  private String path; 
  private int index = -1; 
  private int hkey = 0; 
  private int maxsize; 
  private int count; 
  72   Win32RegKeyNameEnumeration(int theRoot, String thePath) { root = theRoot; 
  path = thePath; 
  } 
  73 74 75 76 77 78   } 
  79 80 81 82 83 84   class Win32RegKeyException extends RuntimeException { public Win32RegKeyException() { } 
  85   public Win32RegKeyException(String why) { super(why); 
  } 
  86 87 88 89 90   } 
  From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   Listing 12.22 1 2 3 4   993   win32reg/Win32RegKey.c   /** @version 1.00 1997-07-01 @author Cay Horstmann */   5 6 7 8 9 10   #include "Win32RegKey.h" 
  #include "Win32RegKeyNameEnumeration.h" 
  #include <string.h> #include <stdlib.h> #include <windows.h>   11 12 13 14 15 16 17 18 19 20 21 22 23 24 25   JNIEXPORT jobject JNICALL Java_Win32RegKey_getValue(JNIEnv* env, jobject this_obj, jobject name) { const char* cname; 
  jstring path; 
  const char* cpath; 
  HKEY hkey; 
  DWORD type; 
  DWORD size; 
  jclass this_class; 
  jfieldID id_root; 
  jfieldID id_path; 
  HKEY root; 
  jobject ret; 
  char* cret; 
  26 27 28   /* get the class */ this_class = (*env)->GetObjectClass(env, this_obj); 
  29 30 31 32   /* get the field IDs */ id_root = (*env)->GetFieldID(env, this_class, "root", "I"); 
  id_path = (*env)->GetFieldID(env, this_class, "path", "Ljava/lang/String;"); 
  33 34 35 36 37   /* get the fields */ root = (HKEY) (*env)->GetIntField(env, this_obj, id_root); 
  path = (jstring)(*env)->GetObjectField(env, this_obj, id_path); 
  cpath = (*env)->GetStringUTFChars(env, path, NULL); 
  38 39 40 41 42 43 44 45 46   /* open the registry key */ if (RegOpenKeyEx(root, cpath, 0, KEY_READ, &hkey) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Open key failed"); 
  (*env)->ReleaseStringUTFChars(env, path, cpath); 
  return NULL; 
  } 
  (Continues)   From the Library of Hristo Dimov Hristov   994   Chapter 12   Native Methods   Listing 12.22 (Continued) 47 48 49   (*env)->ReleaseStringUTFChars(env, path, cpath); 
  cname = (*env)->GetStringUTFChars(env, name, NULL); 
  50 51 52 53 54 55 56 57 58 59   /* find the type and size of the value */ if (RegQueryValueEx(hkey, cname, NULL, &type, NULL, &size) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Query value key failed"); 
  RegCloseKey(hkey); 
  (*env)->ReleaseStringUTFChars(env, name, cname); 
  return NULL; 
  } 
  60 61 62   /* get memory to hold the value */ cret = (char*)malloc(size); 
  63 64 65 66 67 68 69 70 71 72 73   /* read the value */ if (RegQueryValueEx(hkey, cname, NULL, &type, cret, &size) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Query value key failed"); 
  free(cret); 
  RegCloseKey(hkey); 
  (*env)->ReleaseStringUTFChars(env, name, cname); 
  return NULL; 
  } 
  74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94   /* depending on the type, store the value in a string, integer or byte array */ if (type == REG_SZ) { ret = (*env)->NewStringUTF(env, cret); 
  } 
  else if (type == REG_DWORD) { jclass class_Integer = (*env)->FindClass(env, "java/lang/Integer"); 
  /* get the method ID of the constructor */ jmethodID id_Integer = (*env)->GetMethodID(env, class_Integer, "<init>", "(I)V"); 
  int value = *(int*) cret; 
  /* invoke the constructor */ ret = (*env)->NewObject(env, class_Integer, id_Integer, value); 
  } 
  else if (type == REG_BINARY) { ret = (*env)->NewByteArray(env, size); 
  (*env)->SetByteArrayRegion(env, (jarray) ret, 0, size, cret); 
  } 
  From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   995   else { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Unsupported value type"); 
  ret = NULL; 
  } 
  95 96 97 98 99 100 101   free(cret); 
  RegCloseKey(hkey); 
  (*env)->ReleaseStringUTFChars(env, name, cname); 
  102 103 104 105   return ret; 
  106 107   } 
  108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125   JNIEXPORT void JNICALL Java_Win32RegKey_setValue(JNIEnv* env, jobject this_obj, jstring name, jobject value) { const char* cname; 
  jstring path; 
  const char* cpath; 
  HKEY hkey; 
  DWORD type; 
  DWORD size; 
  jclass this_class; 
  jclass class_value; 
  jclass class_Integer; 
  jfieldID id_root; 
  jfieldID id_path; 
  HKEY root; 
  const char* cvalue; 
  int ivalue; 
  126 127 128   /* get the class */ this_class = (*env)->GetObjectClass(env, this_obj); 
  129 130 131 132   /* get the field IDs */ id_root = (*env)->GetFieldID(env, this_class, "root", "I"); 
  id_path = (*env)->GetFieldID(env, this_class, "path", "Ljava/lang/String;"); 
  133 134 135 136 137   /* get the fields */ root = (HKEY)(*env)->GetIntField(env, this_obj, id_root); 
  path = (jstring)(*env)->GetObjectField(env, this_obj, id_path); 
  cpath = (*env)->GetStringUTFChars(env, path, NULL); 
  138 139 140 141   /* open the registry key */ if (RegOpenKeyEx(root, cpath, 0, KEY_WRITE, &hkey) != ERROR_SUCCESS) { (Continues)   From the Library of Hristo Dimov Hristov   996   Chapter 12   Native Methods   Listing 12.22 (Continued) (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Open key failed"); 
  (*env)->ReleaseStringUTFChars(env, path, cpath); 
  return; 
  142 143 144 145 146   } 
  147 148 149   (*env)->ReleaseStringUTFChars(env, path, cpath); 
  cname = (*env)->GetStringUTFChars(env, name, NULL); 
  150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185   class_value = (*env)->GetObjectClass(env, value); 
  class_Integer = (*env)->FindClass(env, "java/lang/Integer"); 
  /* determine the type of the value object */ if ((*env)->IsAssignableFrom(env, class_value, (*env)->FindClass(env, "java/lang/String"))) { /* it is a string--get a pointer to the characters */ cvalue = (*env)->GetStringUTFChars(env, (jstring) value, NULL); 
  type = REG_SZ; 
  size = (*env)->GetStringLength(env, (jstring) value) + 1; 
  } 
  else if ((*env)->IsAssignableFrom(env, class_value, class_Integer)) { /* it is an integer--call intValue to get the value */ jmethodID id_intValue = (*env)->GetMethodID(env, class_Integer, "intValue", "()I"); 
  ivalue = (*env)->CallIntMethod(env, value, id_intValue); 
  type = REG_DWORD; 
  cvalue = (char*)&ivalue; 
  size = 4; 
  } 
  else if ((*env)->IsAssignableFrom(env, class_value, (*env)->FindClass(env, "[B"))) { /* it is a byte array--get a pointer to the bytes */ type = REG_BINARY; 
  cvalue = (char*)(*env)->GetByteArrayElements(env, (jarray) value, NULL); 
  size = (*env)->GetArrayLength(env, (jarray) value); 
  } 
  else { /* we don't know how to handle this type */ (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Unsupported value type"); 
  RegCloseKey(hkey); 
  (*env)->ReleaseStringUTFChars(env, name, cname); 
  return; 
  } 
  186 187   /* set the value */   From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   997   if (RegSetValueEx(hkey, cname, 0, type, cvalue, size) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Set value failed"); 
  } 
  188 189 190 191 192 193   RegCloseKey(hkey); 
  (*env)->ReleaseStringUTFChars(env, name, cname); 
  194 195 196   /* if the value was a string or byte array, release the pointer */ if (type == REG_SZ) { (*env)->ReleaseStringUTFChars(env, (jstring) value, cvalue); 
  } 
  else if (type == REG_BINARY) { (*env)->ReleaseByteArrayElements(env, (jarray) value, (jbyte*) cvalue, 0); 
  } 
  197 198 199 200 201 202 203 204 205 206   } 
  207 208 209 210 211 212 213 214 215 216   /* helper function to start enumeration of names */ static int startNameEnumeration(JNIEnv* env, jobject this_obj, jclass this_class) { jfieldID id_index; 
  jfieldID id_count; 
  jfieldID id_root; 
  jfieldID id_path; 
  jfieldID id_hkey; 
  jfieldID id_maxsize; 
  217 218 219 220 221 222 223   HKEY root; 
  jstring path; 
  const char* cpath; 
  HKEY hkey; 
  DWORD maxsize = 0; 
  DWORD count = 0; 
  224 225 226 227 228 229 230 231   /* get the field IDs */ id_root = (*env)->GetFieldID(env, this_class, "root", "I"); 
  id_path = (*env)->GetFieldID(env, this_class, "path", "Ljava/lang/String;"); 
  id_hkey = (*env)->GetFieldID(env, this_class, "hkey", "I"); 
  id_maxsize = (*env)->GetFieldID(env, this_class, "maxsize", "I"); 
  id_index = (*env)->GetFieldID(env, this_class, "index", "I"); 
  id_count = (*env)->GetFieldID(env, this_class, "count", "I"); 
  232 233 234 235   /* get the field values */ root = (HKEY)(*env)->GetIntField(env, this_obj, id_root); 
  path = (jstring)(*env)->GetObjectField(env, this_obj, id_path); 
  (Continues)   From the Library of Hristo Dimov Hristov   998   Chapter 12   Native Methods   Listing 12.22 (Continued) cpath = (*env)->GetStringUTFChars(env, path, NULL); 
  236 237   /* open the registry key */ if (RegOpenKeyEx(root, cpath, 0, KEY_READ, &hkey) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Open key failed"); 
  (*env)->ReleaseStringUTFChars(env, path, cpath); 
  return -1; 
  } 
  (*env)->ReleaseStringUTFChars(env, path, cpath); 
  238 239 240 241 242 243 244 245 246 247   /* query count and max length of names */ if (RegQueryInfoKey(hkey, NULL, NULL, NULL, NULL, NULL, NULL, &count, &maxsize, NULL, NULL, NULL) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Query info key failed"); 
  RegCloseKey(hkey); 
  return -1; 
  } 
  248 249 250 251 252 253 254 255 256 257   /* set the field values */ (*env)->SetIntField(env, this_obj, id_hkey, (DWORD) hkey); 
  (*env)->SetIntField(env, this_obj, id_maxsize, maxsize + 1); 
  (*env)->SetIntField(env, this_obj, id_index, 0); 
  (*env)->SetIntField(env, this_obj, id_count, count); 
  return count; 
  258 259 260 261 262 263 264   } 
  265 266 267 268 269 270 271 272 273 274   JNIEXPORT jboolean JNICALL Java_Win32RegKeyNameEnumeration_hasMoreElements(JNIEnv* env, jobject this_obj) { jclass this_class; 
  jfieldID id_index; 
  jfieldID id_count; 
  int index; 
  int count; 
  /* get the class */ this_class = (*env)->GetObjectClass(env, this_obj); 
  275 276 277 278   /* get the field IDs */ id_index = (*env)->GetFieldID(env, this_class, "index", "I"); 
  id_count = (*env)->GetFieldID(env, this_class, "count", "I"); 
  279 280 281 282   index = (*env)->GetIntField(env, this_obj, id_index); 
  if (index == -1) /* first time */ {   From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   count = startNameEnumeration(env, this_obj, this_class); 
  index = 0; 
  283 284   } 
  else count = (*env)->GetIntField(env, this_obj, id_count); 
  return index < count; 
  285 286 287 288 289   999   } 
  290 291 292 293 294 295 296 297 298   JNIEXPORT jobject JNICALL Java_Win32RegKeyNameEnumeration_nextElement(JNIEnv* env, jobject this_obj) { jclass this_class; 
  jfieldID id_index; 
  jfieldID id_hkey; 
  jfieldID id_count; 
  jfieldID id_maxsize; 
  299 300 301 302 303   HKEY hkey; 
  int index; 
  int count; 
  DWORD maxsize; 
  304 305 306   char* cret; 
  jstring ret; 
  307 308 309   /* get the class */ this_class = (*env)->GetObjectClass(env, this_obj); 
  310 311 312 313 314 315   /* get the field IDs */ id_index = (*env)->GetFieldID(env, this_class, "index", "I"); 
  id_count = (*env)->GetFieldID(env, this_class, "count", "I"); 
  id_hkey = (*env)->GetFieldID(env, this_class, "hkey", "I"); 
  id_maxsize = (*env)->GetFieldID(env, this_class, "maxsize", "I"); 
  316 317 318 319 320 321 322 323 324   index = (*env)->GetIntField(env, this_obj, id_index); 
  if (index == -1) /* first time */ { count = startNameEnumeration(env, this_obj, this_class); 
  index = 0; 
  } 
  else count = (*env)->GetIntField(env, this_obj, id_count); 
  325 326 327 328 329 330 331   if (index >= count) /* already at end */ { (*env)->ThrowNew(env, (*env)->FindClass(env, "java/util/NoSuchElementException"), "past end of enumeration"); 
  return NULL; 
  } 
  (Continues)   From the Library of Hristo Dimov Hristov   1000   Chapter 12   Native Methods   Listing 12.22 (Continued) 332   maxsize = (*env)->GetIntField(env, this_obj, id_maxsize); 
  hkey = (HKEY)(*env)->GetIntField(env, this_obj, id_hkey); 
  cret = (char*)malloc(maxsize); 
  333 334 335 336   /* find the next name */ if (RegEnumValue(hkey, index, cret, &maxsize, NULL, NULL, NULL, NULL) != ERROR_SUCCESS) { (*env)->ThrowNew(env, (*env)->FindClass(env, "Win32RegKeyException"), "Enum value failed"); 
  free(cret); 
  RegCloseKey(hkey); 
  (*env)->SetIntField(env, this_obj, id_index, count); 
  return NULL; 
  } 
  337 338 339 340 341 342 343 344 345 346 347   ret = (*env)->NewStringUTF(env, cret); 
  free(cret); 
  348 349 350   /* increment index */ index++; 
  (*env)->SetIntField(env, this_obj, id_index, index); 
  351 352 353 354   if (index == count) /* at end */ { RegCloseKey(hkey); 
  } 
  355 356 357 358 359   return ret; 
  360 361   } 
  Listing 12.23 1   win32reg/Win32RegKeyTest.java   import java.util.*; 
  2 3 4 5 6 7 8 9 10 11 12   /** @version 1.02 2007-10-26 @author Cay Horstmann */ public class Win32RegKeyTest { public static void main(String[] args) { Win32RegKey key = new Win32RegKey( Win32RegKey.HKEY_CURRENT_USER, "Software\\JavaSoft\\Java Runtime Environment"); 
  13 14   key.setValue("Default user", "Harry Hacker"); 
  From the Library of Hristo Dimov Hristov   12.10 A Complete Example: Accessing the Windows Registry   1001   key.setValue("Lucky number", new Integer(13)); 
  key.setValue("Small primes", new byte[] { 2, 3, 5, 7, 11 }); 
  15 16 17   Enumeration<String> e = key.names(); 
  18 19   while (e.hasMoreElements()) { String name = e.nextElement(); 
  System.out.print(name + "="); 
  20 21 22 23 24   Object value = key.getValue(name); 
  25 26   if (value instanceof byte[]) for (byte b : (byte[]) value) System.out.print((b & 0xFF) + " "); 
  else System.out.print(value); 
  27 28 29 30 31   System.out.println(); 
  32   } 
  33   } 
  34 35   } 
  Type Inquiry Functions   • jboolean IsAssignableFrom(JNIEnv *env, jclass cl1, jclass cl2) returns JNI_TRUE if objects of the first class can be assigned to objects of the second class, and JNI_FALSE otherwise.This tests if the classes are the same, or cl1 is a subclass of cl2, or cl2 represents an interface implemented by cl1 or one of its superclasses. 
  • jclass GetSuperclass(JNIEnv *env, jclass cl) returns the superclass of a class. If cl represents the class Object or an interface, returns NULL. 
  You have now reached the end of the second volume of Core Java, completing a long journey in which you encountered many advanced APIs. We started out with topics that every Java programmer needs to know: streams, XML, networking, databases, and internationalization. Three long chapters covered graphics and GUI programming. We concluded with very technical chapters on security, remote methods, annotation processing, and native methods. We hope that you enjoyed your tour through the vast breadth of the Java APIs, and that you will be able to apply your newly gained knowledge in your projects. 
  From the Library of Hristo Dimov Hristov   Index Numbers - (minus sign)   in permissions, 521 in policy files, 520 in regular expressions, 129 in URLs, 270 _ (underscore) in native method names, 941 in SQL, 289, 319 in URLs, 270 , (comma) decimal, 372, 378, 686 in DTDs, 165 ; (semicolon) in classpath, 292 in method signatures, 962 in SQL, 293 not needed, in annotations, 455 : (colon) as delimiter in text files, 63 in classpath, 292 in permissions, 521 in URLs, 258 != operator (SQL), 289 ? (question mark) in DTDs, 165 in e-mail URIs, 927 in glob patterns, 112–129 in masks, 692 in prepared queries, 309 in URLs, 269 / (slash) ending, in codebase URLs, 516 in method signatures, 962 in paths, 101 in URLs, 258 . (period) decimal, 372, 378, 686 in method signatures, 962 in regular expressions, 129–130 in URLs, 270 leading, in file names, 516   .., in paths, 102 ^ (caret), in regular expressions, 129, 132 ~ (tilde), in URLs, 270 ' (single quote), in masks, 692 '. . .', in SQL, 289 ". . .", in XML, 146 (. . .)   in method signatures, 962 in regular expressions, 131, 133 [ (array), type code, 87, 961 {. . .} 
