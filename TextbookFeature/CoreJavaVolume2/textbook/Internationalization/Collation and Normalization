  393   java.time.LocalDate 8 java.time.LocalTime 8 java.time.LocalDateTime 8 java.time.ZonedDateTime 8   • static Xxx parse(CharSequence text, DateTimeFormatter formatter) parses the given string and returns the LocalDate, LocalTime, LocalDateTime, or ZonedDateTime described in it. Throws a DateTimeParseException if parsing was not successful. 
  7.5 Collation and Normalization Most programmers know how to compare strings with the compareTo method of the String class. Unfortunately, when interacting with human users, this method is not very useful. The compareTo method uses the values of the UTF-16 encoding of the string, which leads to absurd results, even in English. For example, the following five strings are ordered according to the compareTo method: America Zulu able zebra Ångström   For dictionary ordering, you would want to consider upper case and lower case to be equivalent. To an English speaker, the sample list of words would be ordered as able America Ångström zebra Zulu   However, that order would not be acceptable to a Swedish user. In Swedish, the letter Å is different from the letter A, and it is collated after the letter Z! That is, a Swedish user would want the words to be sorted as able America zebra Zulu Ångström   To obtain a locale-sensitive comparator, call the static Collator.getInstance method:   From the Library of Hristo Dimov Hristov   394   Chapter 7   Internationalization   Collator coll = Collator.getInstance(locale); 
  words.sort(coll); // Collator implements Comparator<Object>   Since the Collator class implements the Comparator interface, you can pass a Collator object to the List.sort(Comparator) method to sort a list of strings. 
  There are a couple of advanced settings for collators. You can set a collator’s strength to select how selective it should be. Character differences are classified as primary, secondary, or tertiary. For example, in English, the difference between “A” and “Z” is considered primary, the difference between “A” and “Å” is secondary, and between “A” and “a” is tertiary. 
  By setting the strength of the collator to Collator.PRIMARY, you tell it to pay attention only to primary differences. By setting the strength to Collator.SECONDARY, you instruct the collator to take secondary differences into account. That is, two strings will be more likely to be considered different when the strength is set to “secondary” or “tertiary,” as shown in Table 7.6. 
  Table 7.6 Collations with Different Strengths (English Locale) Primary   Secondary   Tertiary   Angstrom = Ångström   Angstrom ≠ Ångström   Angstrom ≠ Ångström   Able = able   Able = able   Able ≠ able   When the strength has been set to Collator.IDENTICAL, no differences are allowed. This setting is mainly useful in conjunction with a rather technical collator setting, the decomposition mode, which we take up next. 
  Occasionally, a character or sequence of characters can be described in more than one way in Unicode. For example, an “Å” can be Unicode character U+00C5, or it can be expressed as a plain A (U+0065) followed by a ° (“combining ring above”; 
  U+030A). Perhaps more surprisingly, the letter sequence “ffi” can be described with a single character “Latin small ligature ffi” with code U+FB03. (One could argue that this is a presentation issue that should not have resulted in different Unicode characters, but we don’t make the rules.) The Unicode standard defines four normalization forms (D, KD, C, and KC) for strings. See www.unicode.org/unicode/reports/tr15/tr15–23.html for the details. In the normalization form C, accented characters are always composed. For example, a sequence of A and a combining ring above ° is combined into a single character Å. In form D, accented characters are always decomposed into their base letters and combining accents: Å is turned into A followed by °. Forms KC and KD also decompose characters such as ligatures or the trademark symbol. 
  From the Library of Hristo Dimov Hristov   7.5 Collation and Normalization   395   You can choose the degree of normalization that you want a collator to use. The value Collator.NO_DECOMPOSITION does not normalize strings at all. This option is faster, but it might not be appropriate for text that expresses characters in multiple forms. 
  The default, Collator.CANONICAL_DECOMPOSITION, uses the normalization form D. This is useful for text that contains accents but not ligatures. Finally, “full decomposition” uses normalization form KD. See Table 7.7 for examples. 
  Table 7.7 Differences between Decomposition Modes No Decomposition   Canonical Decomposition   Full Decomposition   Å ≠ A°   Å = A°   Å = A°   ™ ≠ TM   ™ ≠ TM   ™ = TM   It is wasteful to have the collator decompose a string many times. If one string is compared many times against other strings, you can save the decomposition in a collation key object. The getCollationKey method returns a CollationKey object that you can use for further, faster comparisons. Here is an example: String a = . . .; 
  CollationKey aKey = coll.getCollationKey(a); 
  if(aKey.compareTo(coll.getCollationKey(b)) == 0) // fast comparison ... 
  Finally, you might want to convert strings into their normalized forms even when you don’t do collation—for example, when storing strings in a database or communicating with another program. The java.text.Normalizer class carries out the normalization process. For example, String name = "Ångström"; 
  String normalized = Normalizer.normalize(name, Normalizer.Form.NFD); // uses normalization form D   The normalized string contains ten characters. The “Å” and “ö” are replaced by “A°” and “o¨” sequences. 
  However, that is not usually the best form for storage and transmission. Normalization form C first applies decomposition and then combines the accents back in a standardized order. According to the W3C, this is the recommended mode for transferring data over the Internet. 
  The program in Listing 7.4 lets you experiment with collation order. Type a word into the text field and click the Add button to add it to the list of words. Each time you add another word, or change the locale, strength, or decomposition mode, the list of words is sorted again. An = sign indicates words that are considered identical (see Figure 7.3). 
  From the Library of Hristo Dimov Hristov   396   Chapter 7   Internationalization   Figure 7.3 The CollationTest program The locale names in the combo box are displayed in sorted order, using the collator of the default locale. If you run this program with the US English locale, note that “Norwegian (Norway,Nynorsk)” comes before “Norwegian (Norway)”, even though the Unicode value of the comma character is greater than the Unicode value of the closing parenthesis. 
  Listing 7.4 1   collation/CollationTest.java   package collation; 
  2 3 4 5 6 7   import java.awt.*; 
  import java.awt.event.*; 
  import java.text.*; 
  import java.util.*; 
  import java.util.List; 
  8 9   import javax.swing.*; 
  10 11 12 13   /** * This program demonstrates collating strings under various locales. 
  * @version 1.15 2016-05-06   From the Library of Hristo Dimov Hristov   7.5 Collation and Normalization   14 15 16 17 18 19 20 21 22 23 24 25 26 27 28   397   * @author Cay Horstmann */ public class CollationTest { public static void main(String[] args) { EventQueue.invokeLater(() -> { JFrame frame = new CollationFrame(); 
  frame.setTitle("CollationTest"); 
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
  frame.setVisible(true); 
  }); 
  } 
  } 
  29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47   /** * This frame contains combo boxes to pick a locale, collation strength and decomposition rules, * a text field and button to add new strings, and a text area to list the collated strings. 
  */ class CollationFrame extends JFrame { private Collator collator = Collator.getInstance(Locale.getDefault()); 
  private List<String> strings = new ArrayList<>(); 
  private Collator currentCollator; 
  private Locale[] locales; 
  private JComboBox<String> localeCombo = new JComboBox<>(); 
  private JTextField newWord = new JTextField(20); 
  private JTextArea sortedWords = new JTextArea(20, 20); 
  private JButton addButton = new JButton("Add"); 
  private EnumCombo<Integer> strengthCombo = new EnumCombo<>(Collator.class, "Primary", "Secondary", "Tertiary", "Identical"); 
  private EnumCombo<Integer> decompositionCombo = new EnumCombo<>(Collator.class, "Canonical Decomposition", "Full Decomposition", "No Decomposition"); 
  48 49 50 51 52 53 54 55 56 57 58 59 60   public CollationFrame() { setLayout(new GridBagLayout()); 
  add(new JLabel("Locale"), new GBC(0, 0).setAnchor(GBC.EAST)); 
  add(new JLabel("Strength"), new GBC(0, 1).setAnchor(GBC.EAST)); 
  add(new JLabel("Decomposition"), new GBC(0, 2).setAnchor(GBC.EAST)); 
  add(addButton, new GBC(0, 3).setAnchor(GBC.EAST)); 
  add(localeCombo, new GBC(1, 0).setAnchor(GBC.WEST)); 
  add(strengthCombo, new GBC(1, 1).setAnchor(GBC.WEST)); 
  add(decompositionCombo, new GBC(1, 2).setAnchor(GBC.WEST)); 
  add(newWord, new GBC(1, 3).setFill(GBC.HORIZONTAL)); 
  add(new JScrollPane(sortedWords), new GBC(0, 4, 2, 1).setFill(GBC.BOTH)); 
  61 62   locales = (Locale[]) Collator.getAvailableLocales().clone(); 
  (Continues)   From the Library of Hristo Dimov Hristov   398   Chapter 7   Internationalization   Listing 7.4 (Continued) Arrays.sort( locales, (l1, l2) -> collator.compare(l1.getDisplayName(), l2.getDisplayName())); 
  for (Locale loc : locales) localeCombo.addItem(loc.getDisplayName()); 
  localeCombo.setSelectedItem(Locale.getDefault().getDisplayName()); 
  63 64 65 66 67 68   strings.add("America"); 
  strings.add("able"); 
  strings.add("Zulu"); 
  strings.add("zebra"); 
  strings.add("\u00C5ngstr\u00F6m"); 
  strings.add("A\u030angstro\u0308m"); 
  strings.add("Angstrom"); 
  strings.add("Able"); 
  strings.add("office"); 
  strings.add("o\uFB03ce"); 
  strings.add("Java\u2122"); 
  strings.add("JavaTM"); 
  updateDisplay(); 
  69 70 71 72 73 74 75 76 77 78 79 80 81 82   addButton.addActionListener(event -> { strings.add(newWord.getText()); 
  updateDisplay(); 
  }); 
  83 84 85 86 87 88   ActionListener listener = event -> updateDisplay(); 
  89 90   localeCombo.addActionListener(listener); 
  strengthCombo.addActionListener(listener); 
  decompositionCombo.addActionListener(listener); 
  pack(); 
  91 92 93 94 95   } 
  96 97 98 99 100 101 102 103   /** * Updates the display and collates the strings according to the user settings. 
  */ public void updateDisplay() { Locale currentLocale = locales[localeCombo.getSelectedIndex()]; 
  localeCombo.setLocale(currentLocale); 
  104 105 106 107   currentCollator = Collator.getInstance(currentLocale); 
  currentCollator.setStrength(strengthCombo.getValue()); 
  currentCollator.setDecomposition(decompositionCombo.getValue()); 
  108   From the Library of Hristo Dimov Hristov   7.5 Collation and Normalization   399   Collections.sort(strings, currentCollator); 
  109 110   sortedWords.setText(""); 
  for (int i = 0; i < strings.size(); i++) { String s = strings.get(i); 
  if (i > 0 && currentCollator.compare(s, strings.get(i - 1)) == 0) sortedWords.append("= "); 
  sortedWords.append(s + "\n"); 
  } 
  pack(); 
  111 112 113 114 115 116 117 118 119   } 
  120 121   } 
  java.text.Collator 1.1   • static Locale[] getAvailableLocales() returns an array of Locale objects for which Collator objects are available. 
  • static Collator getInstance() • static Collator getInstance(Locale l) returns a collator for the default locale or the given locale. 
  • int compare(String a, String b) returns a negative value if a comes before b, 0 if they are considered identical, and a positive value otherwise. 
  • boolean equals(String a, String b) returns true if a and b are considered identical, false otherwise. 
  • void setStrength(int strength) • int getStrength() sets or gets the strength of the collator. Stronger collators tell more words apart. 
  Strength values are Collator.PRIMARY, Collator.SECONDARY, and Collator.TERTIARY. 
  • void setDecomposition(int decomp) • int getDecompositon() sets or gets the decomposition mode of the collator.The more a collator decomposes a string, the more strict it will be in deciding whether two strings should be considered identical. Decomposition values are Collator.NO_DECOMPOSITION, Collator. 
  CANONICAL_DECOMPOSITION, and Collator.FULL_DECOMPOSITION. 
  • CollationKey getCollationKey(String a) returns a collation key that contains a decomposition of the characters in a form that can be quickly compared against another collation key. 
  From the Library of Hristo Dimov Hristov   400   Chapter 7   Internationalization   java.text.CollationKey 1.1   • int compareTo(CollationKey b) returns a negative value if this key comes before b, 0 if they are considered identical, and a positive value otherwise. 
  java.text.Normalizer 6   • static String normalize(CharSequence str, Normalizer.Form form) returns the normalized form of str. The form value is one of ND, NKD, NC, or NKC. 
