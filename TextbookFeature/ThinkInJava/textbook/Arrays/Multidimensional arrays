  You can easily create multidimensional arrays. For a multidimensional array of primitives, you delimit each vector in the array by using curly braces: 
  Each nested set of curly braces moves you into the next level of the array. 
  This example uses the Java SE5 Arrays.deepToString( ) method, which turns multidimensional arrays into Strings, as you can see from the output. 
  You can also allocate an array using new. Here’s a three-dimensional array allocated in a new expression: 
  You can see that primitive array values are automatically initialized if you don’t give them an explicit initialization value. Arrays of objects are initialized to null. 
  Each vector in the arrays that make up the matrix can be of any length (this is called a ragged array): 
  The first new creates an array with a random-length first element and the rest undetermined. The second new inside the for loop fills out the elements but leaves the third index undetermined until you hit the third new. 
  You can deal with arrays of non-primitive objects in a similar fashion. Here, you can see how to collect many new expressions with curly braces: 
  You can see that spheres is another ragged array, where the length of each list of objects is different. 
  Autoboxing also works with array initializers: 
  Here’s how an array of non-primitive objects can be built up piece-by-piece: 
  The i*j is only there to put an interesting value into the Integer. 
  The Arrays.deepToString( ) method works with both primitive arrays and object arrays: 
  Again, in the Integer and Double arrays, Java SE5 autoboxing creates the wrapper objects for you. 
  Exercise 3: (4) Write a method that creates and initializes a twodimensional array of double. The size of the array is determined by the arguments of the method, and the initialization values are a range determined by beginning and ending values that are also arguments of the method. Create a second method that will print the array generated by the first method. In main( ) test the methods by creating and printing several different sizes of arrays. 
  Exercise 4: (2) Repeat the previous exercise for a three-dimensional array. 
  Exercise 5: (1) Demonstrate that multidimensional arrays of nonprimitive types are automatically initialized to null. 
  Exercise 6: (1) Write a method that takes two int arguments, indicating the two sizes of a 2-D array. The method should create and fill a 2-D array of BerylliumSphere according to the size arguments. 
  Exercise 7: (1) Repeat the previous exercise for a 3-D array. 
