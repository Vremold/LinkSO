  Annotations (also known as metadata) provide a formalized way to add information to your code so that you can easily use that data at some later point.1  Annotations are partly motivated by a general trend toward combining metadata with source-code files, instead of keeping it in external documents. They are also a response to feature pressure from other languages like C#. 
  Annotations are one of the fundamental language changes introduced in Java SE5. They provide information that you need to fully describe your program, but that cannot be expressed in Java. Thus, annotations allow you to store extra information about your program in a format that is tested and verified by the compiler. Annotations can be used to generate descriptor files or even new class definitions and help ease the burden of writing "boilerplate" code. Using annotations, you can keep this metadata in the Java source code, and have the advantage of cleaner looking code, compile-time type checking and the annotation API to help build processing tools for your annotations. Although a few types of metadata come predefined in Java SE5, in general the kind of annotations you add and what you do with them are entirely up to you. 
  The syntax of annotations is reasonably simple and consists mainly of the addition of the @ symbol to the language. Java SE5 contains three generalpurpose built-in annotations, defined in java.lang: 
  • @Override, to indicate that a method definition is intended to override a method in the base class. This generates a compiler error if you accidentally misspell the method 2 name or give an improper signature. 
  • @Deprecated, to produce a compiler warning if this element is used. 
  • @SuppressWarnings, to turn off inappropriate compiler warnings. This annotation is allowed but not supported in earlier releases of Java SE5 (it was ignored). 
  Four additional annotation types support the creation of new annotations; you will learn about these in this chapter. 
  Anytime you create descriptor classes or interfaces that involve repetitive work, you can usually use annotations to automate and simplify the process. Much of the extra work in Enterprise JavaBeans (EJBs), for example, is eliminated through the use of annotations in EJB3.0. 
  Annotations can replace existing systems like XDoclet, which is an independent doclet tool (see the supplement at http://MindView.net/Books/BetterJava) that is specifically designed for creating annotation-style doclets. In contrast, annotations are true language constructs and hence are structured, and are type-checked at compile time. Keeping all the information in the actual source code and not in comments makes the code neater and easier to maintain. By using and extending the annotation API and tools, or with external bytecode manipulation   enforced by the compiler. That is, when you override a method in C#, you must use the override keyword, whereas in Java the (©Override annotation is optional. 
  libraries as you will see in this chapter, you can perform powerful inspection and manipulation of your source code as well as the bytecode. 
