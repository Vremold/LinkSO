  Flex  Because the lightweight Macromedia Flash virtual machine is so ubiquitous, most people will be able to use a Flash-based interface without installing anything, and it will look and behave 10 the same way across all systems and platforms. 
  With Macromedia Flex, you can develop Flash user interfaces for Java applications. Flex consists of an XML- and script-based programming model, similar to programming models such as HTML and JavaScript, along with a robust library of components. You use the MXML syntax to declare layout management and widget controls, and you use dynamic scripting to add event-handling and service invocation code which links the user interface to Java classes, data models, Web services, etc. The Flex compiler takes your MXML and script files and compiles them into bytecode. The Flash virtual machine on the client operates like the Java Virtual Machine in that it interprets compiled bytecode. The Flash bytecode format is known as SWF, and SWF files are produced by the Flex compiler. 
  Note that there’s an open-source alternative to Flex at http://openlaszlo.org; this has a structure that’s similar to Flex but may be a preferable alternative for some. Other tools also exist to create Flash applications in different ways. 
Hello, Flex
  Consider this MXML code, which defines a user interface (note that the first and last lines will not appear in the code that you download as part of this book’s source-code package): 
  MXML files are XML documents, so they begin with an XML version/encoding directive. The outermost MXML element is the Application element, which is the topmost visual and logical container for a Flex user interface. You can declare tags representing visual controls, such as the Label element above, inside the Application element. Controls are always placed within a container, and containers encapsulate layout managers, among other mechanisms, so they manage the layout of the controls within them. In the simplest case, as in the above example, the Application acts as the container. The Application’s default layout manager merely places controls vertically down the interface in the order in which they are declared. 
  ActionScript is a version of ECMAScript, or JavaScript, which looks quite similar to Java and supports classes and strong typing in addition to dynamic scripting. By adding a script to the example, we can introduce behavior. Here, the MXML Script control is used to place ActionScript directly into the MXML file: 
  A TextInput control accepts user input, and a Label displays the data as it is being typed. Note that the id attribute of each control becomes accessible in the script as a variable name, so the script can reference instances of the MXML tags. In the TextInput field, you can see that the change attribute is connected to the updateOutput( ) function so that the function is called whenever any kind of change occurs. 
Compiling MXML
  The easiest way to get started using Flex is with the free trial, which you can download at www.macromedia.com/software/flex/trial.11 The product is packaged in a number of editions, from free trials to enterprise server versions, and Macromedia offers additional tools for developing Flex applications. Exact packaging is subject to change, so check the Macromedia site for specifics. Also note that you may need to modify the jvm.config file in the Flex installation bin directory. 
  To compile the MXML code into Flash bytecode, you have two options: 
  1. You can place the MXML file in a Java Web application, alongside JSP and HTML pages in a WAR file, and have requests for the .mxml file compiled at run time whenever a browser requests the MXML document’s URL. 
  2. You can compile the MXML file using the Flex command-line compiler, mxmlc. 
  The first option, Web-based runtime compilation, requires a servlet container (such as Apache Tomcat) in addition to Flex. The servlet container’s WAR file(s) must be updated with Flex configuration information, such as servlet mappings which are added to the web.xml descriptor, and it must include the Flex JAR files—these steps are handled automatically when you install Flex. After the WAR file is configured, you can place the MXML files in the Web application and request the document’s URL through any browser. Flex will compile the application upon the first request, similar to the JSP model, and will thereafter deliver the compiled and cached SWF within an HTML shell. 
  The second option does not require a server. When you invoke the Flex mxmlc compiler on the command line, you produce SWF files. You can deploy these as you desire. The mxmlc executable is located in the bin directory of a Flex installation, and invoking it with no arguments will provide a list of valid command-line options. Typically, you’ll specify the location of the Flex client component library as the value of the -flexlib command-line option, but in very simple examples like the two that we’ve seen so far, the Flex compiler will assume the location of the component library. So you can compile the first two examples like this: 
  mxmlc.exe helloflexl.mxml mxmlc.exe helloflex2.mxml  This produces a helloflex2.swf file which can be run in Flash, or placed alongside HTML on any HTTP server (once Flash has been loaded into your Web browser, you can often just double-click on the SWF file to start it up in the browser). 
  For helloflex2.swf, you’ll see the following user interface running in the Flash Player: 
  This was not too hard to do…|  Hello! This was not too hard to do… 
  In more complex applications, you can separate MXML and ActionScript by referencing functions in external ActionScript files. From MXML, you use the following syntax for the Script control: 
  <mx:Script source="MyExternalScript.as" />  This code allows the MXML controls to reference functions located in a file named MyExternalScript.as as if they were located within the MXML file. 
MXML and ActionScript
  MXML is declarative shorthand for ActionScript classes. Whenever you see an MXML tag, there exists an ActionScript class of the same name. When the Flex compiler parses MXML, it first transforms the XML into ActionScript and loads the referenced ActionScript classes, and then compiles and links the ActionScript into an SWF. 
  You can write an entire Flex application in ActionScript alone, without using any MXML. Thus, MXML is a convenience. User interface components such as containers and controls are typically declared using MXML, while logic such as event handling and other client logic is handled through ActionScript and Java. 
  You can create your own MXML controls and reference them using MXML by writing ActionScript classes. You may also combine existing MXML containers and controls in a new MXML document that can then be referenced as a tag in another MXML document. The Macromedia Web site contains more information about how to do this. 
Containers and controls
  The visual core of the Flex component library is a set of containers which manage layout, and an array of controls which go inside those containers. Containers include panels, vertical and horizontal boxes, tiles, accordions, divided boxes, grids, and more. Controls are user interface widgets such as buttons, text areas, sliders, calendars, data grids, and so forth. 
  The remainder of this section will show a Flex application that displays and sorts a list of audio files. This application demonstrates containers, controls, and how to connect to Java from Flash. 
  We start the MXML file by placing a DataGrid control (one of the more sophisticated Flex controls) within a Panel container: 
  The DataGrid contains nested tags for its array of columns. When you see an attribute or a nested element on a control, you know that it corresponds to some property, event, or encapsulated object in the underlying ActionScript class. The DataGrid has an id attribute with the value songGrid, so ActionScript and MXML tags can reference the grid programmatically by using songGrid as a variable name. The DataGrid exposes many more properties than those shown here; the complete API for MXML controls and containers can be found online at http ://livedocs. macromedia. com/flex/is/asdocs_ en/index.html. 
  The DataGrid is followed by a VBox containing an Image to show the front of the album along with song information, and a MediaPlayback control that will play MP3 files. This example streams the content in order to reduce the size of the compiled SWF. When you embed images, audio, and video files into a Flex application instead of streaming them, the files become part of the compiled SWF and are delivered along with your user interface assets instead of streamed on demand at run time. 
  The Flash Player contains embedded codecs for playing and streaming audio and video in a variety of formats. Flash and Flex support the use of the Web’s most common image formats, and Flex also has the ability to translate scalable vector graphics (SVG) files into SWF resources that can be embedded in Flex clients. 
Effects and styles
  The Flash Player renders graphics using vectors, so it can perform highly expressive transformations at run time. Flex effects provide a small taste of these sorts of animations. Effects are transformations that you can apply to controls and containers using MXML syntax. 
  The Effect tag shown in the MXML produces two results: The first nested tag dynamically grows an image when the mouse hovers over it, and the second dynamically shrinks that image when the mouse moves away. These effects are applied to the mouse events available on the Image control for albumlmage. 
  Flex also provides effects for common animations like transitions, wipes, and modulating alpha channels. In addition to the built-in effects, Flex supports the Flash drawing API for truly innovative animations. Deeper exploration of this topic involves graphic design and animation, and is beyond the scope of this section. 
  Standard styling is available through Flex’s support for Cascading Style Sheets (CSS). If you attach a CSS file to an MXML file, the Flex controls will follow those styles. For this example, songStyles.css contains the following CSS declaration: 
  This file is imported and used in the song library application via the Style tag in the MXML file. After the style sheet is imported, its declarations can be applied to Flex controls in the    MXML file. As an example, the style sheet’s boldText declaration is used by the TextArea control with the songInfo id. 
Events
  A user interface is a state machine; it performs actions as state changes occur. In Flex, these changes are managed through events. The Flex class library contains a wide variety of controls with extensive events covering all aspects of mouse movement and keyboard usage. 
  The click attribute of a Button, for example, represents one of the events available on that control. The value assigned to click can be a function or an inline bit of script. In the MXML file, for example, the ControlBar holds the refreshSongsButton to refresh the list of songs. You can see from the tag that when the click event occurs, songService.getSongs( ) is called. In this example, the click event of the Button refers to the RemoteObject which corresponds to the Java method. 
Connecting to Java
  The RemoteObject tag at the end of the MXML file sets up the connection to the external Java class, gui.flex.SongService. The Flex client will use the getSongs( ) method in the Java class to retrieve the data for the DataGrid. To do so, it must appear as a service—an endpoint with which the client can exchange messages. The service defined in the RemoteObject tag has a source attribute which denotes the Java class of the RemoteObject, and it specifies an ActionScript callback function, onSongs( ), to be invoked when the Java method returns. The nested method tag declares the method getSongs( ), which makes that Java method accessible to the rest of the Flex application. 
  All invocations of services in Flex return asynchronously, through events fired to these callback functions. The RemoteObject also raises an alert dialog control in the event of an error. 
  The getSongs( ) method may now be invoked from Flash using ActionScript: 
  songService.getSongs(); 
  Because of the MXML configuration, this will call getSongs( ) in the SongService class: 
  Each Song object is just a data container: 
  When the application is initialized or you press the refreshSongsButton, getSongs( ) is called, and upon returning, the ActionScript onSongs(event.result) is called to populate the songGrid. 
  Here is the ActionScript listing, which is included with the MXML file’s Script control: 
  To handle DataGrid cell selections, we add the cellPress event attribute to the DataGrid declaration in the MXML file: 
  cellPress="selectSong(event)" 
  When the user clicks on a song in the DataGrid, this will call selectSong( ) in the ActionScript above. 
Data models and data binding
  Controls can directly invoke services, and ActionScript event callbacks give you a chance to programmatically update the visual controls when services return data. While the script which updates the controls is straightforward, it can get verbose and cumbersome, and its functionality is so common that Flex handles the behavior automatically, with data binding. 
  In its simplest form, data binding allows controls to reference data directly instead of requiring glue code to copy data into a control. When the data is updated, the control which references it is also automatically updated without any need for programmer intervention. The Flex infrastructure correctly responds to the data change events, and updates all controls which are bound to the data. 
  Here is a simple example of data binding syntax: 
  <mx:Slider id="mySlider"/> <mx:Text text="{mySlider.value}" />  To perform data binding, you place references within curly braces: {}. Everything within those curly braces is deemed an expression for Flex to evaluate. 
  The value of the first control, a Slider widget, is displayed by the second control, a Text field. As the Slider changes, the Text field’s text property is automatically updated. This way, the developer does not need to handle the Slider’s change events in order to update the Text field. 
  Some controls, such as the Tree control and the DataGrid in the song library application, are more sophisticated. These controls have a dataprovider property to facilitate binding to collections of data. The ActionScript onSongs( ) function shows how the SongService.getSongs( ) method is bound to the dataprovider of the Flex DataGrid. As declared in the RemoteObject tag in the MXML file, this function is the callback that ActionScript invokes whenever the Java method returns. 
  A more sophisticated application with more complex data modeling, such as an enterprise application making use of Data Transfer Objects or a messaging application with data conforming to complex schemas, may encourage further decoupling of the source of data from the controls. In Flex development, we perform this decoupling by declaring a "Model" object, which is a generic MXML container for data. The model contains no logic. It mirrors the Data Transfer Object found in enterprise development, and the structures of other programming languages. By using the model, we can databind our controls to the model, and    at the same time have the model databind its properties to service inputs and outputs. This decouples the sources of data, the services, from the visual consumers of the data, facilitating use of the Model- View-Controller (MVC) pattern. In larger, more sophisticated applications, the initial complexity caused by inserting a model is often only a small tax compared to the value of a cleanly decoupled MVC application. 
  In addition to Java objects, Flex can also access SOAP-based Web services and RESTful HTTP services using the WebService and HttpService controls, respectively. Access to all services is subject to security authorization constraints. 
Building and deploying
  With the earlier examples, you could get away without a -flexlib flag on the command line, but to compile this program, you must specify the location of the flex-config.xml file using the -flexlib flag. For my installation, the following command works, but you’ll have to modify it for your own configuration (the command is a single line, which has been wrapped): 
  This command will build the application into an SWF file which you can view in your browser, but the book’s code distribution file contains no MP3 files or JPG files, so you won’t see anything but the framework when you run the application. 
  In addition, you must configure a server in order to successfully talk to the Java files from the Flex application. The Flex trial package comes with the JRun server, and you can start this through your computer’s menus once Flex is installed, or via the command line: 
  jrun -start default  You can verify that the server has been successfully started by opening http://localhost:8700/samples in a Web browser and viewing the various samples (this is also a good way to get more familiar with the abilities of Flex). 
  Instead of compiling the application on the command line, you can compile it via the server. To do this, drop the song source files, CSS style sheet, etc., into the jrun4/servers/default/flex directory and access them in a browser by opening http://localhost:870o/flex/songs.mxml. 
  To successfully run the app, you must configure both the Java side and the Flex side. 
  Java: The compiled Song.java and SongService.java files must be placed in your WEB- INF/classes directory. This is where you drop WAR classes according to the J2EE specification. Alternatively, you can JAR the files and drop the result in WEB-INF/lib. It must be in a directory that matches its Java package structure. If you’re using JRun, these would be placed in jrun4/servers/defauIt/flex/WEB- INF/classes/gui/flex/Song.cIass and jrun4/servers/default/flex/WEBINF/ classes/gui/flex/SongService.class. You also need the image and MP3 support files available in the Web app (for JRun, jrun4/servers/default/flex is the Web app root). 
  Flex: For security reasons, Flex cannot access Java objects unless you give permission by modifying your flex-config.xml file. For JRun, this is located at jrun4/servers/default/flex/WEB-INF/flex/flex-config.xml. Go to the <remote-    objects> entry in that file, look at the <whitelist> section within, and see the following note: 
  <!-- For security, the whitelist is locked down by default. Uncomment the source element below to enable access to all classes during development. 
  We strongly recommend not allowing access to all source files in production, since this exposes Java and Flex system classes. <source>*</source> -->  Uncomment that <source> entry to allow access, so that it reads <source>*</source>. The meaning of this and other entries is described in the Flex configuration docs. 
  Exercise 38: (3) Build the "simple example of data binding syntax" shown above. 
  Exercise 39: (4) The code download for this book does not include the MP3S or JPGs shown in SongService.java. Find some MP3S and JPGs, modify SongService.java to include their file names, download the Flex trial and build the application. 
