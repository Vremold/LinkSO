  It’s possible to sign an applet for security purposes. This is shown in the online supplement for this chapter at www.MindView.net. Signed applets are powerful and can effectively take the place of an application, but they must run inside a Web browser. This requires the extra overhead of the browser running on the client machine, and also means that the user     interface of the applet is limited and often visually confusing. The Web browser has its own set of menus and toolbars, which will appear above the applet.9 
  The Java Network Launch Protocol (JNLP) solves the problem without sacrificing the advantages of applets. With a JNLP application, you can download and install a standalone Java application onto the client’s machine. This can be run from the command prompt, a desktop icon, or the application manager that is installed with your JNLP implementation. The application can even be run from the Web site from which it was originally downloaded. 
  A JNLP application can dynamically download resources from the Internet at run time, and can automatically check the version if the user is connected to the Internet. This means that it has all of the advantages of an applet together with the advantages of standalone applications. 
  Like applets, JNLP applications need to be treated with some caution by the client’s system. Because of this, JNLP applications are subject to the same sandbox security restrictions as applets. Like applets, they can be deployed in signed JAR files, giving the user the option to trust the signer. Unlike applets, if they are deployed in an unsigned JAR file, they can still request access to certain resources of the client’s system by means of services in the JNLP API. The user must approve these requests during program execution. 
  JNLP describes a protocol, not an implementation, so you will need an implementation in order to use it. Java Web Start, or JAWS, is Sun’s freely available official reference implementation and is distributed as part of Java SE5- If you are using it for development, you must ensure that the JAR file (javaws.jar) is in your classpath; the easiest solution is to add javaws.jar to your classpath from its normal Java installation path in jre/lib. If you are deploying your JNLP application from a Web server, you must ensure that your server recognizes the MIME type application/x-java-jnlp-file. If you are using a recent version of the Tomcat server (http://jakarta.apache.org/tomcat) this is pre-configured. Consult the user guide for your particular server. 
  Creating a JNLP application is not difficult. You create a standard application that is archived in a JAR file, and then you provide a launch file, which is a simple XML file that gives the client system all the information it needs to download and install your application. If you choose not to sign your JAR file, then you must use the services supplied by the JNLP API for each type of resource you want to access on the user’s machine. 
  Here is a variation of FileChooserTest.java using the JNLP services to open the file chooser, so that the class can be deployed as a JNLP application in an unsigned JAR file. 
  Note that the FileOpenService and the FileSaveService classes are imported from the javax.jnlp package and that nowhere in the code is the JFileChooser dialog box referred to directly. The two services used here must be requested using the ServiceManager.lookup( ) method, and the resources on the client system can only be accessed via the objects returned from this method. In this case, the files on the client’s file system are being written to and read from using the FileContent interface, provided by the JNLP. Any attempt to access the resources directly by using, say, a File or a FileReader object would cause a SecurityException to be thrown in the same way that it would if you tried to use them from an unsigned applet. If you want to use these classes and not be restricted to the JNLP service interfaces, you must sign the JAR file. 
  The commented jar command in JnlpFileChooser.java will produce the necessary JAR file. Here is an appropriate launch file for the preceding example. 
  You’ll find this launch file in the source-code download for this book (from www.MindView.net) saved as filechooser.jnlp without the first and last lines, in the same directory as the JAR file. As you can see, it is an XML file with one <jnlp> tag. This has a few sub-elements, which are mostly selfexplanatory. 
  The spec attribute of the jnlp element tells the client system what version of the JNLP the application can be run with. The codebase attribute points to the URL where this launch file and the resources can be found. Here, it points to a directory on the local machine, which is a good means of testing the application. Note that you’ll need to change this path so that it indicates the appropriate directory on your machine, in order for the program to load successfully. The href attribute must specify the name of this file. 
  The information tag has various sub-elements that provide information about the application. These are used by the Java Web Start administrative console or equivalent, which installs the JNLP application and allows the user to run it from the command line, make shortcuts, and so on. 
  The resources tag serves a similar purpose as the applet tag in an HTML file. The J2se sub- element specifies the J2SE version required to run the application, and the jar sub-element specifies the JAR file in which the class is archived. The jar element has an attribute download, which can have the values "eager" or "lazy" that tell the JNLP implementation whether or not the entire archive needs to be downloaded before the application can be run. 
  The application-desc attribute tells the JNLP implementation which class is the executable class, or entry point, to the JAR file. 
  Another useful sub-element of the jnlp tag is the security tag, not shown here. Here’s what a security tag looks like: 
  <security> <all-permissions/> <security/>  You use the security tag when your application is deployed in a signed JAR file. It is not needed in the preceding example because the local resources are all accessed via the JNLP services. 
  There are a few other tags available, the details of which can be found in the specification at http://java.sun.com/products/javawehstart/downloadspec. html. 
  To launch the program, you need a download page containing a hypertext link to the .jnlp file. Here’s what it looks like (without the first and last lines): 
  Once you have downloaded the application once, you can configure it by using the administrative console. If you are using Java Web Start on Windows, then you will be prompted to make a shortcut to your application the second time you use it. This behavior is configurable. 
  Only two of the JNLP services are covered here, but there are seven services in the current release. Each is designed for a specific task such as printing, or cutting and pasting to the clipboard. You can find more information at http://java.sun.com. 
