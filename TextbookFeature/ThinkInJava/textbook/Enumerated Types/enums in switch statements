  One very convenient capability of enums is the way that they can be used in switch statements. Ordinarily, a switch only works with an integral value, but since enums have an established integral order and the order of an instance can be produced with the ordinal( ) method (apparently the compiler does something like this), enums can be used in switch statements. 
  Although normally you must qualify an enum instance with its type, you do not have to do this in a case statement. Here’s an example that uses an enum to create a little state machine: 
  The compiler does not complain that there is no default statement inside the switch, but that’s not because it notices that you have case statements for each Signal instance. If you comment out one of the case statements it still won’t complain. This means you will have to pay attention and ensure that you cover all the cases on your own. On the other hand, if you are calling return from case statements, the compiler will complain if you don’t have a default—even if you’ve covered all the possible values of the enum. 
  Exercise 1: (2) Use a static import to modify TrafficLight.java so you don’t have to qualify the enum instances. 
