  Here are some of the basic methods available for String objects. Methods that are overloaded are summarized in a single row: 
  Method Arguments, Overloading Use Constructor Overloaded: default, String, Creating String objects. StringBuilder, StringBuffer, char arrays, byte arrays. length( ) Number of characters in the String. charAt( ) int Index The char at a location in the String. getChars( ), getBytes( ) The beginning and end from Copy chars or bytes into an which to copy, the array to external array. copy into, an index into the destination array. toCharArray( ) Produces a char[] containing the characters in the String. equals( ), equals- A String to compare with. An equality check on the IgnoreCase( ) contents of the two Strings. compareTo( ) A String to compare with. Result is negative, zero, or positive depending on the lexicographical ordering of the String and the argument. Uppercase and lowercase are not equal! contains( ) A CharSequence to search Result is true if the for. argument is contained in the String. contentEquals( ) A CharSequence or Result is true if there’s an StringBuffer to compare exact match with the to. argument. equalsIgnoreCase( ) A String to compare with. Result is true if the contents are equal, ignoring case. regionMatches( ) Offset into this String, the boolean result indicates other String and its offset whether the region matches. and length to compare. Overload adds "ignore case." startsWith( ) String that it might start boolean result indicates with. Overload adds offset whether the String starts into argument. with the argument. endsWith( ) String that might be a suffix boolean result indicates of this String. whether the argument is a suffix. indexOf( ), Overloaded: char, char and Returns -1 if the argument is lastIndexOf( ) starting index, String, not found within this String; otherwise, returns    Method Arguments, Overloading Use String and starting index. the index where the argument starts. lastIndexOf( ) searches backward from end. substring( ) (also Overloaded: starting index; Returns a new String object subSequence( )) starting index + ending containing the specified index. character set. concat( ) The String to concatenate. Returns a new String object containing the original String’s characters followed by the characters in the argument. replace() The old character to search Returns a new String object for, the new with the character to replace it with. replacements made. Uses the Can also replace a old String if no match is CharSequence with a found. CharSequence. toLowerCase( ) Returns a new String object toUpperCase( ) with the case of all letters changed. Uses the old String if no changes need to be made. trim( ) Returns a new String object with the whitespace removed from each end. Uses the old String if no changes need to be made. valueOf( ) Overloaded: Object, Returns a String containing char[], char[] and offset a character representation of and count, boolean, char, the argument. int, long, float, double. intern( ) Produces one and only one String reference per unique character sequence. 
  You can see that every String method carefully returns a new String object when it’s necessary to change the contents. Also notice that if the contents don’t need changing, the method will just return a reference to the original String. This saves storage and overhead. 
  The String methods involving regular expressions will be explained later in this chapter. 
