  An important limitation of object serialization is that it is a Java-only solution: Only Java programs can deserialize such objects. A more interoperable solution is to convert data to XML format, which allows it to be consumed by a large variety of platforms and languages. 
  Because of its popularity, there are a confusing number of options for programming with XML, including the javax.xml.* libraries distributed with the JDK. I’ve chosen to use Elliotte Rusty Harold’s open-source XOM library (downloads and documentation at www.xom.nu) because it seems to be the simplest and most straightforward way to produce and modify XML using Java. In addition, XOM emphasizes XML correctness. 
  As an example, suppose you have Person objects containing first and last names that you’d like to serialize into XML. The following Person class has a getXML( ) method that uses    XOM to produce the Person data converted to an XML Element object, and a constructor that takes an Element and extracts the appropriate Person data (notice that the XML examples are in their own subdirectory): 
  The XOM methods are fairly self-explanatory and can be found in the XOM documentation. XOM also contains a Serializer class that you can see used in the format( ) method to turn the XML into a more readable form. If you just call toXML( ) you’ll get everything run together, so the Serializer is a convenient tool. 
  Deserializing Person objects from an XML file is also simple: 
  The People constructor opens and reads a file using XOM’s Builder.build( ) method, and the getChildElements( ) method produces an Elements list (not a standard Java List, but an object that only has a size( ) and get( ) method—Harold did not want to force people to use Java SE5, but still wanted a type-safe container). Each Element in this list represents a Person object, so it is handed to the second Person constructor. Note that this requires that you know ahead of time the exact structure of your XML file, but this is often true with these kinds of problems. If the structure doesn’t match what you expect, XOM will throw an exception. It’s also possible for you to write more complex code that will explore the XML document rather than making assumptions about it, for cases when you have less concrete information about the incoming XML structure. 
  In order to get these examples to compile, you will have to put the JAR files from the XOM distribution into your classpath. 
  This has only been a brief introduction to XML programming with Java and the XOM library; for more information see www.xom.nu. 
  Exercise 31: (2) Add appropriate address information to Person.java and People.java. 
  Exercise 32: (4) Using a Map<String,Integer> and the net.mindview.util.TextFile utility, write a program that counts the occurrence of words in a file (use "\\W+" as the second argument to the TextFile constructor). Store the results as an XML file. 
