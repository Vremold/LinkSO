  with inheritance  You can easily add new method declarations to an interface by using inheritance, and you can also combine several interfaces into a new interface with inheritance. In both cases you get a new interface, as seen in this example: 
  DangerousMonster is a simple extension to Monster that produces a new interface. This is implemented in DragonZilla. 
  The syntax used in Vampire works only when inheriting interfaces. Normally, you can use extends with only a single class, but extends can refer to multiple base interfaces when building a new interface. As you can see, the interface names are simply separated with commas. 
  Exercise 14: (2) Create three interfaces, each with two methods. Inherit a new interface that combines the three, adding a new method. Create a class by implementing the new interface and also inheriting from a concrete class. Now write four methods, each of which   takes one of the four interfaces as an argument. In main( ), create an object of your class and pass it to each of the methods. 
  Exercise 15: (2) Modify the previous exercise by creating an abstract class and inheriting that into the derived class. Name collisions when combining Interfaces  You can encounter a small pitfall when implementing multiple interfaces. In the preceding example, both CanFight and ActionCharacter have identical void fight( ) methods. An identical method is not a problem, but what if the method differs by signature or return type? Hereâ€™s an example: 
  The difficulty occurs because overriding, implementation, and overloading get unpleasantly mixed together. Also, overloaded methods cannot differ only by return type. When the last two lines are uncommented, the error messages say it all: 
  InterfaceCollision.java:23: f() in C cannot implementf() in It; attempting to use incompatible return type found: int required: void InterfaceCollision.java:24: Interfaces I3 andh are incompatible; both define f(), but with different return type  Using the same method names in different interfaces that are intended to be combined generally causes confusion in the readability of the code, as well. Strive to avoid it. 
