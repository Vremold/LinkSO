  The methods that perform various kinds of addition and removal are optional operations in the Collection interface. This means that the implementing class is not required to provide functioning definitions for these methods. 
  This is a very unusual way to define an interface. As you’ve seen, an interface is a contract in object-oriented design. It says, "No matter how you choose to implement this interface, I guarantee that you can send these messages to this object."4 But an "optional" operation violates this very fundamental principle; it says that calling some methods will nor perform meaningful behavior. Instead, they will throw exceptions! It appears that compile-time type safety is discarded. 
  It’s not quite that bad. If an operation is optional, the compiler still restricts you to calling only the methods in that interface. It’s not like a dynamic language, in which you can call any method for any object, and find out at run time whether a particular call will work.5 In addition, most methods that take a Collection as an argument only read from that Collection, and all the "read" methods of Collection are not optional. 
  Why would you define methods as "optional"? Doing so prevents an explosion of interfaces in the design. Other designs for container libraries always seem to end up with a confusing plethora of interfaces to describe each of the variations on the main theme. It’s not even possible to capture all of the special cases in interfaces, because someone can always invent a new interface. The "unsupported operation" approach achieves an important goal of the Java    "the methods supported by any class or subclass." Information chapter, that this kind of dynamic behavior can be very powerful. 
  containers library: The containers are simple to learn and use. Unsupported operations are a special case that can be delayed until necessary. For this approach to work, however: 
  1. The UnsupportedOperationException must be a rare event. That is, for most classes, all operations should work, and only in special cases should an operation be unsupported. This is true in the Java containers library, since the classes you’ll use 99 percent of the time—ArrayList, LinkedList, HashSet, and HashMap, as well as the other concrete implementations—support all of the operations. The design does provide a "back door" if you want to create a new Collection without providing meaningful definitions for all the methods in the Collection interface, and yet still fit it into the existing library. 
  2. When an operation is unsupported, there should be reasonable likelihood that an UnsupportedOperationException will appear at implementation time, rather than after you’ve shipped the product to the customer. After all, it indicates a programming error: You’ve used an implementation incorrectly. 
  It’s worth noting that unsupported operations are only detectable at run time, and therefore represent dynamic type checking. If you’re coming from a statically typed language like C++, Java might appear to be just another statically typed language. Java certainly has static type checking, but it also has a significant amount of dynamic typing, so it’s hard to say that it’s exactly one type of language or another. Once you begin to notice this, you’ll start to see other examples of dynamic type checking in Java. 
Unsupported operations
  A common source of unsupported operations involves a container backed by a fixed-sized data structure. You get such a container when you turn an array into a List with the Arrays.asList( ) method. You can also choose to make any container (including a Map) throw UnsupportedOperationExceptions by using the "unmodifiable" methods in the Collections class. This example shows both cases: 
  Because Arrays.asList( ) produces a List that is backed by a fixed-size array, it makes sense that the only supported operations are the ones that don’t change the size of the array. Any method that would cause a change to the size of the underlying data structure produces an UnsupportedOperationException, to indicate a call to an unsupported method (a programming error). 
  Note that you can always pass the result of Arrays.asList( ) as a constructor argument to any Collection (or use the addAll( ) method, or the Collections.addAll( ) static method) in order to create a regular container that allows the use of all the methods—this is shown in the first call to test( ) in main( ). Such a call produces a new resizable underlying data structure. 
  The "unmodifiable" methods in the Collections class wrap the container in a proxy that produces an UnsupportedOperationException if you perform any operation that modifies the container in any way. The goal of using these methods is to produce a "constant" container object. The full list of "unmodifiable" Collections methods is described later. 
  The last try block in test( ) examines the set( ) method that’s part of List. This is interesting, because you can see how the granularity of the "unsupported operation" technique comes in handy—the resulting "interface" can vary by one method between the object returned by Arrays.asList( ) and that returned by Collections.unmodifiableList( ). Arrays.asList( ) returns a fixed-sized List, whereas Collections.unmodifiableList( ) produces a list that cannot be changed. As you can see    from the output, it’s OK to modify the elements in the List returned by Arrays.asList( ), because this would not violate the "fixed-sized" nature of that List. But clearly, the result of unmodifiableList( ) should not be modifiable in any way. If interfaces were used, this would have required two additional interfaces, one with a working set( ) method and one without. Additional interfaces would be required for various unmodifiable subtypes of Collection. 
  The documentation for a method that takes a container as an argument should specify which of the optional methods must be implemented. 
  Exercise 6: (2) Note that List has additional "optional" operations that are not included in Collection. Write a version of Unsupported.java that tests these additional optional operations. 
