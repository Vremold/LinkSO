Error Handling with Exceptions	The exception specification	{}	{}	{}
Error Handling with Exceptions	Error Handling with Exceptions	{}	{}	{}
Error Handling with Exceptions	Alternative approaches	{"java.io": 4, "java.lang": 1}	{"FileInputStream": 2, "Throwable": 3, "String": 2}	{"close": ["FileInputStream", 1], "getCause": ["Throwable", 3]}
Error Handling with Exceptions	Catching any exception	{"java.io": 1, "java.lang": 7}	{"PrintWriter": 1, "PrintStream": 1, "Throwable": 12, "Object": 14, "String": 17, "System": 22, "NullPointerException": 3, "StringBuilder": 4, "Class": 2, "StackTraceElement": 2}	{"print": ["PrintStream", 2], "getMessage": ["NullPointerException", 4], "getLocalizedMessage": ["Throwable", 4], "fillInStackTrace": ["Throwable", 6], "getStackTrace": ["Throwable", 2], "printStackTrace": ["Throwable", 18], "toString": ["StackTraceElement", 7], "initCause": ["Throwable", 3], "getClass": ["Object", 1], "getSimpleName": ["Class", 1], "getName": ["Class", 1], "getField": ["Class", 4], "getMethodName": ["StackTraceElement", 1]}
Error Handling with Exceptions	Summary	{}	{}	{}
Error Handling with Exceptions	Performing cleanup with finally	{}	{}	{}
Error Handling with Exceptions	Concepts	{}	{}	{}
Error Handling with Exceptions	Exception restrictions	{}	{}	{}
Error Handling with Exceptions	Exception matching	{}	{}	{}
Error Handling with Exceptions	Catching an exception	{}	{}	{}
Error Handling with Exceptions	Exception guidelines	{}	{}	{}
Error Handling with Exceptions	Creating your own exceptions	{"java.io": 4, "java.lang": 1, "java.util": 3, "java.util.logging": 3}	{"StringWriter": 5, "Writer": 1, "PrintWriter": 3, "Throwable": 2, "String": 22, "System": 18, "NullPointerException": 3, "Logger": 8}	{"toString": ["String", 4], "getMessage": ["NullPointerException", 4], "printStackTrace": ["Throwable", 4], "getLogger": ["Logger", 1], "severe": ["Logger", 1]}
Error Handling with Exceptions	Constructors	{"java.io": 1}	{"BufferedReader": 5}	{"readLine": ["BufferedReader", 3], "close": ["BufferedReader", 6]}
Error Handling with Exceptions	Basic exceptions	{}	{}	{}
Error Handling with Exceptions	Standard Java exceptions	{"java.io": 1, "java.lang": 1}	{"Throwable": 2, "String": 1, "System": 1, "NullPointerException": 3}	{"printStackTrace": ["Throwable", 1]}
B: Resources	Editors & IDEs	{}	{}	{}
B: Resources	Software	{}	{}	{}
Preface	Note on the cover design	{}	{}	{}
Preface	Preface	{}	{}	{}
Preface	Acknowledgements	{}	{}	{}
Preface	Java SE5 and SE6	{}	{}	{}
Preface	The 4th edition	{}	{}	{}
Reusing Classes	The final keyword	{"java.util": 1}	{"Arrays": 1, "Stack": 3, "HashMap": 1, "ArrayList": 1, "Vector": 7, "Random": 2, "Hashtable": 3}	{"toString": ["Hashtable", 1], "elementAt": ["Vector", 1], "addElement": ["Vector", 1]}
Reusing Classes	Reusing Classes	{}	{}	{}
Reusing Classes	Upcasting	{}	{}	{}
Reusing Classes	Summary	{}	{}	{}
Reusing Classes	Delegation	{}	{}	{}
Reusing Classes	Combining composition and inheritance	{}	{}	{}
Reusing Classes	protected	{}	{}	{}
Reusing Classes	Initialization and class loading	{}	{}	{}
Reusing Classes	Choosing composition vs. inheritance	{}	{}	{}
Reusing Classes	Inheritance syntax	{}	{}	{}
Reusing Classes	Composition syntax	{}	{}	{}
Initialization & Cleanup	Initialization & Cleanup	{}	{}	{}
Initialization & Cleanup	Member initialization	{}	{}	{}
Initialization & Cleanup	Summary	{}	{}	{}
Initialization & Cleanup	Default constructors	{}	{}	{}
Initialization & Cleanup	Enumerated types	{}	{}	{}
Initialization & Cleanup	Guaranteed initialization with the constructor	{}	{}	{}
Initialization & Cleanup	Method overloading	{}	{}	{}
Initialization & Cleanup	The this keyword	{}	{}	{}
Initialization & Cleanup	Array initialization	{"java.lang": 4, "java.util": 4}	{"Integer": 25, "Object": 14, "Character": 11, "String": 25, "Double": 2, "System": 28, "Float": 2, "Long": 1, "Arrays": 6, "Random": 5}	{"toString": ["Arrays", 6], "getClass": ["Object", 4], "nextInt": ["Random", 1]}
Initialization & Cleanup	Constructor initialization	{}	{}	{}
Initialization & Cleanup	Cleanup: finalization and garbage collection	{}	{}	{}
Introduction	Foundations for Java	{}	{}	{}
Introduction	Introduction	{}	{}	{}
Introduction	Errors	{}	{}	{}
Introduction	Exercises	{}	{}	{}
Introduction	Goals	{}	{}	{}
Introduction	Learning Java	{}	{}	{}
Introduction	Source code	{}	{}	{}
Introduction	JDK HTML documentation	{}	{}	{}
Introduction	Teaching from this book	{}	{}	{}
Introduction	Prerequisites	{}	{}	{}
Holding Your Objects	Printing containers	{"java.util": 1}	{"Arrays": 1, "HashSet": 5, "HashMap": 5, "TreeSet": 4, "List": 2, "TreeMap": 3, "LinkedHashMap": 3, "ArrayList": 4, "Set": 5, "LinkedHashSet": 4, "LinkedList": 4, "Collection": 5, "Map": 12, "Queue": 1}	{"fill": ["Arrays", 1], "toString": ["Arrays", 2], "add": ["Queue", 1], "get": ["Map", 1], "put": ["Map", 1]}
Holding Your Objects	Collection vs. Iterator	{"java.util": 3}	{"AbstractCollection": 7, "Iterator": 8, "HashSet": 1, "List": 1, "LinkedHashMap": 1, "Set": 1, "Collection": 20, "Map": 2}	{"iterator": ["Collection", 11], "remove": ["Map", 3], "hasNext": ["Iterator", 3], "next": ["Iterator", 3], "size": ["Map", 2], "get": ["Map", 1], "keySet": ["Map", 1], "values": ["Map", 2]}
Holding Your Objects	Queue	{"java.util": 3}	{"Comparator": 4, "Arrays": 2, "HashSet": 2, "Collections": 3, "List": 2, "Set": 1, "LinkedList": 9, "Collection": 1, "Random": 5, "PriorityQueue": 21, "Queue": 15}	{"reverseOrder": ["Collections", 3], "add": ["Queue", 1], "size": ["PriorityQueue", 2], "remove": ["Queue", 4], "addAll": ["Collection", 2], "peek": ["Queue", 4], "poll": ["Queue", 4], "offer": ["Queue", 4], "element": ["Queue", 2], "nextInt": ["Random", 1]}
Holding Your Objects	Holding Your Objects	{"java.util": 1}	{"List": 1, "Set": 2, "Objects": 1, "Collection": 1, "Map": 2, "Queue": 1}	{}
Holding Your Objects	Set	{"java.util": 5}	{"Comparator": 1, "Arrays": 1, "HashSet": 11, "SortedSet": 1, "Collections": 5, "TreeSet": 9, "List": 3, "Set": 18, "LinkedHashSet": 2, "Collection": 2, "Random": 4}	{"contains": ["Collection", 1], "containsAll": ["Collection", 2], "removeAll": ["Collection", 1]}
Holding Your Objects	Summary	{"java.util": 3, "java.util.concurrent": 1}	{"Iterator": 2, "Deque": 1, "HashSet": 3, "Stack": 1, "Collections": 2, "NavigableSet": 1, "HashMap": 4, "TreeSet": 3, "List": 13, "TreeMap": 3, "LinkedHashMap": 3, "ArrayList": 4, "Set": 8, "LinkedHashSet": 2, "ListIterator": 1, "Vector": 1, "LinkedList": 5, "Collection": 16, "SortedMap": 2, "Map": 12, "PriorityQueue": 2, "NavigableMap": 1, "Hashtable": 1, "Queue": 7}	{"entrySet": ["Hashtable", 1], "values": ["Hashtable", 1]}
Holding Your Objects	Stack	{"java.util": 10}	{"Stack": 24, "LinkedList": 10}	{"peek": ["LinkedList", 3], "pop": ["LinkedList", 6], "push": ["LinkedList", 5], "empty": ["Stack", 4], "removeFirst": ["LinkedList", 1], "getFirst": ["LinkedList", 1], "addFirst": ["LinkedList", 1]}
Holding Your Objects	LinkedList	{"java.util": 1}	{"Iterator": 1, "List": 5, "ArrayList": 3, "LinkedList": 8, "Queue": 4}	{"remove": ["Queue", 5], "add": ["Queue", 3], "peek": ["Queue", 5], "poll": ["Queue", 5], "offer": ["Queue", 4], "removeFirst": ["LinkedList", 4], "getFirst": ["LinkedList", 4], "element": ["Queue", 5], "removeLast": ["LinkedList", 4], "addFirst": ["LinkedList", 3], "addLast": ["LinkedList", 3]}
Holding Your Objects	Map	{"java.util": 3}	{"Iterator": 1, "Arrays": 5, "HashSet": 1, "Collections": 2, "HashMap": 6, "List": 3, "LinkedHashMap": 2, "ArrayList": 2, "Set": 4, "LinkedHashSet": 1, "Collection": 1, "Random": 5, "Map": 15}	{"sort": ["List", 1], "containsKey": ["Map", 1], "get": ["Map", 4], "keySet": ["Map", 4], "values": ["Map", 1], "containsValue": ["Map", 2]}
Holding Your Objects	Generics and type-safe containers	{"java.util": 3}	{"List": 5, "ArrayList": 17, "Objects": 2}	{"add": ["ArrayList", 2], "hashCode": ["Objects", 1], "size": ["ArrayList", 3], "get": ["ArrayList", 6], "toString": ["Objects", 1]}
Holding Your Objects	Iterator	{"java.util": 3}	{"Iterator": 17, "HashSet": 2, "Collections": 1, "TreeSet": 2, "List": 13, "ArrayList": 2, "Set": 1, "ListIterator": 6, "LinkedList": 2, "Collection": 2}	{"remove": ["Collection", 3], "hasNext": ["ListIterator", 6], "next": ["ListIterator", 9], "add": ["Collection", 1], "iterator": ["Collection", 7], "set": ["LinkedList", 1], "listIterator": ["LinkedList", 4], "get": ["LinkedList", 1], "nextIndex": ["ListIterator", 1], "previousIndex": ["ListIterator", 1], "previous": ["ListIterator", 1], "hasPrevious": ["ListIterator", 1]}
Holding Your Objects	List	{"java.util": 1}	{"Arrays": 1, "Collections": 4, "List": 23, "ArrayList": 8, "Set": 1, "LinkedList": 4, "Collection": 3, "Random": 2}	{"equals": ["Collection", 6], "sort": ["List", 2], "shuffle": ["Collections", 2], "addAll": ["Collection", 3], "add": ["Collection", 1], "set": ["LinkedList", 1], "clear": ["Collection", 2], "contains": ["Collection", 2], "retainAll": ["Collection", 2], "indexOf": ["LinkedList", 4], "remove": ["Collection", 6], "containsAll": ["Collection", 6], "isEmpty": ["Collection", 3], "subList": ["ArrayList", 4], "removeAll": ["Collection", 2], "get": ["LinkedList", 3], "toArray": ["Collection", 2]}
Holding Your Objects	Adding groups of elements	{"java.util": 5}	{"Arrays": 16, "Collections": 10, "List": 13, "ArrayList": 2, "Collection": 12, "Map": 1}	{"asList": ["Arrays", 11], "addAll": ["Collection", 10], "add": ["Collection", 2], "set": ["ArrayList", 1]}
Holding Your Objects	Foreach and iterators	{"java.util": 7}	{"Iterator": 10, "Arrays": 13, "Collections": 5, "Map.Entry": 2, "List": 7, "ArrayList": 7, "Set": 2, "LinkedList": 1, "Collection": 6, "Random": 3, "Map": 3}	{"remove": ["Map", 3], "hasNext": ["Iterator", 3], "next": ["Random", 3], "toString": ["Arrays", 2], "asList": ["Arrays", 10], "shuffle": ["Collections", 3], "getValue": ["Map.Entry", 1], "getKey": ["Map.Entry", 1], "iterator": ["Collection", 9], "size": ["Map", 1], "entrySet": ["Map", 2]}
Holding Your Objects	Basic concepts	{"java.util": 1}	{"Iterator": 1, "Collections": 1, "List": 7, "TreeMap": 1, "ArrayList": 7, "Set": 3, "LinkedList": 2, "Collection": 8, "Map": 2, "Queue": 1}	{"add": ["Queue", 4]}
A: Supplements	Design consulting and reviews	{}	{}	{}
A: Supplements	Thinking in C: Foundations for Java	{}	{}	{}
A: Supplements	Thinking in Objects seminar	{}	{}	{}
A: Supplements	Thinking in Patterns seminar	{}	{}	{}
A: Supplements	Hands-On Java seminar-on-CD	{}	{}	{}
A: Supplements	A: Supplements	{}	{}	{}
A: Supplements	Downloadable supplements	{}	{}	{}
A: Supplements	Thinking in Patterns (with Java)	{}	{}	{}
A: Supplements	Thinking in Enterprise Java	{}	{}	{}
A: Supplements	Thinking in Java seminar	{}	{}	{}
Containers in Depth	Optional operations	{"java.lang": 13, "java.util": 1}	{"String": 10, "System": 8, "Arrays": 9, "HashSet": 1, "Collections": 7, "HashMap": 1, "List": 12, "ArrayList": 4, "LinkedList": 1, "Collection": 12, "Map": 1}	{"asList": ["Arrays", 8], "add": ["Collection", 3], "clear": ["Map", 4], "remove": ["Map", 3], "addAll": ["Collection", 6], "unmodifiableList": ["Collections", 5], "set": ["LinkedList", 5], "retainAll": ["Collection", 4], "subList": ["ArrayList", 1], "removeAll": ["Collection", 4]}
Containers in Depth	Collection functionality	{"java.util": 1}	{"Iterator": 2, "Optional": 5, "Stack": 1, "Collections": 7, "List": 6, "ArrayList": 4, "Set": 3, "Vector": 1, "Collection": 20, "Map": 1, "Hashtable": 1}	{"remove": ["Hashtable", 1], "get": ["Hashtable", 1], "isEmpty": ["Hashtable", 4], "or": ["Optional", 1], "max": ["Vector", 3], "addAll": ["Collection", 2], "min": ["Vector", 3], "add": ["Collection", 1], "clear": ["Hashtable", 4], "contains": ["Hashtable", 2], "retainAll": ["Collection", 1], "containsAll": ["Collection", 3], "subList": ["Vector", 1], "iterator": ["Collection", 1], "removeAll": ["Collection", 2], "size": ["Hashtable", 1], "toArray": ["Collection", 2]}
Containers in Depth	Hashing and hash codes	{"java.lang": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 9, "java.util.random": 1}	{"Integer": 3, "Object": 14, "String": 48, "Double": 1, "System": 9, "Float": 1, "Class": 1, "Math": 2, "Comparable": 2, "Array": 1, "Type": 2, "Field": 1, "Constructor": 1, "Iterator": 2, "HashSet": 6, "Collections": 1, "Map.Entry": 11, "HashMap": 19, "TreeSet": 1, "List": 6, "TreeMap": 1, "LinkedHashMap": 1, "ArrayList": 4, "Set": 6, "LinkedHashSet": 1, "Objects": 1, "ListIterator": 1, "AbstractMap": 3, "LinkedList": 8, "Random": 2, "Map": 31}	{"equals": ["Map", 35], "toString": ["AbstractMap", 7], "hashCode": ["Map", 63], "compareTo": ["Comparable", 3], "getClass": ["Object", 3], "contains": ["LinkedList", 2], "indexOf": ["LinkedList", 2], "doubleToLongBits": ["Double", 1], "floatToIntBits": ["Float", 1], "getSimpleName": ["Class", 3], "newInstance": ["Constructor", 2], "rint": ["Math", 1], "random": ["Math", 1], "set": ["LinkedList", 1], "get": ["Map", 12], "remove": ["Map", 1], "hasNext": ["ListIterator", 2], "next": ["Random", 4], "add": ["LinkedList", 6], "iterator": ["Set", 2], "clear": ["Map", 1], "binarySearch": ["Collections", 1], "getValue": ["Map.Entry", 5], "setValue": ["Map.Entry", 1], "getKey": ["Map.Entry", 5], "containsKey": ["Map", 1], "entrySet": ["Map", 10], "values": ["Map", 1], "put": ["Map", 7], "listIterator": ["LinkedList", 1], "nextDouble": ["Random", 1]}
Containers in Depth	Utilities	{"java.util": 7}	{"Iterator": 2, "Comparator": 13, "Arrays": 4, "HashSet": 2, "SortedSet": 2, "Collections": 47, "HashMap": 2, "TreeSet": 2, "List": 31, "TreeMap": 2, "ArrayList": 10, "Set": 7, "ListIterator": 4, "Vector": 3, "Collection": 25, "SortedMap": 2, "Random": 3, "Map": 10, "Enumeration": 6}	{"remove": ["Map", 1], "hasNext": ["ListIterator", 1], "next": ["Random", 3], "reverseOrder": ["Collections", 2], "binarySearch": ["Collections", 4], "sort": ["List", 2], "iterator": ["Collection", 1], "size": ["Map", 2], "reverse": ["Collections", 2], "rotate": ["Collections", 2], "max": ["Vector", 5], "shuffle": ["Collections", 3], "copy": ["Collections", 1], "singleton": ["Collections", 1], "addAll": ["Collection", 1], "singletonList": ["Collections", 1], "min": ["Vector", 5], "emptyList": ["Collections", 1], "singletonMap": ["Collections", 1], "indexOfSubList": ["Collections", 2], "emptySet": ["Collections", 1], "nCopies": ["Collections", 1], "swap": ["Collections", 1], "frequency": ["Collections", 1], "disjoint": ["Collections", 2], "enumeration": ["Collections", 1], "lastIndexOfSubList": ["Collections", 2], "emptyMap": ["Collections", 1], "get": ["Map", 6], "listIterator": ["Vector", 1], "elements": ["Vector", 1], "nextElement": ["Enumeration", 1], "hasMoreElements": ["Enumeration", 1]}
Containers in Depth	Summary	{}	{}	{}
Containers in Depth	Sets and storage order	{"java.lang": 4, "java.util": 2}	{"Integer": 2, "Object": 3, "String": 10, "System": 3, "Class": 4, "Comparable": 7, "Iterator": 1, "Comparator": 2, "HashSet": 8, "SortedSet": 10, "Collections": 1, "TreeSet": 12, "Set": 30, "LinkedHashSet": 7, "Objects": 1, "LinkedList": 1, "Collection": 1}	{"equals": ["Collection", 7], "toString": ["Objects", 3], "hashCode": ["Collection", 9], "compareTo": ["Comparable", 6], "newInstance": ["Class", 1], "next": ["Iterator", 3], "iterator": ["Collection", 1], "headSet": ["TreeSet", 2], "tailSet": ["TreeSet", 2], "subSet": ["TreeSet", 2], "last": ["TreeSet", 2], "first": ["TreeSet", 2], "comparator": ["TreeSet", 1], "fill": ["Collections", 6]}
Containers in Depth	Containers in Depth	{}	{}	{}
Containers in Depth	Filling containers	{"java.util": 11}	{"Iterator": 8, "Arrays": 6, "AbstractSet": 3, "HashSet": 3, "Collections": 9, "Map.Entry": 17, "HashMap": 1, "TreeSet": 2, "List": 13, "TreeMap": 1, "LinkedHashMap": 2, "ArrayList": 8, "Set": 12, "LinkedHashSet": 8, "AbstractMap": 4, "LinkedList": 2, "Collection": 15, "Map": 37, "Hashtable": 1, "AbstractList": 2}	{"remove": ["AbstractList", 2], "hasNext": ["Iterator", 2], "next": ["Iterator", 13], "equals": ["AbstractList", 4], "fill": ["Collections", 5], "toString": ["Hashtable", 4], "hashCode": ["AbstractList", 5], "iterator": ["AbstractList", 4], "size": ["Hashtable", 5], "shuffle": ["Collections", 2], "addAll": ["AbstractList", 3], "nCopies": ["Collections", 2], "getValue": ["Map.Entry", 3], "setValue": ["Map.Entry", 2], "getKey": ["Map.Entry", 3], "entrySet": ["Hashtable", 6], "get": ["AbstractList", 3], "keySet": ["Hashtable", 2], "putAll": ["Hashtable", 1], "put": ["Hashtable", 1], "select": ["List", 4]}
Containers in Depth	Understanding Maps	{"java.util": 6, "java.util.concurrent": 1}	{"Iterator": 1, "Comparator": 2, "WeakHashMap": 3, "Properties": 1, "Collections": 1, "HashMap": 11, "TreeMap": 12, "LinkedHashMap": 11, "Set": 5, "Objects": 2, "Collection": 4, "SortedMap": 6, "Map": 24, "Hashtable": 1, "IdentityHashMap": 3, "ConcurrentHashMap": 3}	{"remove": ["ConcurrentHashMap", 1], "next": ["Iterator", 4], "equals": ["ConcurrentHashMap", 3], "containsKey": ["ConcurrentHashMap", 3], "get": ["ConcurrentHashMap", 10], "isEmpty": ["ConcurrentHashMap", 6], "keySet": ["ConcurrentHashMap", 6], "values": ["ConcurrentHashMap", 2], "clear": ["ConcurrentHashMap", 1], "size": ["ConcurrentHashMap", 1], "put": ["ConcurrentHashMap", 2], "tailMap": ["SortedMap", 2], "headMap": ["SortedMap", 2], "comparator": ["SortedMap", 1], "subMap": ["SortedMap", 3], "firstKey": ["SortedMap", 2], "lastKey": ["SortedMap", 2], "hashCode": ["ConcurrentHashMap", 3], "iterator": ["Collection", 2], "toString": ["ConcurrentHashMap", 5]}
Containers in Depth	List functionality	{"java.util": 1}	{"Iterator": 6, "List": 9, "ArrayList": 5, "Set": 1, "ListIterator": 7, "LinkedList": 9}	{"remove": ["LinkedList", 4], "hasNext": ["ListIterator", 1], "next": ["ListIterator", 5], "add": ["LinkedList", 2], "clear": ["LinkedList", 1], "listIterator": ["LinkedList", 4], "isEmpty": ["Set", 1], "addAll": ["LinkedList", 2], "iterator": ["Set", 3], "size": ["LinkedList", 3], "get": ["LinkedList", 2], "nextIndex": ["ListIterator", 1], "previousIndex": ["ListIterator", 1], "previous": ["ListIterator", 2], "hasPrevious": ["ListIterator", 2], "removeFirst": ["LinkedList", 2], "getFirst": ["LinkedList", 1], "removeLast": ["LinkedList", 1]}
Containers in Depth	Full container taxonomy	{}	{}	{}
Containers in Depth	Queues	{"java.util": 5, "java.util.concurrent": 1}	{"Deque": 10, "Objects": 1, "LinkedList": 8, "Random": 1, "PriorityQueue": 5, "Queue": 7, "ConcurrentLinkedQueue": 1, "PriorityBlockingQueue": 1, "LinkedBlockingQueue": 1, "ArrayBlockingQueue": 1}	{"peek": ["ArrayBlockingQueue", 1], "poll": ["ArrayBlockingQueue", 1], "add": ["ArrayBlockingQueue", 1], "remove": ["ArrayBlockingQueue", 2], "removeFirst": ["LinkedList", 3], "getFirst": ["LinkedList", 2], "removeLast": ["LinkedList", 3], "size": ["ArrayBlockingQueue", 4], "addFirst": ["LinkedList", 3], "getLast": ["LinkedList", 2], "addLast": ["LinkedList", 3], "toString": ["Objects", 4], "next": ["Random", 2], "isEmpty": ["ConcurrentLinkedQueue", 1]}
Containers in Depth	Holding references	{"java.lang": 2, "java.lang.ref": 2, "java.util": 2}	{"Integer": 4, "Object": 1, "String": 10, "System": 8, "ReferenceQueue": 5, "SoftReference": 7, "Reference": 10, "PhantomReference": 6, "WeakHashMap": 7, "LinkedList": 6, "Map": 1}	{"equals": ["Map", 2], "toString": ["Reference", 4], "hashCode": ["Map", 4], "getClass": ["Object", 1], "finalize": ["Object", 2], "gc": ["System", 2], "poll": ["LinkedList", 1], "get": ["Map", 2], "put": ["Map", 1], "getLast": ["LinkedList", 3]}
Containers in Depth	Java 1.01.1 containers	{"java.util": 3}	{"Iterator": 3, "BitSet": 27, "Stack": 18, "Collections": 2, "HashMap": 2, "List": 1, "ArrayList": 4, "EnumSet": 5, "Objects": 2, "Vector": 14, "LinkedList": 7, "Collection": 3, "Random": 2, "Hashtable": 3, "Enumeration": 12}	{"set": ["LinkedList", 5], "clear": ["Hashtable", 3], "isEmpty": ["Hashtable", 1], "toString": ["Hashtable", 3], "size": ["Hashtable", 1], "get": ["Hashtable", 1], "pop": ["LinkedList", 3], "push": ["LinkedList", 1], "empty": ["Stack", 2], "enumeration": ["Collections", 2], "values": ["Hashtable", 3], "elementAt": ["Vector", 2], "elements": ["Hashtable", 2], "removeFirst": ["LinkedList", 1], "nextInt": ["Random", 4], "nextElement": ["Enumeration", 2], "hasMoreElements": ["Enumeration", 2]}
Containers in Depth	Choosing an implementation	{"java.util": 4}	{"Iterator": 2, "WeakHashMap": 3, "Arrays": 7, "HashSet": 10, "Stack": 1, "Collections": 2, "HashMap": 20, "TreeSet": 9, "List": 56, "TreeMap": 8, "LinkedHashMap": 3, "ArrayList": 22, "Set": 12, "LinkedHashSet": 6, "ListIterator": 1, "Vector": 5, "LinkedList": 31, "Random": 2, "Map": 15, "AbstractSequentialList": 1, "Hashtable": 5, "IdentityHashMap": 5, "Queue": 8}	{"remove": ["Queue", 1], "hasNext": ["ListIterator", 2], "next": ["Random", 2], "get": ["IdentityHashMap", 5], "entrySet": ["IdentityHashMap", 1], "keySet": ["IdentityHashMap", 1], "clear": ["IdentityHashMap", 11], "putAll": ["IdentityHashMap", 1], "size": ["IdentityHashMap", 9], "put": ["IdentityHashMap", 3], "equals": ["IdentityHashMap", 1], "asList": ["Arrays", 3], "binarySearch": ["Collections", 2], "sort": ["List", 2], "add": ["Queue", 4], "iterator": ["AbstractSequentialList", 2], "contains": ["Hashtable", 1], "toArray": ["LinkedList", 1], "set": ["AbstractSequentialList", 1], "listIterator": ["AbstractSequentialList", 1], "subList": ["Vector", 2], "length": ["Vector", 1], "test": ["Vector", 8], "removeFirst": ["LinkedList", 1], "removeLast": ["LinkedList", 1], "addFirst": ["LinkedList", 1], "addLast": ["LinkedList", 1], "nextInt": ["Random", 2], "rehash": ["Hashtable", 1]}
Graphical User Interfaces	Concurrency & Swing	{"java.util": 10, "java.util.concurrent": 8, "java.awt": 9, "java.awt.event": 4, "javax.swing": 5}	{"Iterator": 2, "List": 4, "ArrayList": 4, "Random": 2, "Timer": 1, "Executor": 2, "Future": 10, "Executors": 3, "ExecutorService": 5, "Callable": 11, "TimeUnit": 4, "GridLayout": 2, "FlowLayout": 4, "Dimension": 1, "Graphics": 1, "Color": 4, "ActionEvent": 10, "ActionListener": 10, "SwingWorker": 1, "SwingUtilities": 3, "JFrame": 5, "JProgressBar": 1, "ProgressMonitor": 8, "JButton": 14, "JPanel": 6}	{"remove": ["JFrame", 2], "hasNext": ["Iterator", 2], "next": ["Random", 2], "add": ["ArrayList", 15], "iterator": ["ArrayList", 2], "get": ["SwingWorker", 1], "cancel": ["SwingWorker", 1], "purge": ["Timer", 4], "execute": ["SwingWorker", 2], "isDone": ["SwingWorker", 2], "newSingleThreadExecutor": ["Executors", 2], "newCachedThreadPool": ["Executors", 1], "shutdownNow": ["ExecutorService", 2], "submit": ["ExecutorService", 1], "call": ["Callable", 3], "sleep": ["TimeUnit", 5], "toString": ["Color", 4], "getSize": ["Dimension", 1], "setColor": ["Graphics", 1], "actionPerformed": ["ActionListener", 10], "run": ["SwingWorker", 6], "setProgress": ["ProgressMonitor", 1], "invokeLater": ["SwingUtilities", 2], "paintComponent": ["SwingUtilities", 3], "repaint": ["JFrame", 4], "paintBorder": ["JProgressBar", 1], "isCanceled": ["ProgressMonitor", 2], "close": ["ProgressMonitor", 2]}
Graphical User Interfaces	The Swing event model	{"java.lang": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 2, "java.util.regex": 1, "java.awt": 4, "java.awt.event": 2, "javax.swing": 3}	{"String": 10, "Class": 5, "ClassNotFoundException": 1, "Type": 2, "Method": 4, "HashMap": 5, "Matcher": 3, "Pattern": 6, "GridLayout": 1, "Event": 4, "Container": 2, "Window": 3, "Adjustable": 1, "BorderLayout": 1, "Component": 5, "Color": 3, "ItemSelectable": 1, "TextListener": 1, "ContainerListener": 1, "FocusAdapter": 1, "KeyListener": 4, "AdjustmentListener": 2, "ComponentAdapter": 1, "FocusEvent": 5, "ComponentEvent": 5, "MouseEvent": 18, "ActionEvent": 4, "AdjustmentEvent": 2, "ItemListener": 2, "WindowEvent": 8, "ItemEvent": 2, "FocusListener": 4, "WindowListener": 2, "ContainerAdapter": 1, "WindowAdapter": 1, "ContainerEvent": 3, "KeyAdapter": 1, "MouseAdapter": 4, "MouseMotionAdapter": 1, "MouseMotionListener": 5, "ActionListener": 4, "KeyEvent": 7, "MouseListener": 6, "TextEvent": 1, "ComponentListener": 2, "JTextArea": 7, "JLabel": 4, "JApplet": 1, "JScrollPane": 3, "JList": 3, "JFrame": 5, "JCheckBoxMenuItem": 2, "JTextField": 14, "JButton": 7, "JComboBox": 2, "JRadioButtonMenuItem": 1, "JPanel": 3, "JCheckBox": 2, "JMenu": 1, "JDialog": 3, "JMenuItem": 1}	{"length": ["String", 1], "trim": ["String", 1], "toString": ["Color", 1], "forName": ["Class", 3], "getMethods": ["Class", 2], "get": ["HashMap", 1], "put": ["HashMap", 1], "find": ["Matcher", 2], "group": ["Matcher", 2], "matcher": ["Pattern", 1], "paramString": ["JMenuItem", 12], "add": ["JMenu", 4], "removeContainerListener": ["Container", 1], "addContainerListener": ["Container", 1], "removeWindowListener": ["Window", 1], "addWindowListener": ["Window", 1], "setBackground": ["Component", 1], "removeAdjustmentListener": ["Adjustable", 1], "addAdjustmentListener": ["Adjustable", 1], "addMouseMotionListener": ["Component", 3], "removeKeyListener": ["Component", 1], "removeMouseListener": ["Component", 1], "removeComponentListener": ["Component", 1], "addKeyListener": ["Component", 2], "addFocusListener": ["Component", 2], "removeFocusListener": ["Component", 1], "addMouseListener": ["Component", 2], "removeMouseMotionListener": ["Component", 1], "addComponentListener": ["Component", 1], "addItemListener": ["JComboBox", 1], "removeItemListener": ["JComboBox", 1], "componentRemoved": ["ContainerAdapter", 1], "componentAdded": ["ContainerAdapter", 1], "focusGained": ["FocusListener", 2], "focusLost": ["FocusListener", 2], "keyPressed": ["KeyAdapter", 2], "keyTyped": ["KeyAdapter", 2], "keyReleased": ["KeyAdapter", 2], "adjustmentValueChanged": ["AdjustmentListener", 1], "componentResized": ["ComponentListener", 1], "componentMoved": ["ComponentListener", 1], "componentShown": ["ComponentListener", 1], "componentHidden": ["ComponentListener", 1], "itemStateChanged": ["ItemListener", 1], "windowClosed": ["WindowAdapter", 1], "windowDeactivated": ["WindowAdapter", 1], "windowDeiconified": ["WindowAdapter", 1], "windowIconified": ["WindowAdapter", 1], "windowClosing": ["WindowAdapter", 1], "windowActivated": ["WindowAdapter", 1], "windowOpened": ["WindowAdapter", 1], "mouseMoved": ["MouseMotionListener", 3], "mouseClicked": ["MouseListener", 5], "mouseDragged": ["MouseMotionListener", 2], "mouseExited": ["MouseListener", 2], "mouseReleased": ["MouseListener", 2], "mousePressed": ["MouseListener", 2], "mouseEntered": ["MouseListener", 2], "actionPerformed": ["JComboBox", 2], "setText": ["JLabel", 1], "getText": ["JLabel", 1], "addActionListener": ["JComboBox", 2], "removeActionListener": ["JComboBox", 1], "setEditable": ["JComboBox", 1]}
Graphical User Interfaces	Building Flash Web clients with Flex	{"java.io": 1, "java.util": 1}	{"List": 2, "ArrayList": 1, "Objects": 1}	{"add": ["ArrayList", 1], "remove": ["ArrayList", 1]}
Graphical User Interfaces	Alternatives to Swing	{}	{}	{}
Graphical User Interfaces	Visual programming and JavaBeans	{"java.io": 2, "java.lang": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 3, "java.awt": 10, "java.awt.event": 5, "java.beans": 1, "javax.swing": 4}	{"Object": 2, "String": 11, "System": 4, "Class": 5, "ClassNotFoundException": 1, "Type": 1, "Method": 20, "Properties": 2, "List": 1, "ArrayList": 9, "FlowLayout": 1, "Event": 2, "Font": 4, "Dimension": 2, "Graphics": 4, "BorderLayout": 2, "Color": 18, "KeyListener": 7, "MouseEvent": 4, "ActionEvent": 16, "MouseAdapter": 2, "MouseMotionAdapter": 2, "ActionListener": 23, "KeyEvent": 4, "BeanInfo": 7, "Introspector": 9, "PropertyChangeEvent": 2, "PropertyVetoException": 1, "PropertyDescriptor": 2, "EventSetDescriptor": 1, "MethodDescriptor": 2, "Beans": 14, "JTextArea": 2, "JLabel": 1, "JScrollPane": 1, "JFrame": 5, "JTextField": 5, "JPanel": 7}	{"toString": ["PropertyChangeEvent", 1], "forName": ["Class", 1], "getName": ["Font", 6], "getMethod": ["MethodDescriptor", 2], "add": ["ArrayList", 4], "addActionListener": ["JTextField", 10], "remove": ["JFrame", 1], "getPreferredSize": ["JTextField", 1], "removeActionListener": ["JTextField", 8], "getSize": ["Dimension", 4], "dispose": ["Graphics", 2], "setColor": ["Graphics", 5], "getColor": ["Color", 3], "getFontMetrics": ["Graphics", 2], "keyPressed": ["KeyListener", 1], "keyTyped": ["KeyListener", 1], "keyReleased": ["KeyListener", 1], "getX": ["MouseEvent", 2], "getY": ["MouseEvent", 2], "mouseMoved": ["MouseMotionAdapter", 2], "mousePressed": ["MouseAdapter", 2], "actionPerformed": ["ActionListener", 8], "getMethodDescriptors": ["BeanInfo", 2], "getEventSetDescriptors": ["BeanInfo", 2], "getPropertyDescriptors": ["BeanInfo", 2], "getBeanInfo": ["Introspector", 2], "getPropertyType": ["PropertyDescriptor", 2], "getReadMethod": ["PropertyDescriptor", 2], "getWriteMethod": ["PropertyDescriptor", 2], "getListenerMethodDescriptors": ["EventSetDescriptor", 1], "getListenerType": ["EventSetDescriptor", 1], "getListenerMethods": ["EventSetDescriptor", 1], "getAddListenerMethod": ["EventSetDescriptor", 1], "getRemoveListenerMethod": ["EventSetDescriptor", 1], "getText": ["JLabel", 1], "getGraphics": ["JFrame", 2], "repaint": ["JFrame", 2]}
Graphical User Interfaces	Text areas	{"java.util": 1, "java.awt": 2, "java.awt.event": 1, "javax.swing": 1}	{"Map.Entry": 1, "HashMap": 1, "Map": 3, "FlowLayout": 1, "TextArea": 3, "Component": 1, "Cursor": 1, "ActionEvent": 2, "ActionListener": 3, "JTextArea": 10, "JScrollPane": 3, "JFrame": 2, "JTextField": 2, "JButton": 3}	{"getValue": ["Map.Entry", 1], "getKey": ["Map.Entry", 1], "entrySet": ["Map", 1], "append": ["JTextArea", 1], "add": ["Component", 2], "setCursor": ["Component", 1], "actionPerformed": ["ActionListener", 2], "addActionListener": ["JTextField", 2]}
Graphical User Interfaces	Summary	{}	{}	{}
Graphical User Interfaces	Graphical User Interfaces	{"javax.swing": 1}	{"JScrollPane": 1}	{}
Graphical User Interfaces	Creating SWT applications	{"java.io": 1, "java.util": 4, "java.util.concurrent": 1}	{"StringWriter": 2, "PrintWriter": 1, "Iterator": 2, "Properties": 1, "Map.Entry": 1, "TreeSet": 2, "Set": 1, "Random": 2, "Map": 1, "ExecutorService": 1, "TimeUnit": 1}	{"toString": ["StringWriter", 3], "hasNext": ["Iterator", 1], "next": ["Random", 3], "getValue": ["Map.Entry", 1], "getKey": ["Map.Entry", 1], "iterator": ["Set", 1], "nextInt": ["Random", 3], "entrySet": ["Map", 1], "sleep": ["TimeUnit", 6]}
Graphical User Interfaces	A selection of Swing components	{"java.lang": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 2, "java.awt": 39, "java.awt.event": 15, "javax.swing": 38, "javax.swing.border": 5, "javax.swing.event": 5, "javax.swing.plaf": 2, "javax.swing.plaf.basic": 2, "javax.swing.text": 1}	{"Integer": 3, "Object": 4, "String": 54, "System": 3, "Class": 1, "Math": 3, "Constructor": 2, "List": 8, "Set": 3, "Timer": 3, "GridLayout": 7, "FlowLayout": 14, "Event": 1, "Window": 1, "Button": 2, "Graphics": 5, "BorderLayout": 13, "MenuItem": 1, "Component": 2, "Color": 10, "Dialog": 5, "MouseEvent": 4, "ActionEvent": 29, "ItemListener": 1, "ItemEvent": 1, "MouseAdapter": 3, "ActionListener": 43, "KeyEvent": 8, "MouseListener": 1, "Action": 1, "JTextArea": 7, "AbstractButton": 11, "Popup": 3, "JLabel": 14, "JTextPane": 9, "Box": 6, "JPasswordField": 1, "JApplet": 1, "JScrollPane": 4, "JList": 8, "Icon": 7, "DefaultListModel": 2, "JFrame": 27, "JProgressBar": 3, "JPopupMenu": 3, "ButtonGroup": 6, "JCheckBoxMenuItem": 9, "JColorChooser": 1, "LookAndFeel": 4, "ProgressMonitor": 5, "JTextField": 33, "JOptionPane": 17, "JToolTip": 1, "JToggleButton": 4, "JSlider": 9, "JTabbedPane": 5, "ImageIcon": 6, "JButton": 48, "JComboBox": 9, "BorderFactory": 1, "JComponent": 6, "UIManager": 8, "JRadioButtonMenuItem": 2, "JPanel": 23, "JCheckBox": 16, "JRadioButton": 11, "JMenuBar": 13, "JMenu": 14, "JDialog": 7, "JMenuItem": 42, "JFileChooser": 12, "BevelBorder": 2, "CompoundBorder": 1, "EtchedBorder": 2, "SoftBevelBorder": 1, "MatteBorder": 1, "TitledBorder": 4, "LineBorder": 2, "Border": 2, "ListSelectionEvent": 1, "ChangeListener": 3, "ListSelectionListener": 2, "DocumentListener": 2, "DocumentEvent": 3, "BasicArrowButton": 6, "AttributeSet": 1, "BadLocationException": 1, "PlainDocument": 2}	{"equals": ["AttributeSet", 1], "toString": ["ListSelectionEvent", 4], "getClass": ["Object", 6], "toUpperCase": ["String", 1], "exit": ["System", 1], "getName": ["JFileChooser", 3], "newInstance": ["Constructor", 2], "getConstructor": ["Class", 2], "sin": ["Math", 2], "log": ["Math", 9], "add": ["AttributeSet", 61], "getSelectedIndex": ["JComboBox", 2], "addActionListener": ["JFileChooser", 12], "getSelectedItem": ["JComboBox", 1], "isSelected": ["JMenu", 1], "addItemListener": ["JComboBox", 2], "getActionCommand": ["JComboBox", 2], "setActionCommand": ["JComboBox", 2], "isEnabled": ["Action", 1], "end": ["Event", 2], "dispose": ["Graphics", 2], "paint": ["JComponent", 3], "setVisible": ["JComponent", 3], "setColor": ["JColorChooser", 1], "drawLine": ["Graphics", 2], "drawRect": ["Graphics", 1], "setEnabled": ["JMenuItem", 3], "repaint": ["JDialog", 3], "addMouseListener": ["Component", 2], "getHeight": ["JComponent", 1], "getWidth": ["JComponent", 1], "getX": ["JComponent", 1], "validate": ["Component", 3], "getSize": ["JComponent", 2], "getY": ["JComponent", 1], "isPopupTrigger": ["JPopupMenu", 1], "itemStateChanged": ["ItemListener", 1], "mouseReleased": ["MouseListener", 1], "mousePressed": ["MouseListener", 2], "actionPerformed": ["JComboBox", 28], "getValue": ["JSlider", 2], "append": ["JTextArea", 2], "setRolloverEnabled": ["AbstractButton", 1], "setText": ["JPasswordField", 2], "getModel": ["JComboBox", 2], "getText": ["JPasswordField", 13], "setIcon": ["JOptionPane", 1], "setMnemonic": ["AbstractButton", 1], "setDocument": ["JTextField", 1], "paintComponent": ["JComponent", 8], "setJMenuBar": ["JDialog", 4], "getJMenuBar": ["JDialog", 2], "getSelectedValues": ["JList", 2], "addListSelectionListener": ["JList", 1], "getValueIsAdjusting": ["ListSelectionEvent", 1], "setDefaultCloseOperation": ["JDialog", 1], "getComponent": ["JMenuItem", 1], "addSeparator": ["JMenu", 2], "setState": ["JCheckBoxMenuItem", 1], "getState": ["JCheckBoxMenuItem", 3], "showInputDialog": ["JOptionPane", 1], "showMessageDialog": ["JOptionPane", 1], "showConfirmDialog": ["JOptionPane", 1], "showOptionDialog": ["JOptionPane", 1], "setPaintTicks": ["JSlider", 1], "setMinorTickSpacing": ["JSlider", 1], "setEditable": ["JComboBox", 9], "setBorder": ["TitledBorder", 4], "setToolTipText": ["JComponent", 1], "getSystemLookAndFeelClassName": ["UIManager", 3], "getCrossPlatformLookAndFeelClassName": ["UIManager", 1], "getCurrentDirectory": ["JFileChooser", 3], "getSelectedFile": ["JFileChooser", 3], "showOpenDialog": ["JFileChooser", 1], "showSaveDialog": ["JFileChooser", 1], "stateChanged": ["ChangeListener", 4], "valueChanged": ["ListSelectionListener", 1], "insertUpdate": ["PlainDocument", 1], "changedUpdate": ["DocumentListener", 1], "removeUpdate": ["PlainDocument", 1], "insertString": ["PlainDocument", 2]}
Graphical User Interfaces	Applets	{}	{}	{}
Graphical User Interfaces	JNLP and Java Web Start	{"java.io": 1, "java.awt": 2, "java.awt.event": 1, "javax.swing": 1}	{"ByteArrayInputStream": 1, "File": 1, "GridLayout": 1, "BorderLayout": 3, "ActionEvent": 2, "ActionListener": 2, "JScrollPane": 2, "JFrame": 1, "JTextField": 2, "JEditorPane": 2, "JButton": 3, "JPanel": 3, "JFileChooser": 1}	{"getName": ["JFileChooser", 3], "actionPerformed": ["ActionListener", 2], "getViewport": ["JScrollPane", 1], "getText": ["JEditorPane", 1]}
Graphical User Interfaces	Controlling layout	{"java.awt": 3, "javax.swing": 3}	{"GridLayout": 8, "FlowLayout": 10, "Container": 2, "GridBagLayout": 7, "Button": 2, "BorderLayout": 19, "JLabel": 1, "JApplet": 1, "JFrame": 6, "BoxLayout": 4, "JButton": 8, "JPanel": 1, "JWindow": 1, "JDialog": 1}	{"add": ["Container", 3], "paint": ["Container", 1], "setLayout": ["JDialog", 2]}
Graphical User Interfaces	Capturing an event	{"java.awt": 4, "java.awt.event": 2, "javax.swing": 2}	{"FlowLayout": 2, "Button": 11, "ActionEvent": 3, "ActionListener": 7, "JFrame": 2, "JTextField": 10, "JButton": 13}	{"addActionListener": ["JTextField", 7], "actionPerformed": ["ActionListener", 5]}
Graphical User Interfaces	Making a button	{"java.awt": 1, "javax.swing": 1}	{"FlowLayout": 3, "Button": 5, "BorderLayout": 1, "JFrame": 3, "JButton": 5}	{"setLayout": ["JFrame", 1]}
Graphical User Interfaces	Swing basics	{"java.util": 3, "java.util.concurrent": 3, "javax.swing": 5}	{"TimeUnit": 3, "SwingUtilities": 6, "JLabel": 10, "JFrame": 19}	{"sleep": ["TimeUnit", 7], "invokeLater": ["SwingUtilities", 2], "setDefaultCloseOperation": ["JFrame", 2]}
Strings	Overloading ‘+’ vs. StringBuilder	{"java.lang": 6, "java.util": 1}	{"String": 37, "System": 3, "StringBuffer": 1, "StringBuilder": 32, "Stack": 1, "Random": 2}	{"length": ["StringBuilder", 2], "replace": ["StringBuilder", 1], "toString": ["StringBuilder", 9], "substring": ["StringBuilder", 1], "reverse": ["StringBuilder", 1], "append": ["StringBuilder", 4], "delete": ["StringBuilder", 1], "insert": ["StringBuilder", 1]}
Strings	StringTokenizer	{"java.util": 1}	{"Arrays": 1, "Scanner": 5, "StringTokenizer": 6}	{"hasNext": ["Scanner", 1], "next": ["Scanner", 1], "hasMoreElements": ["StringTokenizer", 1], "nextToken": ["StringTokenizer", 1]}
Strings	Summary	{}	{}	{}
Strings	Strings	{}	{}	{}
Strings	Unintended recursion	{"java.util": 2}	{"List": 2, "ArrayList": 6}	{"add": ["ArrayList", 1]}
Strings	Formatting output	{"java.io": 2, "java.math": 1, "java.util": 4}	{"PrintWriter": 1, "File": 1, "PrintStream": 2, "BigInteger": 4, "Formatter": 18}	{"print": ["PrintStream", 1], "println": ["PrintStream", 1], "printf": ["PrintStream", 8], "format": ["Formatter", 12], "toString": ["Formatter", 2]}
Strings	Regular expressions	{"java.util": 17, "java.util.regex": 15}	{"Arrays": 3, "ArrayList": 1, "StringTokenizer": 1, "Matcher": 22, "Pattern": 47}	{"toString": ["Pattern", 1], "set": ["ArrayList", 7], "reset": ["Matcher", 7], "replaceFirst": ["Matcher", 6], "appendReplacement": ["Matcher", 4], "replaceAll": ["Matcher", 6], "find": ["Matcher", 33], "end": ["Matcher", 8], "appendTail": ["Matcher", 4], "start": ["Matcher", 9], "lookingAt": ["Matcher", 12], "group": ["Matcher", 15], "groupCount": ["Matcher", 2], "matches": ["Pattern", 10], "matcher": ["Pattern", 8], "compile": ["Pattern", 5], "split": ["Pattern", 16]}
Strings	Scanning input	{"java.io": 2, "java.util": 4, "java.util.regex": 1}	{"InputStream": 1, "File": 1, "BufferedReader": 5, "StringReader": 2, "Scanner": 13, "MatchResult": 1, "Pattern": 1}	{"read": ["StringReader", 1], "toString": ["Pattern", 1], "readLine": ["BufferedReader", 4], "nextDouble": ["Scanner", 1], "hasNextInt": ["Scanner", 1], "hasNext": ["Scanner", 1], "ioException": ["Scanner", 1], "nextLine": ["Scanner", 1], "delimiter": ["Scanner", 1], "useDelimiter": ["Scanner", 1], "nextInt": ["Scanner", 2], "next": ["Scanner", 3], "match": ["Scanner", 2], "group": ["MatchResult", 2], "split": ["Pattern", 1]}
Strings	Immutable Strings	{}	{}	{}
Strings	Operations on Strings	{}	{}	{}
Enumerated Types	Random selection	{"java.util": 1}	{"Random": 2}	{"next": ["Random", 1]}
Enumerated Types	Basic enum features	{"java.lang": 1}	{"String": 5, "System": 3, "Enum": 5, "Comparable": 1}	{"equals": ["Enum", 1], "valueOf": ["Enum", 1], "toString": ["Enum", 2], "hashCode": ["Enum", 1], "compareTo": ["Comparable", 1], "getDeclaringClass": ["Enum", 2], "name": ["Enum", 2], "ordinal": ["Enum", 2]}
Enumerated Types	Implements, not inherits	{"java.lang": 1, "java.util": 1}	{"String": 1, "System": 1, "Enum": 1, "Random": 2}	{"next": ["Random", 3]}
Enumerated Types	Summary	{}	{}	{}
Enumerated Types	enums in switch statements	{}	{}	{}
Enumerated Types	Using EnumSet instead of flags	{"java.util": 2}	{"HashSet": 1, "EnumSet": 17, "Set": 1}	{"add": ["Set", 1], "range": ["EnumSet", 1], "complementOf": ["EnumSet", 1], "of": ["Set", 6]}
Enumerated Types	The mystery of values()	{"java.io": 1, "java.lang": 8, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 1}	{"Integer": 2, "Object": 2, "String": 9, "System": 3, "Enum": 20, "NullPointerException": 1, "Class": 5, "Comparable": 1, "Type": 1, "Method": 1, "TreeSet": 1, "Set": 5}	{"valueOf": ["Enum", 2], "getClass": ["Object", 1], "getGenericInterfaces": ["Class", 1], "getName": ["Method", 1], "getSuperclass": ["Class", 1], "getMethods": ["Class", 1], "getEnumConstants": ["Class", 4], "removeAll": ["Set", 4], "containsAll": ["Set", 3]}
Enumerated Types	Adding methods to an enum	{}	{}	{}
Enumerated Types	Multiple dispatching	{"java.util": 2}	{"EnumMap": 11, "Random": 2}	{"get": ["EnumMap", 3], "values": ["EnumMap", 1], "nextInt": ["Random", 1]}
Enumerated Types	Enumerated Types	{}	{}	{}
Enumerated Types	Constant-specific methods	{"java.lang": 1, "java.text": 1, "java.util": 5}	{"Iterable": 3, "String": 14, "System": 3, "Enum": 2, "DateFormat": 1, "EnumMap": 5, "Iterator": 3, "Date": 1, "List": 1, "EnumSet": 3, "Random": 2}	{"iterator": ["List", 2], "trim": ["String", 1], "toString": ["Date", 4], "getDateInstance": ["DateFormat", 1], "get": ["List", 1], "values": ["EnumMap", 5], "put": ["EnumMap", 6], "remove": ["List", 1], "hasNext": ["Iterator", 2], "next": ["Random", 15], "add": ["List", 3]}
Enumerated Types	Using interfaces for organization	{}	{}	{}
Enumerated Types	Using EnumMap	{"java.lang": 1, "java.util": 1}	{"String": 1, "NullPointerException": 1, "EnumMap": 7, "Map.Entry": 1, "EnumSet": 1, "Map": 3}	{"entrySet": ["Map", 1], "get": ["Map", 1], "put": ["Map", 2], "getValue": ["Map.Entry", 1], "getKey": ["Map.Entry", 1]}
IO	File reading & writing utilities	{"java.io": 3, "java.util": 2}	{"BufferedWriter": 1, "BufferedInputStream": 2, "PrintWriter": 6, "FileInputStream": 1, "File": 7, "BufferedReader": 3, "Arrays": 2, "Scanner": 1, "TreeSet": 3, "ArrayList": 5, "Map": 3}	{"close": ["Scanner", 5], "write": ["PrintWriter", 4], "read": ["BufferedReader", 8], "available": ["FileInputStream", 2], "append": ["PrintWriter", 1], "print": ["PrintWriter", 1], "println": ["PrintWriter", 1], "getAbsoluteFile": ["File", 4], "toString": ["Scanner", 1], "readLine": ["BufferedReader", 1]}
IO	Process control	{"java.io": 1, "java.lang": 3}	{"InputStream": 1, "BufferedReader": 4, "InputStreamReader": 2, "Object": 1, "ProcessBuilder": 3, "String": 6, "System": 2, "Process": 1}	{"readLine": ["BufferedReader", 3], "start": ["ProcessBuilder", 1], "command": ["ProcessBuilder", 3], "getInputStream": ["Process", 2], "getErrorStream": ["Process", 2]}
IO	Off by itself: RandomAccessFile	{}	{}	{}
IO	New IO	{"java.io": 8, "java.nio": 26, "java.nio.channels": 9, "java.nio.charset": 3, "java.util": 3, "java.util.concurrent": 1}	{"FileOutputStream": 12, "DataInputStream": 2, "Writer": 1, "BufferedInputStream": 1, "RandomAccessFile": 11, "BufferedOutputStream": 1, "FileInputStream": 9, "DataOutputStream": 2, "File": 8, "Reader": 1, "MappedByteBuffer": 4, "ByteBuffer": 81, "LongBuffer": 1, "ByteOrder": 4, "ShortBuffer": 2, "Buffer": 16, "DoubleBuffer": 1, "IntBuffer": 7, "CharBuffer": 16, "FloatBuffer": 1, "Channels": 1, "FileChannel": 21, "FileChannel.MapMode": 5, "ServerSocketChannel": 1, "FileLock": 6, "DatagramChannel": 1, "SocketChannel": 1, "Charset": 7, "Iterator": 2, "Arrays": 3, "SortedMap": 1, "TimeUnit": 1}	{"close": ["FileLock", 12], "write": ["SocketChannel", 4], "getChannel": ["FileInputStream", 21], "read": ["SocketChannel", 11], "readInt": ["RandomAccessFile", 2], "mark": ["FloatBuffer", 3], "reset": ["FloatBuffer", 2], "length": ["CharBuffer", 1], "writeInt": ["DataOutputStream", 2], "size": ["FileLock", 6], "toString": ["Arrays", 2], "transferTo": ["FileChannel", 2], "limit": ["FloatBuffer", 6], "rewind": ["FloatBuffer", 23], "clear": ["FloatBuffer", 6], "slice": ["FloatBuffer", 2], "flip": ["FloatBuffer", 9], "position": ["FileLock", 11], "asIntBuffer": ["ByteBuffer", 6], "getFloat": ["ByteBuffer", 1], "allocate": ["FloatBuffer", 9], "asCharBuffer": ["ByteBuffer", 13], "asFloatBuffer": ["ByteBuffer", 2], "getChar": ["ByteBuffer", 1], "wrap": ["FloatBuffer", 3], "getDouble": ["ByteBuffer", 1], "asLongBuffer": ["ByteBuffer", 2], "put": ["FloatBuffer", 19], "getInt": ["ByteBuffer", 1], "array": ["FloatBuffer", 5], "order": ["FloatBuffer", 1], "allocateDirect": ["ByteBuffer", 2], "getShort": ["ByteBuffer", 1], "get": ["FloatBuffer", 23], "asShortBuffer": ["ByteBuffer", 4], "getLong": ["ByteBuffer", 1], "asDoubleBuffer": ["ByteBuffer", 2], "hasRemaining": ["Buffer", 12], "remaining": ["Buffer", 1], "capacity": ["Buffer", 1], "tryLock": ["FileChannel", 4], "map": ["FileChannel", 1], "transferFrom": ["FileChannel", 1], "lock": ["FileChannel", 7], "release": ["FileLock", 4], "isShared": ["FileLock", 1], "aliases": ["Charset", 1], "forName": ["Charset", 2], "encode": ["Charset", 1], "availableCharsets": ["Charset", 1], "decode": ["Charset", 2], "hasNext": ["Iterator", 4], "next": ["Iterator", 2], "keySet": ["SortedMap", 1]}
IO	Readers & Writers	{"java.util": 1, "java.util.zip": 1}	{}	{}
IO	Standard IO	{"java.io": 3}	{"InputStream": 2, "OutputStream": 2, "FileOutputStream": 1, "BufferedInputStream": 2, "PrintWriter": 7, "BufferedOutputStream": 1, "FileInputStream": 1, "Reader": 1, "BufferedReader": 5, "PrintStream": 8, "InputStreamReader": 3}	{"close": ["InputStreamReader", 1], "println": ["PrintStream", 2], "readLine": ["BufferedReader", 4]}
IO	Summary	{}	{}	{}
IO	Adding attributes and useful interfaces	{}	{}	{}
IO	IO	{}	{}	{}
IO	Compression	{"java.io": 2, "java.util": 3, "java.util.zip": 2}	{"InputStream": 2, "OutputStream": 4, "FileOutputStream": 3, "Writer": 3, "BufferedInputStream": 2, "BufferedOutputStream": 4, "FileInputStream": 3, "File": 1, "Reader": 3, "BufferedReader": 6, "InputStreamReader": 2, "Enumeration": 2, "Adler32": 5, "ZipFile": 3, "ZipEntry": 9, "CRC32": 2, "CheckedInputStream": 5, "CheckedOutputStream": 5, "GZIPOutputStream": 4, "DeflaterOutputStream": 3, "ZipOutputStream": 4, "Checksum": 7, "ZipInputStream": 6, "InflaterInputStream": 3, "GZIPInputStream": 4}	{"read": ["GZIPInputStream", 3], "close": ["GZIPInputStream", 5], "flush": ["DeflaterOutputStream", 1], "write": ["ZipOutputStream", 3], "readLine": ["BufferedReader", 1], "nextElement": ["Enumeration", 1], "hasMoreElements": ["Enumeration", 1], "getValue": ["Checksum", 2], "getComment": ["ZipEntry", 1], "entries": ["ZipFile", 2], "setComment": ["ZipOutputStream", 1], "getChecksum": ["CheckedOutputStream", 2], "putNextEntry": ["ZipOutputStream", 1], "getNextEntry": ["ZipInputStream", 2]}
IO	Typical uses of IO streams	{"java.io": 8}	{"InputStream": 4, "ByteArrayInputStream": 3, "OutputStream": 1, "FileOutputStream": 1, "BufferedWriter": 2, "DataInputStream": 17, "PipedOutputStream": 1, "BufferedInputStream": 2, "RandomAccessFile": 14, "PrintWriter": 7, "LineNumberReader": 2, "PipedReader": 1, "BufferedOutputStream": 1, "FileInputStream": 2, "DataOutputStream": 10, "PipedInputStream": 1, "File": 1, "Reader": 1, "BufferedReader": 8, "DataInput": 2, "DataOutput": 2, "PipedWriter": 1, "StringReader": 5}	{"read": ["StringReader", 7], "available": ["PipedInputStream", 3], "close": ["StringReader", 10], "readLine": ["DataInput", 7], "readByte": ["DataInput", 3], "readDouble": ["DataInput", 4], "readUTF": ["DataInput", 7], "writeDouble": ["DataOutput", 1], "seek": ["RandomAccessFile", 2], "writeUTF": ["DataOutput", 4], "toString": ["File", 1]}
IO	XML	{"java.io": 1, "java.util": 2}	{"OutputStream": 1, "FileOutputStream": 1, "BufferedOutputStream": 1, "Arrays": 1, "List": 2, "ArrayList": 1, "Map": 1}	{"flush": ["BufferedOutputStream", 1], "write": ["BufferedOutputStream", 1], "toString": ["Arrays", 1], "size": ["Map", 2], "get": ["Map", 2]}
IO	The File class	{"java.io": 7, "java.util": 10, "java.util.regex": 4}	{"File": 68, "FilenameFilter": 16, "Iterator": 1, "Comparator": 1, "Arrays": 6, "List": 6, "ArrayList": 2, "Collection": 3, "Pattern": 8}	{"length": ["File", 1], "renameTo": ["File", 2], "isFile": ["File", 1], "listFiles": ["File", 2], "canWrite": ["File", 1], "exists": ["File", 1], "canRead": ["File", 1], "getCanonicalFile": ["File", 2], "getName": ["File", 3], "list": ["File", 16], "getAbsolutePath": ["File", 2], "toString": ["Pattern", 4], "mkdirs": ["File", 2], "delete": ["File", 1], "lastModified": ["File", 1], "getParent": ["File", 1], "isDirectory": ["File", 3], "getPath": ["File", 1], "accept": ["FilenameFilter", 12], "asList": ["Arrays", 2], "sort": ["List", 1], "add": ["Collection", 2], "addAll": ["Collection", 1], "iterator": ["Collection", 2], "size": ["Collection", 3], "matcher": ["Pattern", 3], "compile": ["Pattern", 3], "matches": ["Pattern", 5]}
IO	Object serialization	{"java.io": 11, "java.util": 6, "java.util.concurrent": 1}	{"InputStream": 3, "ByteArrayInputStream": 4, "OutputStream": 3, "FileOutputStream": 6, "ObjectInputStream": 24, "ObjectOutput": 4, "ObjectInput": 3, "DataInputStream": 1, "ObjectOutputStream": 30, "Externalizable": 17, "FileInputStream": 6, "DataOutputStream": 2, "File": 1, "ByteArrayOutputStream": 8, "Date": 3, "List": 12, "ArrayList": 5, "Set": 1, "Random": 4, "TimeUnit": 1}	{"close": ["ByteArrayOutputStream", 4], "flush": ["DataOutputStream", 1], "defaultReadObject": ["ObjectInputStream", 3], "readInt": ["DataInputStream", 2], "readObject": ["ObjectInput", 29], "writeObject": ["ObjectOutputStream", 34], "writeInt": ["DataOutputStream", 2], "defaultWriteObject": ["ObjectOutputStream", 5], "writeExternal": ["Externalizable", 7], "readExternal": ["Externalizable", 8], "toString": ["Date", 11], "toByteArray": ["ByteArrayOutputStream", 4], "get": ["ArrayList", 1], "sleep": ["TimeUnit", 1]}
IO	Input and output	{}	{}	{}
IO	Preferences	{"java.util": 1, "java.util.prefs": 1}	{"Preferences": 8}	{"systemNodeForPackage": ["Preferences", 1], "userNodeForPackage": ["Preferences", 1], "keys": ["Preferences", 3], "get": ["Preferences", 2]}
Type Information	The need for RTTI	{"java.util": 1}	{"Arrays": 1, "List": 3}	{"toString": ["Arrays", 8]}
Type Information	Summary	{}	{}	{}
Type Information	Registered factories	{"java.util": 1}	{"Collections": 2, "List": 4, "ArrayList": 1, "Random": 2}	{"addAll": ["ArrayList", 2], "add": ["ArrayList", 1], "size": ["ArrayList", 1], "get": ["ArrayList", 1]}
Type Information	instanceof vs. Class equivalence	{}	{}	{}
Type Information	The Class object	{"java.util": 2}	{"List": 3, "ArrayList": 1, "Random": 2}	{}
Type Information	Interfaces and type information	{"java.lang": 3, "java.lang.ref": 2, "java.lang.reflect": 2}	{"Object": 2, "String": 9, "System": 11, "Field": 1, "Method": 2}	{"getClass": ["Object", 8], "toString": ["Method", 1], "setInt": ["Field", 1], "getName": ["Method", 4], "setAccessible": ["Method", 5], "getInt": ["Field", 3], "get": ["Field", 6], "invoke": ["Method", 1]}
Type Information	Type Information	{}	{}	{}
Type Information	Reflection: runtime class information	{"java.lang": 4, "java.lang.ref": 2, "java.lang.reflect": 2, "java.util": 1, "java.util.regex": 1}	{"Object": 1, "String": 7, "System": 1, "Class": 10, "ClassNotFoundException": 1, "Field": 2, "Constructor": 5, "Method": 7, "Member": 1, "Objects": 1, "Pattern": 2}	{"hashCode": ["Objects", 1], "equals": ["Objects", 1], "notify": ["Object", 1], "getClass": ["Object", 1], "notifyAll": ["Object", 1], "wait": ["Object", 3], "toString": ["Pattern", 8], "indexOf": ["String", 1], "forName": ["Class", 1], "getConstructors": ["Class", 3], "getFields": ["Class", 1], "getMethods": ["Class", 3], "set": ["Field", 1], "get": ["Field", 1], "invoke": ["Method", 1]}
Type Information	Dynamic proxies	{"java.lang": 4, "java.lang.ref": 2, "java.lang.reflect": 2}	{"Throwable": 2, "Object": 12, "String": 9, "System": 2, "Class": 2, "Proxy": 9, "Method": 3, "InvocationHandler": 3}	{"getClass": ["Object", 1], "getName": ["Method", 1], "getClassLoader": ["Class", 2], "newProxyInstance": ["Proxy", 1], "invoke": ["InvocationHandler", 6]}
Type Information	Null Objects	{"java.lang": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 4}	{"Throwable": 1, "Object": 21, "String": 36, "System": 8, "NullPointerException": 2, "Class": 3, "Proxy": 1, "Method": 1, "InvocationHandler": 1, "Iterator": 1, "Arrays": 1, "Collections": 1, "List": 4, "ArrayList": 1, "Objects": 10}	{"toString": ["Objects", 4], "equals": ["Objects", 3], "getSimpleName": ["Class", 1], "getClassLoader": ["Class", 1], "invoke": ["InvocationHandler", 1], "emptyList": ["Collections", 1], "add": ["ArrayList", 2], "isNull": ["Objects", 1]}
Type Information	Checking before a cast	{"java.util": 7}	{"Arrays": 1, "Collections": 2, "Map.Entry": 3, "HashMap": 2, "List": 17, "LinkedHashMap": 1, "ArrayList": 5, "Random": 2, "Map": 10}	{"toString": ["Arrays", 7], "getValue": ["Map.Entry", 3], "getKey": ["Map.Entry", 4], "entrySet": ["Map", 3], "get": ["Map", 3], "size": ["Map", 2], "put": ["Map", 1], "subList": ["ArrayList", 1]}
Interfaces	Nesting interfaces	{}	{}	{}
Interfaces	Fields in interfaces	{"java.util": 1}	{"Random": 2}	{"nextDouble": ["Random", 1], "nextLong": ["Random", 2]}
Interfaces	Extending an interface with inheritance	{}	{}	{}
Interfaces	“Multiple inheritance” in Java	{}	{}	{}
Interfaces	Summary	{}	{}	{}
Interfaces	Abstract classes and methods	{}	{}	{}
Interfaces	Interfaces	{}	{}	{}
Interfaces	Complete decoupling	{"java.util": 1}	{"Arrays": 1}	{"toString": ["Arrays", 1]}
Interfaces	Interfaces and factories	{}	{}	{}
Interfaces	Adapting to an interface	{"java.nio": 1, "java.util": 2}	{"CharBuffer": 3, "Scanner": 9, "Random": 4}	{"read": ["CharBuffer", 3], "nextDouble": ["Random", 1], "hasNext": ["Scanner", 1], "next": ["Random", 3]}
Annotations	Writing annotation processors	{"java.lang": 8, "java.lang.annotation": 6, "java.lang.ref": 2, "java.lang.reflect": 2, "java.util": 2}	{"Integer": 6, "String": 27, "System": 6, "StringBuilder": 2, "Class": 6, "ElementType": 8, "RetentionPolicy": 5, "Annotation": 2, "Field": 2, "AnnotatedElement": 1, "Method": 2, "Member": 6, "Arrays": 1, "Collections": 1, "List": 3, "ArrayList": 2}	{"toString": ["Arrays", 1], "length": ["StringBuilder", 4], "toUpperCase": ["String", 3], "getDeclaredFields": ["Class", 1], "forName": ["Class", 2], "getDeclaredAnnotations": ["Method", 3], "getName": ["Member", 3], "getAnnotation": ["Method", 1], "getDeclaredMethods": ["Class", 2]}
Annotations	Using the Visitor pattern with apt	{"java.util": 1}	{"Arrays": 1, "Collections": 1, "Set": 1, "Collection": 2}	{"emptySet": ["Collections", 1]}
Annotations	Summary	{}	{}	{}
Annotations	Annotation-based unit testing	{"java.io": 6, "java.lang": 7, "java.lang.annotation": 3, "java.lang.ref": 3, "java.lang.reflect": 3, "java.util": 7}	{"ByteArrayInputStream": 1, "FileOutputStream": 1, "DataInputStream": 2, "PrintWriter": 2, "FileInputStream": 1, "DataOutputStream": 1, "File": 4, "Integer": 5, "ClassLoader": 1, "Object": 2, "Character": 3, "String": 48, "System": 7, "StringBuilder": 2, "Class": 5, "Boolean": 1, "ElementType": 4, "RetentionPolicy": 3, "Annotation": 1, "Modifier": 3, "InvocationTargetException": 1, "Method": 12, "Iterator": 1, "Arrays": 1, "HashSet": 3, "Collections": 1, "HashMap": 3, "List": 3, "ArrayList": 3, "LinkedList": 3, "Random": 4, "Map": 2}	{"read": ["FileInputStream", 5], "close": ["FileInputStream", 1], "readLong": ["DataInputStream", 1], "readInt": ["DataInputStream", 2], "readShort": ["DataInputStream", 9], "append": ["StringBuilder", 1], "print": ["PrintWriter", 2], "size": ["Map", 1], "equals": ["Map", 1], "getName": ["Method", 6], "toString": ["Arrays", 2], "getSystemClassLoader": ["ClassLoader", 1], "setDefaultAssertionStatus": ["ClassLoader", 1], "contains": ["LinkedList", 1], "isEmpty": ["Map", 2], "split": ["String", 1], "toCharArray": ["String", 1], "exit": ["System", 1], "getDeclaredConstructor": ["Class", 1], "forName": ["Class", 3], "getModifiers": ["Method", 3], "getAnnotations": ["Class", 1], "newInstance": ["Class", 1], "getTypeName": ["Class", 1], "getDeclaredMethods": ["Class", 3], "getCause": ["InvocationTargetException", 1], "getParameterTypes": ["Method", 2], "setAccessible": ["Method", 3], "getReturnType": ["Method", 5], "invoke": ["Method", 4], "remove": ["Map", 1], "hasNext": ["Iterator", 1], "next": ["Random", 1], "add": ["LinkedList", 2], "iterator": ["ArrayList", 1], "shuffle": ["Collections", 1], "get": ["Map", 2], "put": ["Map", 2], "pop": ["LinkedList", 4], "removeFirst": ["LinkedList", 1], "push": ["LinkedList", 2], "getFirst": ["LinkedList", 1], "addFirst": ["LinkedList", 1]}
Annotations	Annotations	{"java.lang": 1}	{}	{}
Annotations	Basic syntax	{"java.lang": 2, "java.lang.annotation": 2, "java.util": 1}	{"Package": 1, "String": 6, "System": 1, "StringBuilder": 1, "Class": 1, "ElementType": 3, "RetentionPolicy": 3, "List": 1}	{"toString": ["Class", 1], "contains": ["List", 1], "reverse": ["StringBuilder", 1]}
Annotations	Using apt to process annotations	{"java.io": 1, "java.lang": 1, "java.lang.annotation": 1, "java.util": 2}	{"PrintWriter": 3, "File": 1, "String": 5, "System": 1, "ElementType": 1, "RetentionPolicy": 2, "Annotation": 1, "Collections": 2, "ArrayList": 3, "Set": 2, "Collection": 2}	{"print": ["PrintWriter", 1], "println": ["PrintWriter", 2], "close": ["PrintWriter", 1], "emptySet": ["Collections", 1], "add": ["Collection", 5], "size": ["Collection", 2]}
Operators	Java has no “sizeof”	{}	{}	{}
Operators	Relational operators	{}	{}	{}
Operators	Common pitfalls when using operators	{}	{}	{}
Operators	Summary	{}	{}	{}
Operators	Simpler print statements	{"java.util": 1}	{"Date": 1}	{}
Operators	A compendium of operators	{}	{}	{}
Operators	String operator + and +=	{}	{}	{}
Operators	Using Java operators	{}	{}	{}
Operators	Assignment	{}	{}	{}
Operators	Literals	{}	{}	{}
Operators	Bitwise operators	{}	{}	{}
Operators	Logical operators	{"java.util": 1}	{"Random": 2}	{}
Operators	Operators	{}	{}	{}
Operators	Mathematical operators	{"java.util": 1}	{"Random": 6}	{"nextDouble": ["Random", 1], "nextLong": ["Random", 1], "nextFloat": ["Random", 3], "nextInt": ["Random", 2]}
Operators	Auto increment and decrement	{}	{}	{}
Operators	Ternary if-else operator	{}	{}	{}
Operators	Precedence	{}	{}	{}
Operators	Casting operators	{"java.lang": 2}	{"String": 3, "Class": 1, "Math": 13}	{"round": ["Math", 14]}
Operators	Shift operators	{"java.util": 1}	{"Random": 2}	{"nextLong": ["Random", 2], "nextInt": ["Random", 2]}
Introduction to Objects	Reusing the implementation	{}	{}	{}
Introduction to Objects	The progress of abstraction	{}	{}	{}
Introduction to Objects	An object has an interface	{}	{}	{}
Introduction to Objects	Summary	{}	{}	{}
Introduction to Objects	An object provides services	{}	{}	{}
Introduction to Objects	Inheritance	{}	{}	{}
Introduction to Objects	The hidden implementation	{}	{}	{}
Introduction to Objects	Concurrent programming	{}	{}	{}
Introduction to Objects	Object creation & lifetime	{}	{}	{}
Introduction to Objects	The singly rooted hierarchy	{}	{}	{}
Introduction to Objects	Introduction to Objects	{}	{}	{}
Introduction to Objects	Containers	{}	{}	{}
Introduction to Objects	Exception handling: dealing with errors	{}	{}	{}
Introduction to Objects	Java and the Internet	{}	{}	{}
Introduction to Objects	Interchangeable objects with polymorphism	{}	{}	{}
Access Control	Java access specifiers	{}	{}	{}
Access Control	Summary	{}	{}	{}
Access Control	Interface and implementation	{}	{}	{}
Access Control	Class access	{}	{}	{}
Access Control	Access Control	{}	{}	{}
Access Control	package: the library unit	{"java.io": 1, "java.util": 15}	{"PrintStream": 1, "Stack": 2, "List": 9, "ArrayList": 9, "Vector": 18}	{"print": ["PrintStream", 5], "println": ["PrintStream", 3], "printf": ["PrintStream", 2]}
Inner Classes	Can inner classes be overridden?	{}	{}	{}
Inner Classes	Inheriting from inner classes	{}	{}	{}
Inner Classes	Creating inner classes	{}	{}	{}
Inner Classes	Inner classes in methods and scopes	{}	{}	{}
Inner Classes	Local inner classes	{}	{}	{}
Inner Classes	Summary	{}	{}	{}
Inner Classes	Anonymous inner classes	{}	{}	{}
Inner Classes	Nested classes	{}	{}	{}
Inner Classes	The link to the outer class	{}	{}	{}
Inner Classes	Inner classes and upcasting	{}	{}	{}
Inner Classes	Using .this and .new	{}	{}	{}
Inner Classes	Why inner classes?	{"java.util": 2}	{"List": 7, "ArrayList": 2, "Objects": 1}	{"add": ["ArrayList", 2], "remove": ["ArrayList", 2], "size": ["ArrayList", 2], "toString": ["Objects", 10]}
Inner Classes	Inner Classes	{}	{}	{}
Inner Classes	Inner-class identifiers	{}	{}	{}
Generics	Wildcards	{"java.lang": 3, "java.util": 7}	{"Integer": 5, "Object": 37, "String": 19, "Double": 2, "System": 5, "Compiler": 2, "Long": 28, "Runtime": 1, "Arrays": 3, "HashMap": 7, "List": 67, "ArrayList": 14, "Objects": 1, "Collection": 1, "Map": 9}	{"equals": ["Map", 5], "getClass": ["Object", 1], "contains": ["Collection", 3], "indexOf": ["ArrayList", 3], "get": ["Map", 21], "add": ["Collection", 5], "set": ["ArrayList", 18]}
Generics	Comparison with C++	{}	{}	{}
Generics	Summary: Is casting really so bad?	{}	{}	{}
Generics	Exceptions	{"java.util": 1}	{"List": 6, "ArrayList": 2}	{"add": ["ArrayList", 2]}
Generics	Generic methods	{"java.lang": 6, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 11}	{"Integer": 9, "Object": 3, "Character": 1, "String": 32, "Double": 2, "System": 18, "Float": 1, "Class": 9, "Type": 2, "Method": 1, "Arrays": 1, "HashSet": 8, "HashMap": 4, "TreeSet": 2, "List": 19, "TreeMap": 1, "LinkedHashMap": 1, "ArrayList": 6, "EnumSet": 7, "Set": 36, "LinkedHashSet": 1, "Objects": 2, "LinkedList": 6, "Collection": 13, "SortedMap": 1, "Map": 13, "PriorityQueue": 1, "Queue": 5}	{"toString": ["Objects", 2], "clone": ["LinkedList", 3], "getClass": ["Object", 1], "getName": ["Method", 2], "getSimpleName": ["Class", 4], "getInterfaces": ["Class", 1], "newInstance": ["Class", 1], "getMethods": ["Class", 1], "fill": ["Arrays", 2], "asList": ["Arrays", 1], "add": ["Queue", 1], "addAll": ["Collection", 1], "set": ["LinkedList", 2], "retainAll": ["PriorityQueue", 1], "removeAll": ["PriorityQueue", 2], "range": ["EnumSet", 3]}
Generics	Dynamic type safety	{"java.lang": 1, "java.util": 2}	{"String": 1, "System": 1, "Collections": 3, "List": 5, "ArrayList": 3, "Collection": 1}	{"checkedSet": ["Collections", 1], "checkedSortedSet": ["Collections", 1], "checkedSortedMap": ["Collections", 1], "checkedCollection": ["Collections", 1], "checkedMap": ["Collections", 1], "checkedList": ["Collections", 2]}
Generics	Generic interfaces	{"java.util": 2}	{"Iterator": 4, "Random": 2}	{"remove": ["Iterator", 2], "hasNext": ["Iterator", 3], "next": ["Random", 12]}
Generics	Mixins	{"java.lang": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 3}	{"Throwable": 1, "ClassLoader": 1, "Object": 10, "String": 17, "System": 5, "Class": 5, "Proxy": 1, "Type": 1, "Method": 2, "InvocationHandler": 1, "Date": 2, "HashMap": 1, "Map": 1}	{"getName": ["Method", 2], "getClass": ["Object", 1], "getMethods": ["Class", 1], "getClassLoader": ["Class", 1], "invoke": ["InvocationHandler", 1], "getTime": ["Date", 2], "containsKey": ["Map", 1], "get": ["Map", 9]}
Generics	Compensating for the lack of latent typing	{"java.lang": 2, "java.lang.ref": 2, "java.lang.reflect": 2, "java.util": 4}	{"Iterable": 8, "Object": 3, "String": 6, "System": 1, "Class": 4, "Method": 3, "Iterator": 1, "List": 5, "ArrayList": 5, "LinkedList": 2, "Collection": 18}	{"iterator": ["Collection", 2], "getClass": ["Object", 2], "toString": ["Method", 3], "getName": ["Method", 1], "newInstance": ["Class", 3], "invoke": ["Method", 3], "next": ["Iterator", 1], "add": ["Collection", 10], "size": ["Collection", 1], "get": ["LinkedList", 1], "poll": ["LinkedList", 1], "offer": ["LinkedList", 1]}
Generics	Latent typing	{}	{}	{}
Generics	Anonymous inner classes	{"java.util": 1}	{"List": 1, "ArrayList": 1, "LinkedList": 1, "Random": 2, "Queue": 1}	{"size": ["LinkedList", 1], "next": ["Random", 2]}
Generics	Simple generics	{"java.util": 1}	{"Stack": 3, "ArrayList": 2, "Objects": 2, "LinkedList": 4, "Random": 2}	{"pop": ["LinkedList", 4], "push": ["LinkedList", 3], "add": ["LinkedList", 3], "set": ["LinkedList", 4], "size": ["LinkedList", 1], "get": ["LinkedList", 7], "toString": ["Objects", 5], "getFirst": ["LinkedList", 1]}
Generics	Building complex models	{"java.util": 2}	{"List": 1, "ArrayList": 6, "Random": 2}	{"nextDouble": ["Random", 1], "next": ["Random", 1]}
Generics	The mystery of erasure	{"java.lang": 7, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 5}	{"Integer": 7, "Object": 19, "String": 34, "Double": 2, "System": 8, "Long": 2, "Class": 7, "Array": 6, "TypeVariable": 1, "Field": 4, "Method": 6, "Arrays": 5, "HashMap": 1, "List": 14, "ArrayList": 11, "Map": 1}	{"toString": ["Arrays", 1], "getClass": ["Object", 6], "newInstance": ["Array", 3], "getTypeParameters": ["Method", 5], "set": ["ArrayList", 9], "get": ["Map", 14], "add": ["ArrayList", 1]}
Generics	Using function objects as strategies	{"java.math": 1, "java.util": 2, "java.util.concurrent": 1, "java.util.concurrent.atomic": 1}	{"BigInteger": 10, "MathContext": 2, "BigDecimal": 15, "Iterator": 1, "Arrays": 3, "List": 9, "ArrayList": 3, "AtomicLong": 11}	{"add": ["ArrayList", 4], "valueOf": ["BigDecimal", 1], "isProbablePrime": ["BigInteger", 1], "or": ["BigInteger", 5], "nextProbablePrime": ["BigInteger", 1], "compareTo": ["BigDecimal", 1], "ulp": ["BigDecimal", 1], "hasNext": ["Iterator", 2], "next": ["Iterator", 2], "asList": ["Arrays", 1], "iterator": ["ArrayList", 1], "get": ["AtomicLong", 1], "forEach": ["ArrayList", 1]}
Generics	Self-bounded types	{}	{}	{}
Generics	Generics	{}	{}	{}
Generics	Bounds	{"java.util": 1, "java.awt": 6}	{"List": 2, "Dimension": 7, "Color": 6}	{"getItem": ["List", 4], "getColor": ["Color", 6]}
Generics	Issues	{"java.io": 2, "java.lang": 1, "java.util": 6}	{"ObjectInputStream": 4, "FileInputStream": 2, "Integer": 10, "Object": 6, "String": 13, "Byte": 6, "System": 4, "Comparable": 8, "Arrays": 3, "HashSet": 2, "List": 18, "ArrayList": 4, "Set": 3, "Objects": 1}	{"readObject": ["ObjectInputStream", 7], "compareTo": ["Comparable", 4], "fill": ["Arrays", 1], "asList": ["Arrays", 2], "add": ["Set", 1], "set": ["ArrayList", 1], "get": ["ArrayList", 1]}
Generics	Compensating for erasure	{"java.lang": 5, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 1}	{"Integer": 30, "Object": 23, "String": 11, "Double": 1, "System": 9, "Class": 12, "Runtime": 1, "Array": 1, "Method": 3, "Arrays": 1, "List": 1, "ArrayList": 7, "Collection": 2, "Map": 2}	{"getClass": ["Object", 2], "getSimpleName": ["Class", 2], "isInstance": ["Class", 1], "newInstance": ["Array", 3], "get": ["Map", 9], "add": ["Collection", 2], "size": ["Map", 1], "toArray": ["Collection", 1], "put": ["Map", 4]}
Controlling Execution	Foreach syntax	{"java.util": 1}	{"Arrays": 1, "Objects": 1, "Random": 2}	{"nextFloat": ["Random", 1]}
Controlling Execution	Summary	{}	{}	{}
Controlling Execution	Iteration	{"java.lang": 1}	{"Integer": 1, "Character": 2, "String": 3, "System": 5, "Boolean": 6, "Math": 2}	{"toBinaryString": ["Integer", 1], "isLowerCase": ["Character", 2], "random": ["Math", 2]}
Controlling Execution	return	{}	{}	{}
Controlling Execution	break and continue	{}	{}	{}
Controlling Execution	The infamous “goto”	{}	{}	{}
Controlling Execution	switch	{"java.util": 1}	{"Random": 4}	{"nextInt": ["Random", 4]}
Controlling Execution	if-else	{}	{}	{}
Controlling Execution	Controlling Execution	{}	{}	{}
Controlling Execution	true and false	{}	{}	{}
Concurrency	New library components	{"java.util": 19, "java.util.concurrent": 10}	{"Optional": 2, "Collections": 2, "List": 27, "ArrayList": 6, "Set": 1, "Calendar": 11, "Objects": 1, "Random": 18, "Queue": 2, "CopyOnWriteArrayList": 3, "BlockingQueue": 1, "PriorityBlockingQueue": 6, "DelayQueue": 7, "CountDownLatch": 16, "Delayed": 6, "Future": 2, "Executors": 6, "ExecutorService": 12, "ScheduledThreadPoolExecutor": 5, "TimeUnit": 12, "CyclicBarrier": 14, "Semaphore": 8, "Exchanger": 13}	{"get": ["Future", 1], "toString": ["Semaphore", 10], "synchronizedList": ["Collections", 1], "add": ["DelayQueue", 4], "indexOf": ["CopyOnWriteArrayList", 1], "remove": ["DelayQueue", 2], "getItem": ["List", 3], "clone": ["CopyOnWriteArrayList", 2], "getTime": ["Calendar", 1], "getInstance": ["Calendar", 1], "compareTo": ["Calendar", 3], "nextFloat": ["Random", 2], "nextInt": ["Random", 5], "next": ["Random", 1], "poll": ["DelayQueue", 1], "take": ["DelayQueue", 2], "countDown": ["CountDownLatch", 4], "await": ["CyclicBarrier", 5], "getDelay": ["Delayed", 3], "cancel": ["Future", 2], "newCachedThreadPool": ["Executors", 6], "shutdownNow": ["ScheduledThreadPoolExecutor", 8], "shutdown": ["ScheduledThreadPoolExecutor", 2], "schedule": ["ScheduledThreadPoolExecutor", 2], "scheduleAtFixedRate": ["ScheduledThreadPoolExecutor", 1], "execute": ["ScheduledThreadPoolExecutor", 1], "sleep": ["TimeUnit", 4], "convert": ["TimeUnit", 2], "release": ["Semaphore", 1], "acquire": ["Semaphore", 1], "exchange": ["Exchanger", 5]}
Concurrency	Performance tuning	{"java.util": 17, "java.util.concurrent": 12, "java.util.concurrent.atomic": 2, "java.util.concurrent.locks": 3}	{"Collections": 4, "HashMap": 8, "List": 5, "ArrayList": 10, "Objects": 1, "Vector": 1, "Random": 7, "Map": 5, "Hashtable": 1, "ConcurrentLinkedQueue": 1, "CopyOnWriteArrayList": 12, "CountDownLatch": 3, "ConcurrentHashMap": 11, "Executors": 4, "ExecutorService": 4, "CopyOnWriteArraySet": 2, "TimeUnit": 3, "CyclicBarrier": 3, "AtomicInteger": 6, "AtomicLong": 2, "ReentrantReadWriteLock": 3, "ReentrantLock": 3, "Lock": 48, "ReadWriteLock": 4}	{"nCopies": ["Collections", 1], "get": ["AtomicLong", 12], "set": ["AtomicLong", 4], "test": ["Vector", 10], "nextInt": ["Random", 4], "countDown": ["CountDownLatch", 1], "await": ["CyclicBarrier", 4], "newCachedThreadPool": ["Executors", 3], "shutdownNow": ["ExecutorService", 2], "shutdown": ["ExecutorService", 3], "sleep": ["TimeUnit", 2], "decrementAndGet": ["AtomicLong", 1], "getAndIncrement": ["AtomicLong", 1], "compareAndSet": ["AtomicLong", 4], "writeLock": ["ReadWriteLock", 1], "getReadLockCount": ["ReentrantReadWriteLock", 2], "readLock": ["ReadWriteLock", 1], "unlock": ["Lock", 5], "lock": ["Lock", 10]}
Concurrency	The many faces of concurrency	{}	{}	{}
Concurrency	Summary	{"java.util": 1, "java.util.concurrent": 1}	{}	{}
Concurrency	Sharing resources	{"java.lang": 1, "java.util": 21, "java.util.concurrent": 17, "java.util.concurrent.atomic": 3, "java.util.concurrent.locks": 4}	{"Integer": 4, "Thread": 14, "ThreadLocal": 6, "Object": 2, "String": 15, "System": 19, "Runnable": 8, "Class": 1, "TimerTask": 1, "Collections": 1, "List": 1, "ArrayList": 2, "Random": 2, "Timer": 4, "Executor": 1, "Executors": 6, "ExecutorService": 6, "TimeUnit": 9, "AtomicInteger": 8, "AtomicLong": 1, "AtomicReference": 1, "ReentrantLock": 6, "Lock": 16}	{"toString": ["ReentrantLock", 3], "sleep": ["TimeUnit", 1], "yield": ["Thread", 10], "setDaemon": ["Thread", 1], "currentThread": ["Thread", 1], "run": ["TimerTask", 12], "isInterrupted": ["Thread", 1], "setPriority": ["Thread", 1], "start": ["Timer", 2], "get": ["AtomicReference", 10], "set": ["AtomicReference", 2], "initialValue": ["ThreadLocal", 1], "contains": ["ArrayList", 3], "cancel": ["Timer", 4], "add": ["ArrayList", 4], "next": ["Random", 11], "execute": ["Executor", 6], "newCachedThreadPool": ["Executors", 6], "shutdownNow": ["ExecutorService", 1], "shutdown": ["ExecutorService", 1], "addAndGet": ["AtomicLong", 2], "incrementAndGet": ["AtomicLong", 1], "compareAndSet": ["AtomicReference", 1], "unlock": ["Lock", 8], "tryLock": ["Lock", 4], "lock": ["Lock", 14]}
Concurrency	Deadlock	{"java.util": 4, "java.util.concurrent": 3}	{"Random": 2, "Executors": 2, "ExecutorService": 2, "TimeUnit": 3}	{"newCachedThreadPool": ["Executors", 2], "shutdownNow": ["ExecutorService", 2], "sleep": ["TimeUnit", 2]}
Concurrency	Active objects	{"java.util": 2, "java.util.concurrent": 1}	{"List": 4, "Random": 2, "CopyOnWriteArrayList": 2, "Future": 11, "Executors": 2, "ExecutorService": 1, "Callable": 3, "TimeUnit": 1}	{"remove": ["CopyOnWriteArrayList", 1], "size": ["CopyOnWriteArrayList", 1], "get": ["Future", 1], "nextInt": ["Random", 1], "isDone": ["Future", 2], "newSingleThreadExecutor": ["Executors", 2], "submit": ["ExecutorService", 1], "shutdown": ["ExecutorService", 3], "call": ["Callable", 3], "sleep": ["TimeUnit", 1]}
Concurrency	Simulation	{"java.util": 6, "java.util.concurrent": 3}	{"HashSet": 1, "Optional": 2, "List": 2, "ArrayList": 2, "Set": 1, "LinkedList": 1, "Random": 8, "PriorityQueue": 3, "Queue": 1, "BlockingQueue": 2, "SynchronousQueue": 4, "Executors": 3, "LinkedBlockingQueue": 6, "ExecutorService": 7, "ArrayBlockingQueue": 2, "TimeUnit": 9, "CyclicBarrier": 4}	{"add": ["ArrayBlockingQueue", 7], "size": ["ArrayBlockingQueue", 10], "remove": ["ArrayBlockingQueue", 2], "equals": ["Set", 1], "or": ["Optional", 2], "toString": ["SynchronousQueue", 14], "poll": ["ArrayBlockingQueue", 1], "offer": ["ArrayBlockingQueue", 2], "take": ["ArrayBlockingQueue", 7], "put": ["ArrayBlockingQueue", 5], "newCachedThreadPool": ["Executors", 3], "shutdownNow": ["ExecutorService", 3], "sleep": ["TimeUnit", 2], "values": ["TimeUnit", 1], "await": ["CyclicBarrier", 2]}
Concurrency	Cooperation between tasks	{"java.io": 4, "java.lang": 1, "java.util": 14, "java.util.concurrent": 10, "java.util.concurrent.locks": 1}	{"Writer": 1, "PipedReader": 6, "BufferedReader": 1, "InputStreamReader": 1, "PipedWriter": 6, "Thread": 56, "Object": 2, "String": 11, "System": 9, "Runnable": 17, "TimerTask": 1, "Random": 4, "Timer": 4, "BlockingQueue": 11, "Executor": 1, "SynchronousQueue": 2, "Executors": 6, "LinkedBlockingQueue": 4, "ExecutorService": 8, "ArrayBlockingQueue": 3, "TimeUnit": 14, "Condition": 13, "ReentrantLock": 1, "Lock": 7}	{"write": ["PipedWriter", 1], "read": ["InputStreamReader", 7], "readLine": ["BufferedReader", 1], "getId": ["Thread", 2], "sleep": ["TimeUnit", 13], "yield": ["Thread", 1], "interrupt": ["Thread", 6], "interrupted": ["Thread", 16], "currentThread": ["Thread", 1], "run": ["TimerTask", 32], "toString": ["ReentrantLock", 2], "start": ["Timer", 1], "notify": ["Object", 32], "notifyAll": ["Object", 52], "wait": ["Object", 62], "exit": ["System", 1], "cancel": ["Timer", 2], "add": ["ArrayBlockingQueue", 1], "take": ["ArrayBlockingQueue", 5], "put": ["ArrayBlockingQueue", 5], "execute": ["Executor", 4], "newCachedThreadPool": ["Executors", 6], "shutdownNow": ["ExecutorService", 11], "signal": ["Condition", 3], "await": ["Condition", 5], "signalAll": ["Condition", 5], "newCondition": ["Lock", 1], "unlock": ["Lock", 4], "lock": ["Lock", 9]}
Concurrency	Basic threading	{"java.lang": 3, "java.util": 20, "java.util.concurrent": 19}	{"Throwable": 1, "Integer": 2, "Thread": 145, "String": 46, "System": 21, "Runnable": 34, "Thread.UncaughtExceptionHandler": 4, "Math": 6, "ArrayList": 2, "Executor": 11, "Future": 6, "SynchronousQueue": 1, "ThreadFactory": 7, "Executors": 25, "ExecutorService": 17, "ThreadPoolExecutor": 3, "Callable": 7, "TimeUnit": 12, "CyclicBarrier": 1}	{"toString": ["ThreadPoolExecutor", 12], "isDaemon": ["Thread", 16], "sleep": ["TimeUnit", 17], "yield": ["Thread", 15], "interrupt": ["Thread", 3], "getPriority": ["Thread", 1], "setDaemon": ["Thread", 7], "currentThread": ["Thread", 8], "run": ["Runnable", 52], "getName": ["Thread", 11], "isInterrupted": ["Thread", 4], "join": ["String", 9], "setPriority": ["Thread", 2], "getUncaughtExceptionHandler": ["Thread", 2], "start": ["Thread", 22], "isAlive": ["Thread", 1], "uncaughtException": ["Thread.UncaughtExceptionHandler", 3], "rint": ["Math", 7], "get": ["Future", 7], "isDone": ["Future", 3], "newThread": ["ThreadFactory", 2], "newSingleThreadExecutor": ["Executors", 1], "callable": ["Executors", 1], "newFixedThreadPool": ["Executors", 1], "newCachedThreadPool": ["Executors", 8], "submit": ["ExecutorService", 3], "shutdown": ["ThreadPoolExecutor", 8], "call": ["Callable", 2]}
Concurrency	Concurrency	{}	{}	{}
Concurrency	Terminating tasks	{"java.io": 4, "java.net": 3, "java.nio": 2, "java.nio.channels": 1, "java.util": 9, "java.util.concurrent": 8, "java.util.concurrent.locks": 1}	{"InputStream": 3, "BufferedInputStream": 1, "ServerSocket": 4, "InetSocketAddress": 2, "Socket": 2, "ByteBuffer": 1, "SocketChannel": 6, "List": 2, "ArrayList": 1, "Random": 3, "Executor": 3, "Future": 5, "Executors": 7, "ExecutorService": 5, "TimeUnit": 14, "ReentrantLock": 3, "Lock": 3}	{"read": ["SocketChannel", 12], "close": ["Socket", 4], "toString": ["ReentrantLock", 1], "getInputStream": ["Socket", 1], "allocate": ["ByteBuffer", 1], "get": ["Future", 1], "open": ["SocketChannel", 2], "add": ["ArrayList", 1], "nextBoolean": ["Random", 1], "execute": ["Executor", 2], "cancel": ["Future", 9], "newCachedThreadPool": ["Executors", 4], "shutdownNow": ["ExecutorService", 4], "submit": ["ExecutorService", 3], "shutdown": ["ExecutorService", 3], "awaitTermination": ["ExecutorService", 2], "sleep": ["TimeUnit", 17], "lockInterruptibly": ["Lock", 1], "lock": ["Lock", 1]}
Polymorphism	Summary	{}	{}	{}
Polymorphism	Constructors and polymorphism	{}	{}	{}
Polymorphism	Upcasting revisited	{}	{}	{}
Polymorphism	Covariant return types	{}	{}	{}
Polymorphism	The twist	{"java.util": 1}	{"Random": 2}	{"nextInt": ["Random", 1], "next": ["Random", 6]}
Polymorphism	Polymorphism	{}	{}	{}
Polymorphism	Designing with inheritance	{}	{}	{}
Everything Is an Object	Building a Java program	{"java.util": 2}	{"ArrayList": 2}	{}
Everything Is an Object	Summary	{}	{}	{}
Everything Is an Object	Coding style	{}	{}	{}
Everything Is an Object	You must create all the objects	{}	{}	{}
Everything Is an Object	Exercises	{}	{}	{}
Everything Is an Object	Methods, arguments, and return values	{}	{}	{}
Everything Is an Object	You manipulate objects with references	{}	{}	{}
Everything Is an Object	You never need to destroy an object	{}	{}	{}
Everything Is an Object	Your first Java program	{"java.lang": 5, "java.util": 3}	{"String": 6, "System": 14, "Date": 9}	{"getProperties": ["System", 1]}
Everything Is an Object	Comments and embedded documentation	{"java.util": 1}	{"Date": 2}	{}
Everything Is an Object	Everything Is an Object	{}	{}	{}
Everything Is an Object	Creating new data types: class	{}	{}	{}
Arrays	Arrays and generics	{"java.util": 1}	{"Arrays": 1, "List": 11, "ArrayList": 6}	{}
Arrays	Why arrays are special	{"java.util": 1}	{"Arrays": 4, "List": 3, "ArrayList": 6, "Objects": 2}	{"toString": ["Objects", 3], "add": ["ArrayList", 2], "get": ["ArrayList", 3]}
Arrays	Returning an array	{"java.util": 1}	{"Arrays": 1, "Set": 1, "Random": 2}	{}
Arrays	Creating test data	{"java.lang": 39, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 6}	{"Integer": 24, "Object": 2, "Character": 21, "String": 27, "Double": 12, "Byte": 11, "System": 8, "Short": 11, "Float": 12, "Long": 15, "Class": 4, "Boolean": 13, "Math": 2, "Array": 1, "Arrays": 37, "Collection": 3, "Random": 3}	{"toString": ["Arrays", 23], "toCharArray": ["String", 1], "getSimpleName": ["Class", 1], "getClasses": ["Class", 2], "newInstance": ["Array", 2], "fill": ["Arrays", 9], "toArray": ["Collection", 3], "nextBoolean": ["Random", 1], "nextDouble": ["Random", 1], "nextFloat": ["Random", 1], "nextInt": ["Random", 4], "next": ["Random", 20]}
Arrays	Summary	{}	{}	{}
Arrays	Arrays are first-class objects	{"java.util": 1}	{"Arrays": 4}	{"toString": ["Arrays", 2]}
Arrays	Multidimensional arrays	{"java.util": 7}	{"Arrays": 12, "Random": 2}	{"deepToString": ["Arrays", 11], "nextInt": ["Random", 3]}
Arrays	Arrays utilities	{"java.lang": 1, "java.util": 9}	{"Integer": 12, "Object": 4, "String": 30, "System": 10, "Comparable": 10, "Comparator": 14, "Arrays": 53, "Collections": 4, "TreeSet": 1, "List": 1, "LinkedHashSet": 1, "Objects": 4, "Random": 2}	{"equals": ["Objects", 16], "toString": ["Objects", 22], "hashCode": ["Objects", 1], "compare": ["Objects", 2], "compareTo": ["Comparable", 2], "arraycopy": ["System", 4], "reverseOrder": ["Collections", 4], "fill": ["Collections", 5], "asList": ["Arrays", 1], "binarySearch": ["Collections", 9], "deepEquals": ["Objects", 2], "sort": ["List", 8], "copy": ["Collections", 4], "size": ["List", 1], "next": ["Random", 2]}
Arrays	Arrays	{}	{}	{}
