  8.2 Defining a Simple Generic Class 8.3 Generic Methods 8.4 Bounds for Type Variables 8.5 Generic Code and the Virtual Machine 8.6 Restrictions and Limitations 8.7 Inheritance Rules for Generic Types 8.8 Wildcard Types 8.9 Reflection and Generics Generic classes and methods have type parameters. This allows them to describe precisely what should happen when they are instantiated with specific types. Prior to generic classes, programmers had to use the Object for writing code that works with multiple types. This was both cumbersome and unsafe.
  With the introduction of generics, Java has an expressive type system that allows designers to describe in detail how types of variables and methods should vary. In straightforward situations, you will find it simple to implement generic code. In more advanced cases, it can get quite complexâ€”for implemetors. The goal is to provide classes and methods that other
  programmers can use without surprises.
  The introduction of generics in Java 5 constitutes the most significant change in the Java programming language since its initial release. A major design goal was to be backwards compatible with earlier releases. As a result, Java generics have some uncomfortable limitations. You will learn about the benefits and challenges of generic programming in this chapter.
