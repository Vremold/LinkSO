  An inner class is a class that is defined inside another class. Why would you want to do that? There are two reasons: Inner classes can be hidden from other classes in the same package. 
  Inner class methods can access the data from the scope in which they are defined—including the data that would otherwise be private. 
  Inner classes used to be very important for concisely implementing callbacks, but nowadays lambda expressions do a much better job. Still, inner classes can be very useful for structuring your code. The following sections walk you through all the details. 
  class LinkedList { public: class Iterator // a nested class { public: void insert(int x); 
  int erase(); 
  . . . 
  private: Link* current; 
  LinkedList* owner; 
  }; 
  . . . 
  private: Link* head; 
  Link* tail; 
  }; 
  Nested classes are similar to inner classes in Java. However, the Java inner classes have an additional feature that makes them richer and more useful than nested classes in C++. An object that comes from an inner class has an implicit reference to the outer class object that instantiated it. Through this pointer, it gains access to the total state of the outer object. For example, in Java, the Iterator class would not need an explicit pointer to the LinkedList into which it points. 
  In Java, static inner classes do not have this added pointer. They are the Java analog to nested classes in C++. 
6.3.1 Use of an Inner Class to Access Object State
  The syntax for inner classes is rather complex. For that reason, we present a simple but somewhat artificial example to demonstrate the use of inner classes. We refactor the TimerTest example and extract a TalkingClock class. A talking clock is constructed with two parameters: the interval between announcements and a flag to turn beeps on or off. 
  public class TalkingClock {   private int interval; 
  private boolean beep; 
  public TalkingClock(int interval, boolean beep) { . . . } 
  public void start() { . . . } 
  public class TimePrinter implements ActionListener // an inner class { . . . 
  } 
  } 
  Note that the TimePrinter class is now located inside the TalkingClock class. This does not mean that every TalkingClock has a TimePrinter instance field. As you will see, the TimePrinter objects are constructed by methods of the TalkingClock class. 
  Here is the TimePrinter class in greater detail. Note that the actionPerformed method checks the beep flag before emitting a beep. 
  public class TimePrinter implements ActionListener { public void actionPerformed(ActionEvent event) { System.out.println("At the tone, the time is " 
  + Instant.ofEpochMilli(event.getWhen())); 
  if (beep) Toolkit.getDefaultToolkit().beep(); 
  } 
  } 
  Something surprising is going on. The TimePrinter class has no instance field or variable named beep. Instead, beep refers to the field of the TalkingClock object that created this TimePrinter. As you can see, an inner class method gets to access both its own data fields and those of the outer object creating it. 
  For this to work, an object of an inner class always gets an implicit reference to the object that created it (see Figure 6.3). 
  Figure 6.3 An inner class object has a reference to an outer class object. 
  This reference is invisible in the definition of the inner class. However, to illuminate the concept, let us call the reference to the outer object outer. Then the actionPerformed method is equivalent to the following: public void actionPerformed(ActionEvent event) { System.out.println("At the tone, the time is " 
  + Instant.ofEpochMilli(event.getWhen())); 
  if (outer.beep) Toolkit.getDefaultToolkit().beep(); 
  } 
  The outer class reference is set in the constructor. The compiler modifies all inner class constructors, adding a parameter for the outer class reference. The TimePrinter class defines no constructors; therefore, the compiler synthesizes a no-argument constructor, generating code like this: public TimePrinter(TalkingClock clock) // automatically generated code { outer = clock; 
  } 
  Again, please note that outer is not a Java keyword. We just use it to illustrate the mechanism involved in an inner class. 
  When a TimePrinter object is constructed in the start method, the compiler passes the this reference to the current talking clock into the constructor: var listener = new TimePrinter(this); // parameter automatically added   Listing 6.7 shows the complete program that tests the inner class. Have another look at the access control. Had the TimePrinter class been a regular class, it would have needed to access the beep flag through a public method of the TalkingClock class. Using an inner class is an improvement. There is no need to provide accessors that are of interest only to one other class. 
  Note We could have declared the TimePrinter class as private. 
  Then only TalkingClock methods would be able to construct TimePrinter objects. Only inner classes can be private. Regular classes always have either package or public access. 
6.3.2 Special Syntax Rules for Inner Classes
  In the preceding section, we explained the outer class reference of an inner class by calling it outer. Actually, the proper syntax for the outer reference is a bit more complex. The expression OuterClass.this   denotes the outer class reference. For example, you can write the actionPerformed method of the TimePrinter inner class as public void actionPerformed(ActionEvent event) { . . . 
  if (TalkingClock.this.beep) Toolkit.getDefaultToolkit().beep(); 
  } 
  Conversely, you can write the inner object constructor more explicitly, using the syntax outerObject.new InnerClass(construction parameters)   For example: ActionListener listener = this.new TimePrinter(); 
  Here, the outer class reference of the newly constructed TimePrinter object is set to the this reference of the method that creates the inner class object. This is the most common case. As always, the this. qualifier is redundant. However, it is also possible to set the outer class reference to another object by explicitly naming it. For example, since TimePrinter is a public inner class, you can construct a TimePrinter for any talking clock: var jabberer = new TalkingClock(1000, true); 
  TalkingClock.TimePrinter listener = jabberer.new TimePrinter(); 
  Note that you refer to an inner class as OuterClass.InnerClass   when it occurs outside the scope of the outer class. 
  Note Any static fields declared in an inner class must be final and initialized with a compile-time constant. If the field was not a constant, it might not be unique. 
  An inner class cannot have static methods. The Java Language Specification gives no reason for this limitation. It would have been possible to allow static methods that only access static fields and methods from the enclosing class. Apparently, the language designers decided that the complexities outweighed the benefits. 
6.3.3 Are Inner Classes Useful? Actually Necessary? Secure?
   
  When inner classes were added to the Java language in Java 1.1, many programmers considered them a major new feature that was out of character with the Java philosophy of being simpler than C++. The inner class syntax is undeniably complex. (It gets more complex as we study anonymous inner classes later in this chapter.) It is not obvious how inner classes interact with other features of the language, such as access control and security. 
  By adding a feature that was elegant and interesting rather than needed, has Java started down the road to ruin which has afflicted so many other languages? 
  While we won’t try to answer this question completely, it is worth noting that inner classes are a phenomenon of the compiler, not the virtual machine. 
  Inner classes are translated into regular class files with $ (dollar signs) delimiting outer and inner class names, and the virtual machine does not have any special knowledge about them. 
  For example, the TimePrinter class inside the TalkingClock class is translated to a class file TalkingClock$TimePrinter.class. To see this at work, try the following experiment: run the ReflectionTest program of Chapter 5, and give it the class TalkingClock$TimePrinter to reflect upon. Alternatively, simply use the javap utility: javap -private ClassName   Note If you use UNIX, remember to escape the $ character when you supply the class name on the command line. That is, run the ReflectionTest or javap program as java reflection.ReflectionTest innerClass.TalkingClock\$TimePrinter   or javap -private innerClass.TalkingClock\$TimePrinter   You will get the following printout: public class innerClass.TalkingClock$TimePrinter implements java.awt.event.ActionListener { final innerClass.TalkingClock this$0; 
  public innerClass.TalkingClock$TimePrinter(innerClass.TalkingClock); 
  public void actionPerformed(java.awt.event.ActionEvent); 
  } 
  You can plainly see that the compiler has generated an additional instance field, this$0, for the reference to the outer class. (The name this$0 is synthesized by the compiler—you cannot refer to it in your code.) You can also see the TalkingClock parameter for the constructor. 
  If the compiler can automatically do this transformation, couldn’t you simply program the same mechanism by hand? Let’s try it. We would make TimePrinter a regular class, outside the TalkingClock class. When constructing a TimePrinter object, we pass it the this reference of the object that is creating it. 
  class TalkingClock { . . . 
  public void start() { var listener = new TimePrinter(this); 
  var timer = new Timer(interval, listener); 
  timer.start(); 
  } 
  } 
  class TimePrinter implements ActionListener { private TalkingClock outer; 
  . . . 
  public TimePrinter(TalkingClock clock) { outer = clock; 
  } 
  } 
  Now let us look at the actionPerformed method. It needs to access outer.beep. 
  if (outer.beep) . . . // ERROR   Here we run into a problem. The inner class can access the private data of the outer class, but our external TimePrinter class cannot. 
  Thus, inner classes are genuinely more powerful than regular classes because they have more access privileges. 
  You may well wonder how inner classes manage to acquire those added access privileges, if they are translated to regular classes with funny names— the virtual machine knows nothing at all about them. To solve this mystery, let’s again use the ReflectionTest program to spy on the TalkingClock class:   class TalkingClock { private int interval; 
  private boolean beep; 
  public TalkingClock(int, boolean); 
  static boolean access$0(TalkingClock); 
  public void start(); 
  } 
  Notice the static access$0 method that the compiler added to the outer class. It returns the beep field of the object that is passed as a parameter. 
  (The method name might be slightly different, such as access$000, depending on your compiler.) The inner class methods call that method. The statement if (beep)   in the actionPerformed method of the TimePrinter class effectively makes the following call: if (TalkingClock.access$0(outer))   Is this a security risk? You bet it is. It is an easy matter for someone else to invoke the access$0 method to read the private beep field. Of course, access$0 is not a legal name for a Java method. However, hackers who are familiar with the structure of class files can easily produce a class file with virtual machine instructions to call that method, for example, by using a hex editor. Since the secret methods have package access, the attack code would need to be placed inside the same package as the class under attack. 
  To summarize, if an inner class accesses a private data field, then it is possible to access that data field through other classes added to the package of the outer class, but to do so requires skill and determination. A programmer cannot accidentally obtain access but must intentionally build or modify a class file for that purpose. 
  Note   The synthesized constructors and methods can get quite convoluted. 
  (Skip this note if you are squeamish.) Suppose we turn TimePrinter into a private inner class. There are no private classes in the virtual machine, so the compiler produces the next best thing, a class with package access and a private constructor: private TalkingClock$TimePrinter(TalkingClock); 
  Of course, nobody can call that constructor, so there is a second constructor with package access: TalkingClock$TimePrinter(TalkingClock, TalkingClock$1); 
  that calls the first one. The TalkingClock$1 class is synthesized solely to distinguish this constructor from others. 
  The compiler translates the constructor call in the start method of the TalkingClock class to new TalkingClock$TimePrinter(this, null) 6.3.4 Local Inner Classes
  If you look carefully at the code of the TalkingClock example, you will find that you need the name of the type TimePrinter only once: when you create an object of that type in the start method. 
  In a situation like this, you can define the class locally in a single method. 
  public void start() { class TimePrinter implements ActionListener { public void actionPerformed(ActionEvent event) { System.out.println("At the tone, the time is " 
  + Instant.ofEpochMilli(event.getWhen())); 
  if (beep) Toolkit.getDefaultToolkit().beep(); 
  } 
  } 
  var listener = new TimePrinter(); 
  var timer = new Timer(interval, listener); 
  timer.start(); 
  } 
  Local classes are never declared with an access specifier (that is, public or private). Their scope is always restricted to the block in which they are declared. 
  Local classes have one great advantage: They are completely hidden from the outside world—not even other code in the TalkingClock class can access them. No method except start has any knowledge of the TimePrinter class. 
6.3.5 Accessing Variables from Outer Methods
  Local classes have another advantage over other inner classes. Not only can they access the fields of their outer classes; they can even access local variables! However, those local variables must be effectively final. That means, they may never change once they have been assigned. 
  Here is a typical example. Let’s move the interval and beep parameters from the TalkingClock constructor to the start method. 
  public void start(int interval, boolean beep) { class TimePrinter implements ActionListener { public void actionPerformed(ActionEvent event) { System.out.println("At the tone, the time is " 
  + Instant.ofEpochMilli(event.getWhen())); 
  if (beep) Toolkit.getDefaultToolkit().beep(); 
  } 
  } 
  var listener = new TimePrinter(); 
  var timer = new Timer(interval, listener); 
  timer.start(); 
  } 
  Note that the TalkingClock class no longer needs to store a beep instance field. It simply refers to the beep parameter variable of the start   method. 
  Maybe this should not be so surprising. The line if (beep) . . . 
  is, after all, ultimately inside the start method, so why shouldn’t it have access to the value of the beep variable? 
  To see why there is a subtle issue here, let’s consider the flow of control more closely. 
  1. The start method is called. 
  2. The object variable listener is initialized by a call to the constructor of the inner class TimePrinter. 
  3. The listener reference is passed to the Timer constructor, the timer is started, and the start method exits. At this point, the beep parameter variable of the start method no longer exists. 
  4. A second later, the actionPerformed method executes if (beep) . . . 
  For the code in the actionPerformed method to work, the TimePrinter class must have copied the beep field as a local variable of the start method, before the beep parameter value went away. That is indeed exactly what happens. In our example, the compiler synthesizes the name TalkingClock$1TimePrinter for the local inner class. If you use the ReflectionTest program again to spy on the TalkingClock$1TimePrinter class, you will get the following output: class TalkingClock$1TimePrinter { TalkingClock$1TimePrinter(TalkingClock, boolean); 
  public void actionPerformed(java.awt.event.ActionEvent); 
  final boolean val$beep; 
  final TalkingClock this$0; 
  } 
  Note the boolean parameter to the constructor and the val$beep instance variable. When an object is created, the value beep is passed into the constructor and stored in the val$beep field. The compiler detects access   of local variables, makes matching instance fields for each one, and copies the local variables into the constructor so that the instance fields can be initialized. 
6.3.6 Anonymous Inner Classes
  When using local inner classes, you can often go a step further. If you want to make only a single object of this class, you don’t even need to give the class a name. Such a class is called an anonymous inner class. 
  public void start(int interval, boolean beep) { var listener = new ActionListener() { public void actionPerformed(ActionEvent event) { System.out.println("At the tone, the time is " 
  + Instant.ofEpochMilli(event.getWhen())); 
  if (beep) Toolkit.getDefaultToolkit().beep(); 
  } 
  }; 
  var timer = new Timer(interval, listener); 
  timer.start(); 
  } 
  This syntax is very cryptic indeed. What it means is this: Create a new object of a class that implements the ActionListener interface, where the required method actionPerformed is the one defined inside the braces { }. 
  In general, the syntax is new SuperType(construction parameters) { inner class methods and data } 
  Here, SuperType can be an interface, such as ActionListener; then, the inner class implements that interface. SuperType can also be a class; then, the inner class extends that class. 
  An anonymous inner class cannot have constructors because the name of a   constructor must be the same as the name of a class, and the class has no name. Instead, the construction parameters are given to the superclass constructor. In particular, whenever an inner class implements an interface, it cannot have any construction parameters. Nevertheless, you must supply a set of parentheses as in new InterfaceType() { methods and data } 
  You have to look carefully to see the difference between the construction of a new object of a class and the construction of an object of an anonymous inner class extending that class. 
  var queen = new Person("Mary"); 
  // a Person object var count = new Person("Dracula") { . . . }; 
  // an object of an inner class extending Person   If the closing parenthesis of the construction parameter list is followed by an opening brace, then an anonymous inner class is being defined. 
  Note Even though an anonymous class cannot have constructors, you can provide an object initialization block: var count = new Person("Dracula") { { initialization } 
  . . . 
  }; 
  Listing 6.8 contains the complete source code for the talking clock program with an anonymous inner class. If you compare this program with Listing 6.7, you will see that in this case, the solution with the anonymous inner class is   quite a bit shorter and, hopefully, with some practice, as easy to comprehend. 
  For many years, Java programmers routinely used anonymous inner classes for event listeners and other callbacks. Nowadays, you are better off using a lambda expression. For example, the start method from the beginning of this section can be written much more concisely with a lambda expression like this: public void start(int interval, boolean beep) { var timer = new Timer(interval, event -> { System.out.println("At the tone, the time is " 
  + Instant.ofEpochMilli(event.getWhen())); 
  if (beep) Toolkit.getDefaultToolkit().beep(); 
  }); 
  timer.start(); 
  } 
  Note The following trick, called double brace initialization, takes advantage of the inner class syntax. Suppose you want to construct an array list and pass it to a method: var friends = new ArrayList<String>(); 
  friends.add("Harry"); 
  friends.add("Tony"); 
  invite(friends); 
  If you don’t need the array list again, it would be nice to make it anonymous. But then how can you add the elements? Here is how: invite(new ArrayList<String>() {{ add("Harry"); 
  add("Tony"); }}); 
  Note the double braces. The outer braces make an anonymous subclass of ArrayList. The inner braces are an object initialization block (see Chapter 4). 
  In practice, this trick is rarely useful. More likely than not, the invite method is willing to accept any List<String>, and you can simply pass List.of("Harry", "Tony"). 
  Caution It is often convenient to make an anonymous subclass that is almost, but not quite, like its superclass. But you need to be careful with the equals method. In Chapter 5, we recommended that your equals methods use a test if (getClass() != other.getClass()) return false; 
  An anonymous subclass will fail this test. 
  Tip When you produce logging or debugging messages, you often want to include the name of the current class, such as System.err.println("Something awful happened in " + getClass()); 
  But that fails in a static method. After all, the call to getClass calls this.getClass(), and a static method has no this. Use the following expression instead: new Object(){}.getClass().getEnclosingClass() // gets class of static method   Here, new Object(){} makes an anonymous object of an anonymous subclass of Object, and getEnclosingClass gets its enclosing class—that is, the class containing the static method. 
6.3.7 Static Inner Classes
  Occasionally, you may want to use an inner class simply to hide one class inside another—but you don’t need the inner class to have a reference to the outer class object. You can suppress the generation of that reference by declaring the inner class static. 
  Here is a typical example of where you would want to do this. Consider the task of computing the minimum and maximum value in an array. Of course, you write one method to compute the minimum and another method to compute the maximum. When you call both methods, the array is traversed twice. It would be more efficient to traverse the array only once, computing both the minimum and the maximum simultaneously. 
  double min = Double.POSITIVE_INFINITY; 
  double max = Double.NEGATIVE_INFINITY; 
  for (double v : values) { if (min > v) min = v; 
  if (max < v) max = v; 
  } 
  However, the method must return two numbers. We can achieve that by defining a class Pair that holds two values: class Pair { private double first; 
  private double second; 
  public Pair(double f, double s) { first = f; 
  second = s; 
  } 
  public double getFirst() { return first; } 
  public double getSecond() {   return second; } 
  } 
  The minmax method can then return an object of type Pair. 
  class ArrayAlg { public static Pair minmax(double[] values) { . . . 
  return new Pair(min, max); 
  } 
  } 
  The caller of the method uses the getFirst and getSecond methods to retrieve the answers: Pair p = ArrayAlg.minmax(d); 
  System.out.println("min = " + p.getFirst()); 
  System.out.println("max = " + p.getSecond()); 
  Of course, the name Pair is an exceedingly common name, and in a large project, it is quite possible that some other programmer had the same bright idea—but made a Pair class that contains a pair of strings. We can solve this potential name clash by making Pair a public inner class inside ArrayAlg. Then the class will be known to the public as ArrayAlg.Pair: ArrayAlg.Pair p = ArrayAlg.minmax(d); 
  However, unlike the inner classes that we used in previous examples, we do not want to have a reference to any other object inside a Pair object. That reference can be suppressed by declaring the inner class static: class ArrayAlg { public static class Pair { . . . 
  } 
  . . . 
  } 
  Of course, only inner classes can be declared static. A static inner class is exactly like any other inner class, except that an object of a static inner class does not have a reference to the outer class object that generated it. In our example, we must use a static inner class because the inner class object is constructed inside a static method: public static Pair minmax(double[] d) { . . . 
  return new Pair(min, max); 
  } 
  Had the Pair class not been declared as static, the compiler would have complained that there was no implicit object of type ArrayAlg available to initialize the inner class object. 
  Note Use a static inner class whenever the inner class does not need to access an outer class object. Some programmers use the term nested class to describe static inner classes. 
  Note Unlike regular inner classes, static inner classes can have static fields and methods. 
  Note Inner classes that are declared inside an interface are automatically static and public. 
  Listing 6.9 contains the complete source code of the ArrayAlg class and the nested Pair class. 
