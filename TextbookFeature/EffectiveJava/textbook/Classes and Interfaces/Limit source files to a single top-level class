  While the Java compiler lets you define multiple top-level classes in a single source file, there are no benefits associated with doing so, and there are significant risks. 
  The risks stem from the fact that defining multiple top-level classes in a source file makes it possible to provide multiple definitions for a class. Which definition gets used is affected by the order in which the source files are passed to the compiler. 
  To make this concrete, consider this source file, which contains only a Main class that refers to members of two other top-level classes (Utensil and Dessert): public class Main { public static void main(String[] args) { System.out.println(Utensil.NAME + Dessert.NAME); 
  } 
  } 
  Now suppose you define both Utensil and Dessert in a single source file named Utensil.java: // Two classes defined in one file. Don't ever do this! 
  class Utensil { static final String NAME = "pan"; 
  } 
  class Dessert { static final String NAME = "cake"; 
  } 
  Of course the main program prints pancake. 
  Now suppose you accidentally make another source file named Dessert.java that defines the same two classes: // Two classes defined in one file. Don't ever do this! 
  class Utensil { static final String NAME = "pot"; 
  } 
  class Dessert { static final String NAME = "pie"; 
  } 
  If you’re lucky enough to compile the program with the command javac Main.java Dessert.java, the compilation will fail, and the compiler will tell you that you’ve multiply defined the classes Utensil and Dessert. This is so because the compiler will first compile Main.java, and when it sees the reference to Utensil (which precedes the reference to Dessert), it will look in Utensil.java for this class and find both Utensil and Dessert. When the compiler encounters Dessert.java on the command line, it will pull in that file too, causing it to encounter both definitions of Utensil and Dessert. 
  If you compile the program with the command javac Main.java or javac Main.java Utensil.java, it will behave as it did before you wrote the Dessert.java file, printing pancake. But if you compile the program with the command javac Dessert.java Main.java, it will print potpie. The behavior of the program is thus affected by the order in which the source files are passed to the compiler, which is clearly unacceptable. 
  Fixing the problem is as simple as splitting the top-level classes (Utensil and Dessert, in the case of our example) into separate source files. If you are tempted to put multiple top-level classes into a single source file, consider using static member classes (Item 24) as an alternative to splitting the classes into separate source files. If the classes are subservient to another class, making them into static member classes is generally the better alternative because it enhances readability and makes it possible to reduce the accessibility of the classes by declaring them private (Item 15). Here is how our example looks with static member classes: // Static member classes instead of multiple top-level classes public class Test { public static void main(String[] args) { System.out.println(Utensil.NAME + Dessert.NAME); 
  } 
  private static class Utensil { static final String NAME = "pan"; 
  } 
  private static class Dessert { static final String NAME = "cake"; 
  } 
  } 
  The lesson is clear: Never put multiple top-level classes or interfaces in a single source file. Following this rule guarantees that you can’t have multiple definitions for a single class at compile time. This in turn guarantees that the class files generated by compilation, and the behavior of the resulting program, are independent of the order in which the source files are passed to the compiler. 
