  Just as classes can be generic, so can methods. Static utility methods that operate on parameterized types are usually generic. All of the “algorithm” methods in Collections (such as binarySearch and sort) are generic. 
  Writing generic methods is similar to writing generic types. Consider this deficient method, which returns the union of two sets: // Uses raw types - unacceptable! (Item 26) public static Set union(Set s1, Set s2) { Set result = new HashSet(s1); 
  result.addAll(s2); 
  return result; 
  } 
  This method compiles but with two warnings: Union.java:5: warning: [unchecked] unchecked call to HashSet(Collection<? extends E>) as a member of raw type HashSet Set result = new HashSet(s1); 
  ^ Union.java:6: warning: [unchecked] unchecked call to addAll(Collection<? extends E>) as a member of raw type Set result.addAll(s2); 
  ^ To fix these warnings and make the method typesafe, modify its declaration to declare a type parameter representing the element type for the three sets (the two arguments and the return value) and use this type parameter throughout the method. The type parameter list, which declares the type parameters, goes between a method’s modifiers and its return type. In this example, the type parameter list is <E>, and the return type is Set<E>. The naming conventions for type parameters are the same for generic methods and generic types (Items 29, 68): // Generic method public static <E> Set<E> union(Set<E> s1, Set<E> s2) { Set<E> result = new HashSet<>(s1); 
  result.addAll(s2); 
  return result; 
  } 
  At least for simple generic methods, that’s all there is to it. This method compiles without generating any warnings and provides type safety as well as ease of use. Here’s a simple program to exercise the method. This program contains no casts and compiles without errors or warnings: // Simple program to exercise generic method public static void main(String[] args) { Set<String> guys = Set.of("Tom", "Dick", "Harry"); 
  Set<String> stooges = Set.of("Larry", "Moe", "Curly"); 
  Set<String> aflCio = union(guys, stooges); 
  System.out.println(aflCio); 
  } 
  When you run the program, it prints [Moe, Tom, Harry, Larry, Curly, Dick]. 
  (The order of the elements in the output is implementation-dependent.) A limitation of the union method is that the types of all three sets (both input parameters and the return value) have to be exactly the same. You can make the method more flexible by using bounded wildcard types (Item 31). 
  On occasion, you will need to create an object that is immutable but applicable to many different types. Because generics are implemented by erasure (Item 28), you can use a single object for all required type parameterizations, but you need to write a static factory method to repeatedly dole out the object for each requested type parameterization. This pattern, called the generic singleton factory, is used for function objects (Item 42) such as Collections.reverseOrder, and occasionally for collections such as Collections.emptySet. 
  Suppose that you want to write an identity function dispenser. The libraries provide Function.identity, so there’s no reason to write your own (Item 59), but it is instructive. It would be wasteful to create a new identity function object time one is requested, because it’s stateless. If Java’s generics were reified, you would need one identity function per type, but since they’re erased a generic singleton will suffice. Here’s how it looks: // Generic singleton factory pattern private static UnaryOperator<Object> IDENTITY_FN = (t) -> t; 
  @SuppressWarnings("unchecked") public static <T> UnaryOperator<T> identityFunction() { return (UnaryOperator<T>) IDENTITY_FN; 
  } 
  The cast of IDENTITY_FN to (UnaryFunction<T>) generates an unchecked cast warning, as UnaryOperator<Object> is not a UnaryOperator<T> for every T. But the identity function is special: it returns its argument unmodified, so we know that it is typesafe to use it as a UnaryFunction<T>, whatever the value of T. 
  Therefore, we can confidently suppress the unchecked cast warning generated by this cast. Once we’ve done this, the code compiles without error or warning. 
  Here is a sample program that uses our generic singleton as a UnaryOperator<String> and a UnaryOperator<Number>. As usual, it contains no casts and compiles without errors or warnings: // Sample program to exercise generic singleton public static void main(String[] args) { String[] strings = { "jute", "hemp", "nylon" }; 
  UnaryOperator<String> sameString = identityFunction(); 
  for (String s : strings) System.out.println(sameString.apply(s)); 
  Number[] numbers = { 1, 2.0, 3L }; 
  UnaryOperator<Number> sameNumber = identityFunction(); 
  for (Number n : numbers) System.out.println(sameNumber.apply(n)); 
  } 
  It is permissible, though relatively rare, for a type parameter to be bounded by some expression involving that type parameter itself. This is what’s known as a recursive type bound. A common use of recursive type bounds is in connection with the Comparable interface, which defines a type’s natural ordering (Item 14). 
  This interface is shown here: public interface Comparable<T> { int compareTo(T o); 
  } 
  The type parameter T defines the type to which elements of the type implementing Comparable<T> can be compared. In practice, nearly all types can be compared only to elements of their own type. So, for example, String implements Comparable<String>, Integer implements Comparable<Integer>, and so on. 
  Many methods take a collection of elements implementing Comparable to sort it, search within it, calculate its minimum or maximum, and the like. To do these things, it is required that every element in the collection be comparable to every other element in it, in other words, that the elements of the list be mutually comparable. Here is how to express that constraint: // Using a recursive type bound to express mutual comparability public static <E extends Comparable<E>> E max(Collection<E> c); 
  The type bound <E extends Comparable<E>> may be read as “any type E that can be compared to itself,” which corresponds more or less precisely to the notion of mutual comparability. 
  Here is a method to go with the previous declaration. It calculates the maximum value in a collection according to its elements’ natural order, and it compiles without errors or warnings: // Returns max value in a collection - uses recursive type bound public static <E extends Comparable<E>> E max(Collection<E> c) { if (c.isEmpty()) throw new IllegalArgumentException("Empty collection"); 
  E result = null; 
  for (E e : c) if (result == null || e.compareTo(result) > 0) result = Objects.requireNonNull(e); 
  return result; 
  } 
  Note that this method throws IllegalArgumentException if the list is empty. A better alternative would be to return an Optional<E> (Item 55). 
  Recursive type bounds can get much more complex, but luckily they rarely do. If you understand this idiom, its wildcard variant (Item 31), and the simulated self-type idiom (Item 2), you’ll be able to deal with most of the recursive type bounds you encounter in practice. 
  In summary, generic methods, like generic types, are safer and easier to use than methods requiring their clients to put explicit casts on input parameters and return values. Like types, you should make sure that your methods can be used without casts, which often means making them generic. And like types, you should generify existing methods whose use requires casts. This makes life easier for new users without breaking existing clients (Item 26). 
