Methods Common to All Objects	Always override toString	{}	{}	{}
Methods Common to All Objects	Consider implementing Comparable	{"java.util": 5, "java.util.concurrent": 1}	{"Arrays": 2, "Comparator": 18, "Map": 1, "Collections": 3, "Random": 1, "HashSet": 2, "Set": 4, "TreeMap": 1, "NavigableSet": 1, "Collection": 1, "TreeSet": 6, "Objects": 1, "ThreadLocalRandom": 2}	{"equals": ["Objects", 3], "toString": ["Objects", 2], "compare": ["Objects", 4], "sort": ["Collections", 1], "hashCode": ["Objects", 11], "addAll": ["TreeSet", 2], "requireNonNull": ["Objects", 1], "current": ["ThreadLocalRandom", 1]}
Methods Common to All Objects	Introduction	{}	{}	{}
Methods Common to All Objects	Obey the general contract when overriding equals	{"java.net": 1, "java.util": 8, "java.util.concurrent": 1, "java.util.concurrent.atomic": 1, "java.util.regex": 1, "java.sql": 1}	{"URL": 3, "Arrays": 1, "Map": 3, "List": 5, "AbstractList": 1, "AbstractMap": 1, "Date": 2, "ArrayList": 3, "Map.Entry": 1, "HashSet": 1, "Set": 6, "Collection": 1, "Objects": 7, "AbstractSet": 1, "AtomicInteger": 4, "Pattern": 2, "Timestamp": 5}	{"equals": ["Timestamp", 54], "hashCode": ["Timestamp", 4], "compare": ["Objects", 2], "get": ["AtomicInteger", 2], "add": ["Collection", 2], "contains": ["Collection", 4], "requireNonNull": ["Objects", 4], "incrementAndGet": ["AtomicInteger", 2]}
Methods Common to All Objects	Override clone judiciously	{"java.util": 4}	{"Arrays": 3, "Map": 3, "LinkedList": 1, "HashSet": 1, "Stack": 20, "Collection": 1, "TreeSet": 2, "HashMap": 2}	{"equals": ["Collection", 2], "toString": ["Arrays", 1], "hashCode": ["Collection", 4], "put": ["HashMap", 2], "isEmpty": ["HashMap", 3], "pop": ["Stack", 4], "push": ["Stack", 3], "clone": ["HashMap", 24]}
Methods Common to All Objects	Always override hashCode when you override equals	{"java.util": 1}	{"Arrays": 1, "Map": 2, "HashSet": 1, "Objects": 3, "HashMap": 6}	{"equals": ["Objects", 3], "hashCode": ["Objects", 20], "hash": ["Objects", 2]}
Creating and Destroying Objects	Consider static factory methods instead of constructors	{"java.util": 2}	{"List": 1, "Collections": 5, "ServiceLoader": 2, "Date": 2, "Random": 1, "Set": 1, "EnumSet": 4}	{"equals": ["Set", 1], "of": ["EnumSet", 1], "list": ["Collections", 1], "valueOf": ["Date", 2], "from": ["Date", 1]}
Creating and Destroying Objects	Consider a builder when faced with many constructor parameters	{"java.util": 2}	{"Set": 2, "Optional": 2, "EnumSet": 4, "Objects": 5}	{"toString": ["Objects", 2], "clone": ["EnumSet", 2], "requireNonNull": ["Objects", 4]}
Creating and Destroying Objects	Eliminate obsolete object references	{"java.lang": 1, "java.lang.ref": 1, "java.util": 1}	{"Object": 12, "String": 2, "NullPointerException": 1, "System": 1, "Arrays": 2, "LinkedHashMap": 1, "Stack": 9, "WeakHashMap": 3}	{"pop": ["Stack", 5], "push": ["Stack", 3]}
Creating and Destroying Objects	Prefer dependency injection to hardwiring resources	{}	{}	{}
Creating and Destroying Objects	Introduction	{}	{}	{}
Creating and Destroying Objects	Avoid creating unnecessary objects	{"java.util": 2, "java.util.regex": 1}	{"Comparator": 1, "Map": 4, "Set": 4, "Pattern": 9}	{"matcher": ["Pattern", 2], "matches": ["Pattern", 2]}
Creating and Destroying Objects	Enforce noninstantiability with a private constructor	{"java.lang": 1, "java.util": 2}	{"Math": 1, "Arrays": 1, "Collections": 1}	{}
Creating and Destroying Objects	Avoid finalizers and cleaners	{"java.lang": 1, "java.lang.ref": 1, "java.util": 1, "java.util.concurrent": 1, "java.sql": 1}	{"Runnable": 3, "Number": 2, "Runtime": 1, "String": 4, "AutoCloseable": 5, "System": 12, "Cleaner.Cleanable": 2, "Cleaner": 8, "ThreadPoolExecutor": 1, "TimeUnit": 1, "Connection": 1}	{"run": ["Runnable", 2], "gc": ["System", 2], "close": ["Connection", 2], "clean": ["Cleaner.Cleanable", 2], "create": ["Cleaner", 2], "register": ["Cleaner", 2]}
Creating and Destroying Objects	Prefer try-with-resources to try-finally	{"java.io": 11, "java.sql": 1}	{"FileInputStream": 4, "FileOutputStream": 4, "InputStream": 5, "OutputStream": 5, "BufferedReader": 15, "Connection": 1}	{"read": ["BufferedReader", 4], "close": ["Connection", 6], "readLine": ["BufferedReader", 6]}
Creating and Destroying Objects	Enforce the singleton property with a private constructor or an enum type	{}	{}	{}
Exceptions	Use checked exceptions for recoverable conditions and runtime exceptions for programming errors	{}	{}	{}
Exceptions	Throw exceptions appropriate to the abstraction.	{}	{}	{}
Exceptions	Document all exceptions thrown by each method.	{}	{}	{}
Exceptions	Favor the use of standard exceptions	{}	{}	{}
Exceptions	Introduction	{}	{}	{}
Exceptions	Avoid unnecessary use of checked exceptions	{}	{}	{}
Exceptions	Include failure-capture information in detail messages	{}	{}	{}
Exceptions	Favor the use of standard exceptions.	{}	{}	{}
Exceptions	Strive for failure atomicity	{}	{}	{}
Exceptions	Donâ€™t ignore exceptions	{}	{}	{}
Exceptions	Document all exceptions thrown by each method	{}	{}	{}
Exceptions	Use exceptions only for exceptional conditions	{}	{}	{}
Exceptions	Throw exceptions appropriate to the abstraction	{"java.util": 1, "java.util.logging": 1}	{"AbstractSequentialList": 1, "List": 2, "ListIterator": 1}	{"get": ["List", 1], "listIterator": ["List", 1], "size": ["List", 1], "next": ["ListIterator", 1]}
Exceptions	Include failure-capture information in detail messages.	{}	{}	{}
Introduction	Introduction	{"java.io": 2, "java.lang": 1, "java.util": 4, "java.util.concurrent": 1, "java.util.function": 1}	{"Class": 1}	{}
Classes and Interfaces	Favor static member classes over nonstatic	{}	{}	{}
Classes and Interfaces	Prefer interfaces to abstract classes	{"java.util": 2}	{"AbstractMap.SimpleEntry": 1, "Map": 14, "List": 5, "AbstractList": 4, "AbstractMap": 2, "AbstractCollection": 1, "Collections": 2, "Map.Entry": 14, "Objects": 10, "AbstractSet": 1}	{"toString": ["Objects", 2], "equals": ["AbstractSet", 2], "getKey": ["Map.Entry", 8], "getValue": ["Map.Entry", 8], "setValue": ["Map.Entry", 2], "hashCode": ["AbstractSet", 2], "get": ["AbstractMap", 2], "size": ["AbstractMap", 2], "set": ["AbstractList", 2], "shuffle": ["Collections", 1], "requireNonNull": ["Objects", 2]}
Classes and Interfaces	Design and document for inheritance or else prohibit it	{"java.time": 1, "java.util": 2}	{"Instant": 5, "Map": 1, "List": 2, "ListIterator": 3, "AbstractList": 1, "AbstractCollection": 1, "Iterator": 1, "HashSet": 1, "Set": 1, "Objects": 1}	{"now": ["Instant", 2], "equals": ["Objects", 1], "remove": ["Set", 1], "removeRange": ["AbstractList", 1]}
Classes and Interfaces	Use interfaces only to define types.	{}	{}	{}
Classes and Interfaces	Prefer class hierarchies to tagged classes	{}	{}	{}
Classes and Interfaces	Introduction	{}	{}	{}
Classes and Interfaces	In public classes, use accessor methods, not public fields	{"java.awt": 1}	{"Point": 6, "Dimension": 2}	{"getY": ["Point", 2], "getX": ["Point", 2]}
Classes and Interfaces	Favor composition over inheritance	{"java.util": 3}	{"Arrays": 1, "List": 4, "Collections": 1, "Hashtable": 4, "Iterator": 2, "Vector": 2, "HashSet": 15, "Set": 17, "Stack": 1, "Collection": 12, "TreeSet": 1, "Properties": 4}	{"equals": ["Collection", 4], "toString": ["Vector", 4], "hashCode": ["Collection", 4], "remove": ["TreeSet", 4], "toArray": ["Collection", 6], "isEmpty": ["TreeSet", 4], "addAll": ["TreeSet", 6], "retainAll": ["Collection", 2], "get": ["Vector", 1], "add": ["TreeSet", 12], "clear": ["TreeSet", 4], "iterator": ["TreeSet", 4], "size": ["TreeSet", 8], "removeAll": ["Collection", 2], "contains": ["TreeSet", 4], "containsAll": ["Collection", 2], "getProperty": ["Properties", 1]}
Classes and Interfaces	Design interfaces for posterity	{"java.util": 1}	{"Collections": 2, "Iterator": 1, "Collection": 3, "Objects": 1}	{"hasNext": ["Iterator", 1], "next": ["Iterator", 1], "remove": ["Collection", 1], "iterator": ["Collection", 1], "requireNonNull": ["Objects", 1]}
Classes and Interfaces	Limit source files to a single top-level class	{}	{}	{}
Classes and Interfaces	Use interfaces only to define types	{"java.io": 1}	{}	{}
Classes and Interfaces	Minimize the accessibility of classes and members	{}	{}	{}
Classes and Interfaces	Minimize mutability	{"java.util": 2, "java.awt": 1}	{"Date": 1, "BitSet": 5, "Point": 1}	{"valueOf": ["BitSet", 2], "equals": ["Point", 2], "toString": ["Point", 2], "hashCode": ["BitSet", 6], "toByteArray": ["BitSet", 1]}
Methods	Make defensive copies when needed	{"java.time": 1, "java.util": 4}	{"LocalDateTime": 2, "Instant": 3, "Period": 26, "ZonedDateTime": 2, "Map": 1, "Date": 52, "Set": 1}	{"compareTo": ["Date", 2], "toString": ["Date", 1], "getTime": ["Date", 9], "setYear": ["Date", 4]}
Methods	Introduction	{}	{}	{}
Methods	Use varargs judiciously	{"java.util": 1, "java.util.stream": 1}	{"EnumSet": 1, "IntStream": 1}	{"sum": ["IntStream", 2]}
Methods	Return optionals judiciously	{"java.util": 2}	{"OptionalDouble": 1, "Arrays": 1, "Comparator": 2, "Map": 1, "List": 3, "OptionalLong": 1, "Optional": 45, "Collection": 7, "OptionalInt": 1, "Objects": 4}	{"of": ["OptionalInt", 4], "empty": ["OptionalInt", 3], "stream": ["OptionalInt", 3], "isPresent": ["OptionalInt", 3], "isEmpty": ["OptionalInt", 4], "asList": ["Arrays", 1], "naturalOrder": ["Comparator", 2], "get": ["Optional", 3], "ofNullable": ["Optional", 1], "requireNonNull": ["Objects", 4]}
Methods	Return empty collections or arrays, not nulls	{}	{}	{}
Methods	Write doc comments for all exposed API elements	{"java.lang": 4, "java.lang.annotation": 4}	{"Math": 1, "Throwable": 2, "Class": 2, "Package": 1, "RetentionPolicy": 3, "ElementType": 3}	{}
Methods	Use overloading judiciously	{"java.math": 2, "java.util": 4}	{"BigInteger": 4, "List": 19, "ArrayList": 6, "HashSet": 3, "Set": 11, "Collection": 20, "TreeSet": 2, "HashMap": 3}	{"valueOf": ["BigInteger", 2], "add": ["TreeSet", 4], "remove": ["HashMap", 13], "values": ["HashMap", 3]}
Methods	Design method signatures carefully	{"java.util": 1}	{"Map": 2, "List": 2, "TreeMap": 2, "HashMap": 2}	{}
Methods	Check parameters for validity	{"java.util": 1}	{"List": 4, "Collections": 1, "Objects": 5}	{"sort": ["Collections", 1]}
Lambdas and Streams	Prefer method references to lambdas	{"java.util": 2}	{"Map": 3, "TreeMap": 4}	{"clear": ["TreeMap", 1]}
Lambdas and Streams	Introduction	{}	{}	{}
Lambdas and Streams	Prefer side-effect-free functions in streams	{"java.io": 2, "java.util": 5, "java.util.stream": 3}	{"File": 3, "Comparator": 2, "Map": 7, "List": 2, "EnumMap": 1, "Iterator": 1, "TreeMap": 2, "Scanner": 5, "Collection": 1, "HashMap": 2, "Collector": 3, "Collectors": 11, "Stream": 8}	{"reversed": ["Comparator", 3], "keySet": ["HashMap", 2], "values": ["HashMap", 1], "tokens": ["Scanner", 4], "stream": ["Collection", 2], "toMap": ["Collectors", 1], "toSet": ["Collectors", 2], "toCollection": ["Collectors", 2], "counting": ["Collectors", 5], "toList": ["Stream", 3]}
Lambdas and Streams	Use streams judiciously	{"java.io": 4, "java.math": 2, "java.nio": 6, "java.nio.file": 6, "java.util": 11, "java.util.stream": 7}	{"File": 5, "BigInteger": 7, "Files": 6, "Paths": 6, "Path": 6, "Arrays": 4, "Map": 2, "List": 9, "ArrayList": 3, "Set": 4, "Scanner": 4, "TreeSet": 2, "HashMap": 2, "Collectors": 3, "Stream": 21}	{"toString": ["Scanner", 3], "intValueExact": ["BigInteger", 2], "bitLength": ["BigInteger", 2], "subtract": ["BigInteger", 2], "add": ["TreeSet", 2], "lines": ["Files", 4], "size": ["HashMap", 12], "stream": ["Arrays", 4], "sort": ["List", 3], "values": ["HashMap", 16], "hasNext": ["Scanner", 2], "next": ["Scanner", 2], "toList": ["Stream", 2], "sorted": ["Stream", 2]}
Lambdas and Streams	Use caution when making streams parallel	{"java.math": 3, "java.util": 3, "java.util.concurrent": 1, "java.util.stream": 2}	{"BigInteger": 10, "SplittableRandom": 3, "ArrayList": 1, "Random": 2, "HashSet": 1, "Collection": 1, "HashMap": 1, "ThreadLocalRandom": 2, "ConcurrentHashMap": 1, "LongStream": 4, "Stream": 13}	{"intValueExact": ["BigInteger", 2], "subtract": ["BigInteger", 2], "rangeClosed": ["LongStream", 3], "count": ["Stream", 3]}
Lambdas and Streams	Favor the use of standard functional interfaces	{"java.util": 3, "java.util.function": 2}	{"Arrays": 1, "Comparator": 4, "Map": 6, "LinkedHashMap": 3, "Map.Entry": 4, "Collection": 1, "ObjIntConsumer": 1, "ToIntBiFunction": 2, "LongToIntFunction": 1, "Predicate": 4, "IntPredicate": 1, "ObjDoubleConsumer": 1, "Function": 9, "ToLongBiFunction": 1, "LongBinaryOperator": 1, "BiPredicate": 2, "BiFunction": 2, "BooleanSupplier": 2, "BiConsumer": 1, "Supplier": 3, "Consumer": 3, "LongFunction": 1, "ToDoubleBiFunction": 1, "ObjLongConsumer": 1}	{"get": ["Supplier", 1], "size": ["Collection", 2], "accept": ["ObjLongConsumer", 1], "test": ["BiPredicate", 1], "apply": ["LongFunction", 3]}
Lambdas and Streams	Prefer Collection to Stream as a return type	{"java.util": 6, "java.util.stream": 4}	{"Arrays": 4, "List": 20, "AbstractList": 3, "AbstractCollection": 1, "Collections": 2, "Iterator": 1, "ArrayList": 4, "HashSet": 4, "Set": 18, "Collection": 11, "IntStream": 11, "Stream": 32, "StreamSupport": 3}	{"asList": ["Arrays", 2], "spliterator": ["Collection", 2], "subList": ["ArrayList", 3], "of": ["Stream", 2], "get": ["ArrayList", 4], "iterator": ["Collection", 2], "size": ["Collection", 18], "contains": ["Collection", 3], "emptyList": ["Collections", 2]}
Lambdas and Streams	Prefer lambdas to anonymous classes	{"java.util": 8, "java.util.function": 2}	{"Arrays": 2, "Comparator": 9, "List": 6, "Collections": 10, "DoubleBinaryOperator": 6}	{"toString": ["Arrays", 3], "asList": ["Arrays", 1], "compare": ["Comparator", 2], "shuffle": ["Collections", 3], "applyAsDouble": ["DoubleBinaryOperator", 2]}
Lambdas and Streams	Prefer Collection to Stream as a return type.	{}	{}	{}
Enums and Annotations	Use EnumMap instead of ordinal indexing	{"java.util": 7, "java.util.stream": 4}	{"Arrays": 4, "Map": 11, "EnumMap": 35, "HashSet": 4, "Set": 8, "Collectors": 5, "Stream": 3}	{"toString": ["Arrays", 2], "stream": ["Arrays", 4], "get": ["EnumMap", 4], "values": ["EnumMap", 10], "add": ["Set", 4], "toSet": ["Collectors", 2]}
Enums and Annotations	Use instance fields instead of ordinals	{}	{}	{}
Enums and Annotations	Prefer annotations to naming patterns	{"java.lang": 17, "java.lang.annotation": 11, "java.lang.ref": 6, "java.lang.reflect": 6, "java.util": 4, "javax.annotation.processing": 1}	{"Throwable": 24, "String": 8, "Class": 25, "NullPointerException": 7, "TypeNotPresentException": 1, "System": 29, "Annotation": 4, "RetentionPolicy": 12, "ElementType": 12, "InvocationTargetException": 11, "Method": 7, "List": 4, "ArrayList": 4}	{"getCause": ["InvocationTargetException", 11], "getDeclaredMethods": ["Class", 5], "isInstance": ["Class", 6], "getName": ["Method", 2], "invoke": ["Method", 11], "addAll": ["ArrayList", 3]}
Enums and Annotations	Consistently use the Override annotation.	{}	{}	{}
Enums and Annotations	Introduction	{}	{}	{}
Enums and Annotations	Consistently use the Override annotation	{"java.util": 3}	{"HashSet": 4, "Set": 5, "Collection": 2}	{"size": ["Collection", 3], "equals": ["Collection", 6], "hashCode": ["Collection", 3]}
Enums and Annotations	Use enums instead of int constants.	{}	{}	{}
Enums and Annotations	Use marker interfaces to define types	{}	{}	{}
Enums and Annotations	Use EnumSet instead of bit fields	{"java.util": 2}	{"Collections": 1, "Set": 8, "EnumSet": 18, "Objects": 1}	{"requireNonNull": ["Objects", 1]}
Enums and Annotations	Use EnumMap instead of ordinal indexing.	{}	{}	{}
Enums and Annotations	Emulate extensible enums with interfaces	{"java.nio": 1, "java.nio.file": 1, "java.util": 1}	{"LinkOption": 1, "Arrays": 2, "EnumMap": 1, "Collection": 3, "EnumSet": 1}	{"values": ["EnumMap", 2], "toString": ["Arrays", 4]}
Enums and Annotations	Use enums instead of int constants	{"java.math": 1, "java.util": 3, "java.util.stream": 2}	{"BigDecimal": 2, "RoundingMode": 2, "Map": 2, "Optional": 5, "Collectors": 1, "Stream": 3}	{"valueOf": ["RoundingMode", 1], "toString": ["Optional", 2], "values": ["Map", 9], "get": ["Optional", 2]}
General Programming	Adhere to generally accepted naming conventions	{"java.util": 1, "java.util.concurrent": 1, "java.util.concurrent.atomic": 1}	{"Comparator": 1, "List": 1, "LinkedHashMap": 1, "Collections": 1, "PriorityQueue": 1, "Collection": 1, "FutureTask": 2}	{}
General Programming	Introduction	{}	{}	{}
General Programming	Prefer for-each loops to traditional for loops	{"java.util": 2}	{"Arrays": 4, "List": 2, "Iterator": 13, "ArrayList": 2, "Collection": 8, "EnumSet": 2}	{"iterator": ["Collection", 12], "hasNext": ["Iterator", 11], "next": ["Iterator", 11]}
General Programming	Optimize judiciously	{"java.awt": 1}	{"Dimension": 5, "Component": 2}	{}
General Programming	Prefer primitive types to boxed primitives	{"java.util": 1}	{"Comparator": 6, "List": 1, "Collections": 1}	{"naturalOrder": ["Comparator", 1]}
General Programming	Avoid strings where other types are more appropriate	{"java.lang": 1}	{"Object": 7, "String": 5, "ThreadLocal": 11}	{"get": ["ThreadLocal", 4], "set": ["ThreadLocal", 4]}
General Programming	Avoid float and double if exact answers are required	{"java.math": 1}	{"BigDecimal": 19}	{"compareTo": ["BigDecimal", 2], "subtract": ["BigDecimal", 2], "add": ["BigDecimal", 2]}
General Programming	Minimize the scope of local variables	{}	{}	{}
General Programming	Prefer interfaces to reflection	{"java.lang": 3, "java.lang.ref": 3, "java.lang.reflect": 3, "java.util": 4}	{"String": 14, "Class": 17, "System": 6, "ClassNotFoundException": 2, "Constructor": 10, "InvocationTargetException": 3, "Method": 4, "Field": 3, "Arrays": 3, "HashSet": 1, "Set": 17, "TreeSet": 2}	{"getDeclaredConstructor": ["Class", 2], "newInstance": ["Constructor", 2], "exit": ["System", 2], "getCause": ["InvocationTargetException", 2], "asList": ["Arrays", 2]}
General Programming	Know and use the libraries	{"java.io": 3, "java.lang": 1, "java.net": 1, "java.util": 4, "java.util.concurrent": 2}	{"InputStream": 4, "Math": 4, "Integer": 4, "String": 4, "System": 4, "URL": 6, "SplittableRandom": 1, "Random": 8, "ThreadLocalRandom": 1}	{"random": ["Math", 4], "openStream": ["URL", 2], "nextInt": ["ThreadLocalRandom", 5]}
General Programming	Refer to objects by their interfaces	{"java.io": 1}	{"OutputStream": 1}	{}
General Programming	Use native methods judiciously	{"java.math": 1}	{"BigInteger": 3}	{}
General Programming	Beware the performance of string concatenation	{}	{}	{}
General Programming	Use native methods judiciously.	{}	{}	{}
Generics	Prefer lists to arrays	{"java.util": 5, "java.util.concurrent": 1}	{"Arrays": 2, "Map": 1, "List": 29, "ArrayList": 4, "Random": 4, "Collection": 5, "ThreadLocalRandom": 4}	{"of": ["List", 2], "size": ["Collection", 2], "toArray": ["Collection", 5], "current": ["ThreadLocalRandom", 3]}
Generics	Introduction	{}	{}	{}
Generics	Eliminate unchecked warnings.	{}	{}	{}
Generics	Favor generic types	{"java.util": 4, "java.util.concurrent": 2}	{"Arrays": 5, "List": 1, "ArrayList": 1, "Stack": 34, "HashMap": 1, "BlockingQueue": 1, "Delayed": 5, "DelayQueue": 5}	{"isEmpty": ["HashMap", 6], "ensureCapacity": ["ArrayList", 7], "pop": ["Stack", 8], "push": ["Stack", 9]}
Generics	Favor generic types.	{}	{}	{}
Generics	Eliminate unchecked warnings	{}	{}	{}
Generics	Consider typesafe heterogeneous containers	{"java.lang": 2, "java.lang.annotation": 1, "java.lang.ref": 1, "java.lang.reflect": 1, "java.util": 2}	{"Integer": 12, "Object": 6, "String": 27, "Class": 54, "System": 5, "ThreadLocal": 1, "Annotation": 6, "AnnotatedElement": 3, "Map": 8, "List": 9, "Collections": 1, "HashSet": 3, "Set": 2, "Collection": 1, "Objects": 3, "HashMap": 3}	{"getAnnotation": ["AnnotatedElement", 2], "cast": ["Class", 3], "forName": ["Class", 3], "getName": ["Class", 2], "exit": ["System", 1], "get": ["HashMap", 2], "requireNonNull": ["Objects", 3]}
Generics	Donâ€™t use raw types	{"java.util": 1}	{"List": 33, "Iterator": 1, "ArrayList": 2, "Set": 18, "Collection": 4}	{"add": ["Collection", 4], "iterator": ["Collection", 1], "contains": ["Collection", 1], "hasNext": ["Iterator", 1], "next": ["Iterator", 1]}
Generics	Combine generics and varargs judiciously.	{}	{}	{}
Generics	Combine generics and varargs judiciously	{"java.util": 10, "java.util.concurrent": 2}	{"Arrays": 4, "List": 55, "Collections": 1, "ArrayList": 6, "Collection": 1, "EnumSet": 1, "ThreadLocalRandom": 5}	{"toString": ["Arrays", 1], "toArray": ["Collection", 6], "of": ["EnumSet", 12], "addAll": ["Collection", 4], "nextInt": ["ThreadLocalRandom", 4], "current": ["ThreadLocalRandom", 3]}
Generics	Favor generic methods	{"java.util": 3, "java.util.function": 1}	{"Arrays": 1, "List": 1, "Collections": 3, "HashSet": 6, "Set": 25, "Optional": 1, "Collection": 5, "Objects": 2, "Function": 1}	{"asList": ["Arrays", 1], "isEmpty": ["Collection", 2], "addAll": ["Collection", 4], "max": ["Collections", 1], "requireNonNull": ["Objects", 2], "apply": ["Function", 4]}
Generics	Use bounded wildcards to increase API flexibility	{"java.util": 8}	{"Arrays": 4, "Comparator": 3, "List": 31, "ArrayList": 3, "Random": 3, "HashSet": 3, "Set": 26, "Stack": 20, "Collection": 14}	{"asList": ["Arrays", 3], "isEmpty": ["Collection", 7], "of": ["Set", 2], "addAll": ["Collection", 1], "get": ["ArrayList", 4], "add": ["Collection", 3], "size": ["Collection", 2], "ensureCapacity": ["ArrayList", 2], "pop": ["Stack", 6], "push": ["Stack", 8]}
Concurrency	Avoid excessive synchronization	{"java.util": 13, "java.util.concurrent": 6}	{"List": 7, "Hashtable": 1, "Iterator": 1, "ArrayList": 5, "Random": 1, "Vector": 1, "HashSet": 4, "Set": 6, "Collection": 6, "Observer": 3, "ExecutorService": 3, "CopyOnWriteArrayList": 8, "Executors": 3, "ThreadLocalRandom": 1}	{"remove": ["CopyOnWriteArrayList", 6], "equals": ["CopyOnWriteArrayList", 2], "toArray": ["CopyOnWriteArrayList", 3], "isEmpty": ["CopyOnWriteArrayList", 2], "addAll": ["CopyOnWriteArrayList", 1], "retainAll": ["CopyOnWriteArrayList", 1], "get": ["CopyOnWriteArrayList", 2], "add": ["CopyOnWriteArrayList", 16], "clear": ["CopyOnWriteArrayList", 2], "iterator": ["CopyOnWriteArrayList", 2], "size": ["CopyOnWriteArrayList", 2], "removeAll": ["CopyOnWriteArrayList", 1], "contains": ["CopyOnWriteArrayList", 2], "hashCode": ["CopyOnWriteArrayList", 2], "containsAll": ["CopyOnWriteArrayList", 1], "toString": ["CopyOnWriteArrayList", 2], "shutdown": ["ExecutorService", 2], "newSingleThreadExecutor": ["Executors", 2]}
Concurrency	Introduction	{}	{}	{}
Concurrency	Prefer executors, tasks, and streams to threads	{"java.util": 2, "java.util.concurrent": 2}	{"Collections": 1, "ExecutorService": 1, "ForkJoinTask": 1, "Callable": 1, "ExecutorCompletionService": 1, "ScheduledThreadPoolExecutor": 1, "ThreadPoolExecutor": 2, "ForkJoinPool": 1, "Executors": 4, "Executor": 4}	{"shutdown": ["ForkJoinPool", 1], "execute": ["Executor", 1], "newSingleThreadExecutor": ["Executors", 1]}
Concurrency	Use lazy initialization judiciously	{}	{}	{}
Concurrency	Donâ€™t depend on the thread scheduler	{}	{}	{}
Concurrency	Prefer concurrency utilities to wait and notify	{"java.util": 4, "java.util.concurrent": 4}	{"Map": 2, "List": 1, "Collections": 1, "Queue": 2, "ExecutorService": 1, "BlockingQueue": 2, "Semaphore": 1, "ConcurrentMap": 7, "CountDownLatch": 15, "Phaser": 2, "ThreadPoolExecutor": 1, "Exchanger": 1, "ConcurrentHashMap": 5, "Executor": 3, "CyclicBarrier": 2}	{"putIfAbsent": ["ConcurrentHashMap", 5], "get": ["ConcurrentHashMap", 2], "await": ["CyclicBarrier", 6], "countDown": ["CountDownLatch", 6]}
Concurrency	Document thread safety	{"java.util": 1, "java.util.concurrent": 1, "java.util.concurrent.locks": 1}	{"Map": 1, "Collections": 4, "ArrayList": 1, "Set": 1, "HashMap": 2, "ConcurrentHashMap": 2, "Lock": 1}	{"keySet": ["ConcurrentHashMap", 1]}
Concurrency	Synchronize access to shared mutable data	{"java.util": 5, "java.util.concurrent": 5, "java.util.concurrent.atomic": 2}	{"TimeUnit": 6, "AtomicLong": 3}	{"sleep": ["TimeUnit", 6], "getAndIncrement": ["AtomicLong", 1]}
Serialization	Implement Serializable with great caution	{}	{}	{}
Serialization	For instance control, prefer enum types to readResolve	{"java.util": 1}	{"Arrays": 3}	{"toString": ["Arrays", 3]}
Serialization	Prefer alternatives to Java serialization	{"java.io": 1, "java.util": 2}	{"ObjectInputFilter": 1, "ObjectInputStream": 1, "Collections": 1, "HashSet": 11, "Set": 11}	{"add": ["Set", 8]}
Serialization	Introduction	{}	{}	{}
Serialization	Consider using a custom serialized form	{"java.io": 1}	{"ObjectOutputStream": 3, "InvalidClassException": 1, "ObjectInputStream": 2}	{"defaultWriteObject": ["ObjectOutputStream", 3], "writeInt": ["ObjectOutputStream", 2], "writeObject": ["ObjectOutputStream", 3], "readObject": ["ObjectInputStream", 4], "readInt": ["ObjectInputStream", 2], "defaultReadObject": ["ObjectInputStream", 2]}
Serialization	Consider serialization proxies instead of serialized instances	{"java.io": 1, "java.net": 1, "java.util": 1}	{"ObjectInputStream": 2, "Proxy": 2, "Arrays": 1, "EnumMap": 1, "Collections": 1, "Date": 14, "EnumSet": 9, "Objects": 1}	{"readObject": ["ObjectInputStream", 2], "toString": ["Objects", 1], "getTime": ["Date", 4], "noneOf": ["EnumSet", 1]}
Serialization	Write readObject methods defensively	{}	{}	{}
