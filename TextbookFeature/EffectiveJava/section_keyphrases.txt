Methods Common to All Objects	Always override toString	[["tostring method", 0.04211206443424213], ["object", 0.04034927103591151], ["string representation", 0.03546495302082494], ["format", 0.03158990539084471], ["class", 0.027542827654125496], ["tostring", 0.02479828489224778], ["example", 0.024110487417091084], ["phone number example", 0.022592062997693806], ["string", 0.020663674536278466], ["return value", 0.020202154952455375], ["informative representation", 0.020006945868221486], ["hash code", 0.019492136497975557], ["programmers", 0.015249535934599349], ["phonenumber", 0.014554485594177095], ["message", 0.012813196837627642], ["representation", 0.012059063584043135], ["phonenumber@163b91", 0.01195405524962608], ["items", 0.011574126021270838], ["implementation", 0.010251152849236923], ["phone number", 0.009808014109787636]]
Methods Common to All Objects	Consider implementing Comparable	[["object", 0.03794035666291322], ["compareto method", 0.03230449942413127], ["methods", 0.0319149649248162], ["comparable", 0.03155761942001341], ["natural ordering", 0.0301234777199198], ["class", 0.02920964081410275], ["equals", 0.02175625565285683], ["comparable interface", 0.018671343076118698], ["general contract", 0.01839820751951861], ["key differences", 0.018081715831003983], ["fields", 0.016777095549954834], ["enum types", 0.01623060517420122], ["extreme values", 0.016159465228050278], ["collections", 0.013910182234258411], ["order comparisons", 0.013254659166022966], ["instances", 0.012484924682382397], ["item", 0.010472888826126965], ["java platform libraries", 0.010407082272478921], ["order", 0.010395166573027944], ["int compareto(t", 0.010057404515830268]]
Methods Common to All Objects	Introduction	[["concrete class", 0.11867212562302203], ["nonfinal methods", 0.11240800246840527], ["explicit general contracts", 0.07876245557118161], ["tostring", 0.061312048151908195], ["hashcode", 0.059998157156818346], ["class", 0.05750244760643513], ["clone", 0.05349075167565608], ["although", 0.05154779291093483], ["chapter", 0.04605415818590192], ["extension", 0.045873033612418415], ["responsibility", 0.029014666049244485], ["failure", 0.02758731845092082], ["hashmap", 0.026375594912228698], ["methods", 0.025954446591926812], ["general contracts", 0.025780971345790042], ["hashset", 0.025607107013985733], ["conjunction", 0.02350687104770835], ["comparable.compareto", 0.022556689759847495], ["contracts", 0.022197696263489462], ["item", 0.019253422802615237]]
Methods Common to All Objects	Obey the general contract when overriding equals	[["method", 0.050594532763933296], ["class", 0.037295769009077176], ["object", 0.027149976027651013], ["point", 0.024316032566977668], ["nanoseconds field", 0.018495848610660368], ["values", 0.01563432838308616], ["enum types", 0.014739785699780635], ["general contract", 0.014645868663782584], ["equals method", 0.01197723043535075], ["logical equality", 0.011864457231985665], ["comparisons", 0.011611601124142433], ["string", 0.011251541742213699], ["instanceof colorpoint", 0.010261941087025063], ["return s.equalsignorecase", 0.009816330033956844], ["new assertionerror", 0.009369999076905501], ["implementation", 0.009259262509278535], ["item", 0.009086426571758649], ["public boolean equals(object", 0.009046549749697062], ["equals contract", 0.009019808472023133], ["case", 0.008748679901918278]]
Methods Common to All Objects	Override clone judiciously	[["clone method", 0.06071666472423314], ["object", 0.04382395084170832], ["classes", 0.03690478929202642], ["cloning", 0.02705946291398274], ["constructor", 0.019355887069299152], ["super.clone", 0.01827326361514331], ["values", 0.016691020732587176], ["field", 0.016422203558466717], ["array", 0.015304506564433017], ["stack class", 0.015199328173206557], ["item", 0.014495876912213827], ["cloneable", 0.014479088695100329], ["clonenotsupportedexception", 0.012647222968713505], ["phonenumber class", 0.011788601429509306], ["return", 0.011647139717291442], ["copy", 0.01112266611743244], ["new assertionerror", 0.010836669688248637], ["methods", 0.010213894279749754], ["result", 0.009849701103181929], ["cloneable interface", 0.009373500075238999]]
Methods Common to All Objects	Always override hashCode when you override equals	[["hashcode", 0.05260601659883388], ["hash tables", 0.04887300801131673], ["object specification", 0.044233772217599054], ["significant field", 0.029373259039794736], ["distinct results", 0.028114200295364246], ["distinct instances", 0.026075976001264236], ["good hash function", 0.024963335766305637], ["object", 0.023288224338671736], ["field", 0.01684039724988522], ["method", 0.016833851327664802], ["result", 0.015989498116763826], ["hashcode method", 0.015083629933961907], ["value", 0.014820184194112282], ["class", 0.013738643257991425], ["performance", 0.013153775610509602], ["phonenumber class", 0.012653294899874554], ["hash code", 0.012474052703966537], ["general contract", 0.011724340030127442], ["hash function", 0.011354687973750032], ["hashmap", 0.009816912814660132]]
Creating and Destroying Objects	Consider static factory methods instead of constructors	[["static factory method", 0.0558605499190428], ["class", 0.048304129290435364], ["boolean object reference", 0.032270292465513446], ["public constructor", 0.031321297051024745], ["enum types", 0.02820064943066788], ["instance", 0.02640620239850339], ["implementation classes", 0.02609909264120298], ["item", 0.020417659268627174], ["static method", 0.01997021442034981], ["object", 0.019301643878495], ["interface", 0.018561186969424645], ["api", 0.018513320152648526], ["service provider frameworks", 0.01791183536009845], ["example", 0.017332714372114047], ["client", 0.0163403825600163], ["constructors", 0.014030625835538456], ["type", 0.01175921984825812], ["static factory", 0.010656396720499322], ["advantages", 0.01057669078855256], ["parameters", 0.009030821534396808]]
Creating and Destroying Objects	Consider a builder when faced with many constructor parameters	[["builder", 0.0388971966005641], ["constructors", 0.030942233221937586], ["parameters", 0.0308098525196368], ["int servings", 0.02531841444289132], ["optional parameters", 0.019884947015069154], ["freeze method", 0.01888064220260768], ["client code", 0.017962369336748267], ["public class nutritionfacts", 0.017196196634672523], ["object", 0.01681506952780633], ["pattern", 0.016157372208227976], ["class", 0.016068214606480558], ["sodium", 0.01582211414517653], ["setservings(int val", 0.01459100098439048], ["total fat", 0.013617308089652507], ["servings", 0.013221389674587277], ["pizza", 0.013152068817174277], ["builder pattern", 0.01144732808651736], ["static factories", 0.010522422861826943], ["item", 0.010082920415876854], ["javabeans pattern", 0.009808495160540774]]
Creating and Destroying Objects	Eliminate obsolete object references	[["manual memory management", 0.06011511333196217], ["objects", 0.049874698520922675], ["references", 0.037998712605424756], ["garbage", 0.03647532472158158], ["stack implementation", 0.03531462529985852], ["elements", 0.028195195747097043], ["memory leak", 0.027941642273256413], ["language", 0.026346472207758737], ["caches", 0.023991633850017232], ["array", 0.02259978833608693], ["private int size", 0.02109865798695189], ["program", 0.020348604791475693], ["active portion", 0.015409716431383242], ["object reference", 0.015134025390225923], ["programmer", 0.015017235607209842], ["stack", 0.01419365106900796], ["size", 0.013945871670804008], ["c", 0.012435423060252037], ["entry", 0.01207123777023408], ["problem", 0.011730184636523158]]
Creating and Destroying Objects	Prefer dependency injection to hardwiring resources	[["dependency injection", 0.04977508920060195], ["underlying resources", 0.04672683499478014], ["classes", 0.0467222421463], ["static factories", 0.04314217320310045], ["dictionary", 0.04302421331737555], ["item", 0.028414986477259527], ["factory", 0.024038657258594043], ["inappropriate use", 0.02316981928852338], ["client", 0.021082798401609162], ["constructor", 0.020610850122629216], ["private spellchecker", 0.020598214680171898], ["static utility classes", 0.020139123474009216], ["spell checker", 0.0200215879392161], ["resource", 0.018946598984542037], ["singletons", 0.018140710876449608], ["type", 0.017637042429122098], ["example", 0.01761218949228532], ["public static list", 0.017521698489135963], ["multiple instances", 0.01638083792245586], ["method", 0.01598882058308232]]
Creating and Destroying Objects	Introduction	[["cleanup actions", 0.2314217826078135], ["objects", 0.20334492715027497], ["chapter concerns", 0.1973639240668967], ["destruction", 0.1918782565515234], ["timely manner", 0.17599110962349102]]
Creating and Destroying Objects	Avoid creating unnecessary objects	[["single object", 0.07143305600455578], ["string", 0.03653472929190442], ["object", 0.02915038372893808], ["method", 0.02727941366506604], ["pattern instance", 0.025546013949734502], ["performance", 0.024494035914138616], ["time", 0.024149285414595018], ["item", 0.02191591487958253], ["regular expression", 0.01823458122982517], ["improved version", 0.018220987852952956], ["constructor", 0.01567821289517429], ["sum", 0.01556981849541337], ["immutable classes", 0.014426218492087396], ["extreme example", 0.013610637368772067], ["object creations", 0.013247594306562105], ["implementation", 0.010830344803982836], ["keyset method", 0.009954071357513054], ["map interface", 0.009947596948794142], ["object pool", 0.009770567459814505], ["statement", 0.009309550355213532]]
Creating and Destroying Objects	Enforce noninstantiability with a private constructor	[["class", 0.11714676737184808], ["explicit constructors", 0.09098699051498327], ["static methods", 0.05087157756449971], ["grouping", 0.04768631665075278], ["noninstantiability", 0.03086749130717089], ["java.util", 0.024911744848474093], ["idiom", 0.023763332780246255], ["manner", 0.023571759657433453], ["arrays", 0.02344886343876463], ["constructor", 0.02286108943398233], ["item", 0.022339960490821563], ["subclass", 0.021727411862110527], ["objects", 0.020644437591221088], ["methods", 0.02028194785707001], ["new assertionerror", 0.01943356988297032], ["interface", 0.01858805358665562], ["user", 0.018271048040664744], ["absence", 0.016100667468998804], ["math", 0.014842493305698281], ["java.lang", 0.01470541628826384]]
Creating and Destroying Objects	Avoid finalizers and cleaners	[["finalizers", 0.07734300503582582], ["cleaners", 0.041404165008899936], ["object", 0.03515448000086301], ["methods system.gc", 0.029177949043939524], ["resources", 0.02192785776040932], ["room class", 0.019362876779499768], ["class", 0.017728192974808578], ["portability problems", 0.014717911833933115], ["java", 0.014488134386640698], ["garbage collector", 0.014167750772811], ["erratic behavior", 0.013858877201007107], ["finalizer thread", 0.013482360513795293], ["instances", 0.013465599550233751], ["poor performance", 0.012427645515434184], ["persistent state", 0.01174304515256335], ["time", 0.01149540944137845], ["safety net", 0.011181215560192076], ["guarantee", 0.010925642723089433], ["use", 0.010434194572720596], ["uncaught exception", 0.010232070826746723]]
Creating and Destroying Objects	Prefer try-with-resources to try-finally	[["resources", 0.07522885823859099], ["exception", 0.047057726236609705], ["close method", 0.03347496624423608], ["java libraries", 0.03209115279118617], ["new bufferedreader(new filereader(path", 0.030321029916176287], ["correct code", 0.02923281880018448], ["bufferedreader br", 0.027046278261381503], ["static string", 0.026413431084264465], ["ioexception", 0.02433965513069304], ["statement", 0.024267899135620222], ["try", 0.024095207257797333], ["examples", 0.021684155710278992], ["path", 0.018231636244603555], ["autocloseable interface", 0.014918739209252414], ["classes", 0.01486446687718021], ["best way", 0.0143856486320015], ["catch clauses", 0.014162869859502818], ["code", 0.01379259532681643], ["inputstream", 0.013767188259012356], ["br.readline", 0.013141443587123564]]
Creating and Destroying Objects	Enforce the singleton property with a private constructor or an enum type	[["singleton", 0.08543153292884491], ["public class elvis", 0.0636467511489251], ["sole instance", 0.04705122088412288], ["final field", 0.041541677643512784], ["static factory method", 0.03578671011358722], ["approach", 0.030953458338523462], ["public static member", 0.030697296438825676], ["constructor", 0.02628425136726065], ["main advantage", 0.023176215957519054], ["class", 0.02167054936639494], ["accessibleobject.setaccessible method", 0.020245623478060894], ["item", 0.018622098059541868], ["stateless object", 0.01823000883543068], ["instance", 0.0177762618293331], ["static factory", 0.015127249830310573], ["common ways", 0.014615203175568635], ["clients", 0.014546979736752685], ["element enum", 0.013219976896536962], ["public final field", 0.01318583557873979], ["advantage", 0.012707917738135687]]
Exceptions	Use checked exceptions for recoverable conditions and runtime exceptions for programming errors	[["exceptions", 0.11507482438381347], ["conditions", 0.039905823518225844], ["errors", 0.039278269136862845], ["throwables", 0.037352594437712425], ["method", 0.029087599907436368], ["api designer", 0.02488535667072263], ["resource exhaustion", 0.020732261969430673], ["api user", 0.018799583968167544], ["new error subclasses", 0.017113877601688657], ["runtime exceptions", 0.016416948284717067], ["recovery", 0.015229517059314733], ["item", 0.01488138050821484], ["caller", 0.014477937802137034], ["unchecked exception", 0.014258481332385302], ["use", 0.013831971751029206], ["programming errors", 0.013391293533622837], ["string representation", 0.013320433030833688], ["kinds", 0.012929760021695871], ["additional information", 0.012704900904207535], ["runtimeexception", 0.012101349365920342]]
Exceptions	Throw exceptions appropriate to the abstraction.	[]
Exceptions	Document all exceptions thrown by each method.	[]
Exceptions	Favor the use of standard exceptions	[["exceptions", 0.1148222246463452], ["object", 0.03066789322338475], ["caller", 0.02879324173435009], ["fewer exception classes", 0.027204141213523995], ["negative number", 0.026404059794854357], ["argument", 0.02597423292407375], ["illegalargumentexception", 0.024224275776305735], ["value", 0.021988960946191665], ["parameter", 0.020809958829075118], ["example", 0.018071630080202322], ["code reuse", 0.0170708644338557], ["less time", 0.016043378522515663], ["deck", 0.01582839783742171], ["methods", 0.015745506990980703], ["state", 0.014145892378258529], ["use", 0.013553262904982788], ["apis", 0.013383419647393013], ["cards", 0.012397489319637788], ["illegalstateexception", 0.012266539201131105], ["expert programmers", 0.010711277850391433]]
Exceptions	Introduction	[["exceptions", 0.15938152685325277], ["readability", 0.12893688424887048], ["reliability", 0.11864659480230211], ["program", 0.11503575433026986], ["chapter", 0.10684476983484514], ["guidelines", 0.10413581058386798], ["maintainability", 0.0911283330164904], ["best advantage", 0.08916485694951318], ["opposite effect", 0.08672546938058776]]
Exceptions	Avoid unnecessary use of checked exceptions	[["exceptions", 0.12362751832283014], ["method", 0.0732241463771474], ["apis", 0.05271734006789328], ["programmers", 0.027489770648273397], ["calling sequence", 0.027325370936723017], ["catch blocks", 0.026232788691651108], ["unchecked exceptions", 0.025128909528624403], ["items", 0.024135118022140533], ["exceptional condition", 0.022875154236317342], ["burden", 0.02187970574207471], ["state", 0.020197632488302957], ["optional", 0.017892162672098248], ["additional information", 0.017751928413237295], ["useful action", 0.017546116805757295], ["way", 0.01709245872949325], ["refactoring", 0.016581970966122624], ["thecheckedexception e", 0.01556217012737803], ["result type", 0.015091748098343058], ["catch", 0.014261404230998993], ["return codes", 0.012811656687590238]]
Exceptions	Include failure-capture information in detail messages	[["uncaught exception", 0.08025739886701487], ["software failure", 0.05633880552835286], ["detail message", 0.05078212868383719], ["exception", 0.047436851576315636], ["information", 0.0442952356646106], ["failure", 0.03257992862694526], ["stack trace", 0.02746929058753557], ["values", 0.021980022058419053], ["@param upperbound", 0.02021400984851924], ["fencepost error", 0.019335083259744503], ["system", 0.01925011838411078], ["public indexoutofboundsexception(int lowerbound", 0.018529027086663392], ["index", 0.017766920600432792], ["upper bound", 0.015764669599983294], ["tostring method", 0.015635057270163306], ["user", 0.014198721038229169], ["indexoutofboundsexception", 0.013918993187858084], ["constructors", 0.013202966593648403], ["program", 0.012815561855418699], ["site reliability engineers", 0.012524989406051963]]
Exceptions	Favor the use of standard exceptions.	[]
Exceptions	Strive for failure atomicity	[["object", 0.09130657173779057], ["failure", 0.06060514965693498], ["usable state", 0.0398787397989214], ["operation", 0.03761382833958835], ["failure atomicity", 0.033995014642149386], ["element", 0.03078173435092412], ["method", 0.03068415283212936], ["approach", 0.028988090960858016], ["state", 0.026738047186105784], ["exception", 0.022607288904644914], ["method invocation", 0.021592878839032614], ["item", 0.020574554384812576], ["example", 0.019731522566041985], ["part", 0.019440017527520066], ["ways", 0.016347577889437317], ["data", 0.015237576813372752], ["computation", 0.015043214958534813], ["treemap", 0.014823347471128262], ["midst", 0.014797262729349132], ["size", 0.014571319449412711]]
Exceptions	Don’t ignore exceptions	[["exception", 0.11483593907610373], ["catch block", 0.08171953549389567], ["empty catch block", 0.03230091290159986], ["try statement", 0.029230462613588606], ["method", 0.02582969009331631], ["int numcolors", 0.024032830770884254], ["program", 0.02282356752642284], ["future", 0.021522714883771613], ["programming error", 0.020918856825057855], ["default", 0.020308699742432358], ["fire alarm", 0.01904088258068196], ["catch", 0.01824678620521024], ["file", 0.01806711072107636], ["information", 0.016869176819596106], ["failure", 0.015082620887837347], ["advice", 0.014178884872853511], ["f.get(1l", 0.014020961541300957], ["method invocation", 0.01380524089477594], ["timeunit", 0.013666364491917968], ["api", 0.013607707274776854]]
Exceptions	Document all exceptions thrown by each method	[["exceptions", 0.12934996086475276], ["method", 0.11412887295272485], ["multiple exception classes", 0.05274905140680249], ["documentation", 0.03668525105409847], ["unchecked exceptions", 0.03424251303470368], ["class", 0.026844382700215164], ["throwing", 0.02369416316909581], ["tag", 0.023322348791789536], ["interfaces", 0.020309141470976497], ["programmers", 0.020073091024936797], ["javadoc", 0.018387763275278423], ["item", 0.01772061685534029], ["superclass", 0.015897390757327216], ["programming errors", 0.015646123286647478], ["declaration", 0.014046530326994697], ["important part", 0.013649592329295959], ["common behavior", 0.012923031357620124], ["public method", 0.012887732339636597], ["preconditions", 0.011477599434520248], ["throws clause", 0.01072601041599943]]
Exceptions	Use exceptions only for exceptional conditions	[["exceptions", 0.05665425783835718], ["infinite loop", 0.04531163744006211], ["state", 0.03816786013992728], ["method", 0.03359215852142626], ["array", 0.03145422585044051], ["explicit tests", 0.02959994707598235], ["idiom", 0.026968013688750105], ["loop", 0.026811279380339545], ["bug", 0.022705781303023528], ["catch", 0.021172365726758655], ["code", 0.019323758542788522], ["testing method", 0.01630255310271592], ["elements", 0.01626896691987155], ["distinguished value", 0.0160764126867612], ["iterator interface", 0.015810490868636645], ["performance", 0.015717325960248114], ["jvm implementors", 0.015640008884532913], ["flow control", 0.013982211928157864], ["dependent method", 0.013468248698110197], ["bounds", 0.013139906250033329]]
Exceptions	Throw exceptions appropriate to the abstraction	[["exception", 0.14438691003692614], ["higher layer", 0.05735773782714459], ["method", 0.04952396827192212], ["cause", 0.03846349983895789], ["level exceptions", 0.02851259529038794], ["exception translation", 0.02572990955128825], ["level abstraction", 0.02527124398606812], ["constructor", 0.02371885079514127], ["lower layers", 0.023560828382481865], ["implementation details", 0.02337511800551935], ["lowerlevelexception e", 0.022829105052169986], ["problem", 0.021781214853333692], ["catch", 0.01850459550757109], ["index", 0.017156006975242374], ["new higherlevelexception", 0.016952250218183206], ["level methods", 0.015472431219050536], ["throwable ’s", 0.01441092425975619], ["bidding", 0.012783026871469233], ["client programs", 0.012264061086827129], ["list interface", 0.011606874217519214]]
Exceptions	Include failure-capture information in detail messages.	[]
Introduction	Introduction	[["java", 0.05908937757659245], ["book", 0.045669016260684064], ["items", 0.04427739763958982], ["last edition", 0.02835909876808837], ["platform", 0.026172062223236453], ["java programming language", 0.021417021354594612], ["interfaces item", 0.020929238563169847], ["new features", 0.01821063386175828], ["standard edition", 0.01792868841161057], ["classes", 0.017787511421992967], ["api", 0.016888072869903847], ["multiple packages", 0.015427027713682517], ["default methods", 0.01481022140427863], ["fundamental libraries", 0.014520342199858094], ["rule", 0.012719961000535048], ["program examples", 0.011886119355707431], ["interfaces", 0.011874736633984617], ["technical terms", 0.010357184362078387], ["examples", 0.00961191015676327], ["time", 0.009593500346844988]]
Classes and Interfaces	Favor static member classes over nonstatic	[["class", 0.11563375691872116], ["static member classes", 0.08360146269644214], ["instance", 0.04348452647448134], ["nonstatic member classes", 0.02858466594354293], ["kinds", 0.021704409342630418], ["map interface", 0.0213733190696694], ["anonymous classes", 0.01896497611856068], ["instance methods", 0.0161062186978564], ["common use", 0.015820121647611034], ["calculator", 0.015473792595695864], ["enclosing instance", 0.014983413182495247], ["operations", 0.01356434842962615], ["implementations", 0.013462757580165598], ["reference", 0.013061610789122824], ["map", 0.012542600539356286], ["modifier static", 0.011989744376462007], ["item", 0.011978849357632463], ["internal entry object", 0.011766535195568306], ["iterators", 0.01094213341869042], ["e", 0.010696867884724242]]
Classes and Interfaces	Prefer interfaces to abstract classes	[["abstract classes", 0.07483816723907874], ["interfaces", 0.07073178020139434], ["multiple implementations", 0.06610845854048052], ["default methods", 0.04286185039439462], ["type", 0.03886867189285687], ["class", 0.02164940190075268], ["skeletal implementation", 0.018468224232613902], ["example", 0.014936446678245702], ["single inheritance", 0.012185355176402424], ["java", 0.01024327018996014], ["integer", 0.010176128112622442], ["mixins", 0.010054887372649387], ["entry interface", 0.009979251934455324], ["map", 0.00953422884096264], ["item", 0.009217143039169595], ["songwriter", 0.009026413671872008], ["implementations", 0.008769660899856226], ["skeletal implementation class", 0.008563514597382554], ["singer", 0.008527090333656498], ["instance methods", 0.008269507329484966]]
Classes and Interfaces	Design and document for inheritance or else prohibit it	[["method", 0.07058168735773257], ["class", 0.04174440992099531], ["efficient subclasses", 0.03272291241203575], ["inheritance", 0.024052641180497342], ["implementation requirements", 0.0209603255055123], ["subclasses", 0.019492828156081176], ["element", 0.01799575906720304], ["overridable methods", 0.016885091171176307], ["void removerange(int fromindex", 0.013517411454399194], ["collection", 0.013291079097532327], ["list", 0.012210425124401106], ["iterator", 0.011869471342500002], ["documentation", 0.011734924819768388], ["constructors", 0.01080858305896631], ["programmer", 0.010550960484573447], ["self", 0.009979629180372245], ["int toindex", 0.009541896596879493], ["clone", 0.009294479789007402], ["public class super", 0.009059875137123877], ["use", 0.008971264555551688]]
Classes and Interfaces	Use interfaces only to define types.	[]
Classes and Interfaces	Prefer class hierarchies to tagged classes	[["class", 0.0771930563599976], ["fields", 0.03652372357506962], ["rectangle", 0.03593462996484895], ["enum shape", 0.03471200001489505], ["flavors", 0.03332373967652692], ["class hierarchy", 0.032176244313875405], ["circle", 0.02719651229668272], ["figure(double radius", 0.026415372286819516], ["shape", 0.02400377868512467], ["tag field", 0.022232293605251672], ["figure(double length", 0.0207327842520555], ["abstract method", 0.02067138381185856], ["double width", 0.02013782694355534], ["constructor", 0.017137047369034947], ["double length", 0.015907080494881518], ["root", 0.014361137933004538], ["double area", 0.012682579832921856], ["multiple implementations", 0.01202398032864924], ["data type", 0.011303544286945473], ["radius", 0.01125207738737239]]
Classes and Interfaces	Introduction	[["interfaces", 0.14284031949790427], ["classes", 0.13813265129342572], ["java programming language", 0.12054113148093464], ["powerful elements", 0.10369287881624986], ["abstraction", 0.07295705407519018], ["basic units", 0.06982744674559116], ["heart", 0.0667716501386207], ["chapter", 0.06440790141742525], ["language", 0.06086906530044553], ["guidelines", 0.05989358554615669], ["best use", 0.05272530240803475], ["elements", 0.04734101328002119]]
Classes and Interfaces	In public classes, use accessor methods, not public fields	[["degenerate classes", 0.1455588281043557], ["classes", 0.056870901030389186], ["field", 0.03815943255015415], ["group instance fields", 0.0368197162364126], ["public double", 0.02925558955046383], ["class point", 0.027754211239475985], ["purpose", 0.027542599227423532], ["public accessor methods", 0.02545388285741187], ["data fields", 0.02530635864629686], ["package", 0.02204525796436457], ["int minute", 0.020821788948184893], ["public time(int hour", 0.020495223818882052], ["public classes", 0.020241697245700255], ["client code", 0.01962785506366788], ["representation", 0.017667883272236406], ["encapsulation", 0.0154149688211381], ["internal representation", 0.014153792155613989], ["prominent examples", 0.014036136123907774], ["change", 0.011978033160900469], ["item", 0.01196867907184293]]
Classes and Interfaces	Favor composition over inheritance	[["classes", 0.04291662509507526], ["methods", 0.03769913998016832], ["inheritance", 0.023254630059790712], ["superclass implementations", 0.021650547615085804], ["e", 0.021332673741031268], ["subclass", 0.02120981274324572], ["return super.add(e", 0.01882829398784704], ["elements", 0.01879109786221585], ["addall", 0.01648438226019837], ["hashset", 0.01634953624456116], ["superclass", 0.015234550442896486], ["implementation details", 0.013087276288923736], ["private int addcount", 0.012480045400711551], ["composition", 0.010591839808587668], ["forwarding", 0.01058035343722808], ["instance", 0.010127453120617138], ["interface inheritance", 0.009596388603939639], ["addall method", 0.009409506141362402], ["implements set", 0.009396879980645182], ["wrapper class", 0.009119230139622828]]
Classes and Interfaces	Design interfaces for posterity	[["methods", 0.10115979263391953], ["interfaces", 0.06466384033281532], ["java", 0.0464067861759428], ["implementations", 0.04368604610726252], ["core collection interfaces", 0.032801624325156445], ["default method", 0.03204298057938038], ["default implementation", 0.027680552744464987], ["classes", 0.020762184354598805], ["removeif method", 0.015506453866518468], ["iterator", 0.012773709053508147], ["collection", 0.012742368556080495], ["client", 0.012535569130344586], ["synchronizedcollection", 0.011869250230537767], ["collection interface", 0.011306856513721025], ["elements", 0.011009568945405019], ["new method", 0.010717358517271437], ["predicate", 0.010420070287693279], ["boolean function", 0.009767500365802113], ["time error", 0.008976027661882529], ["boolean result", 0.008918957916982603]]
Classes and Interfaces	Limit source files to a single top-level class	[["level classes", 0.11782305750074826], ["single source file", 0.09026163562764199], ["java compiler", 0.05586967967184671], ["dessert", 0.05022945618193385], ["utensil", 0.04937769782231749], ["class", 0.034255914314328964], ["members", 0.03045719758078707], ["source file", 0.02783250975659689], ["compiler", 0.027807416691891254], ["main program prints", 0.025731805515590466], ["multiple definitions", 0.023407558392755896], ["name", 0.021330668701855487], ["static member classes", 0.01974995050286459], ["program", 0.017959122691434473], ["significant risks", 0.014938116957347628], ["utensil.java", 0.014018651514740731], ["main.java", 0.013705344146661903], ["order", 0.013463189827705578], ["system.out.println(utensil", 0.013064470923624614], ["class utensil", 0.012890845606105372]]
Classes and Interfaces	Use interfaces only to define types	[["interface", 0.10865236407067319], ["class", 0.10116478165327773], ["constants", 0.06396363466364158], ["static final fields", 0.03152307432924104], ["poor use", 0.029902396153815458], ["constant interface", 0.023299828722556502], ["numeric literals", 0.0206433587627227], ["example", 0.019575087737766315], ["private physicalconstants", 0.018596451059798617], ["underscore character", 0.017515608549297356], ["public interface physicalconstants", 0.017514485566160445], ["type", 0.016723687013288392], ["use", 0.014971343136366229], ["mol", 0.012896597390536866], ["class name", 0.012643387938526035], ["implementation detail", 0.012611308870471662], ["physicalconstants", 0.011859351796541465], ["instances", 0.01171740797512162], ["underscores", 0.01171735328232191], ["java platform libraries", 0.0107051187482056]]
Classes and Interfaces	Minimize the accessibility of classes and members	[["classes", 0.06111602573745207], ["package", 0.039683898127184786], ["access control mechanism", 0.031718644136387746], ["members", 0.0313136775991971], ["level", 0.029515086526503715], ["fields", 0.02737956924696086], ["component", 0.025182441799099873], ["module", 0.024143907818552253], ["interfaces", 0.019098944591070147], ["information hiding", 0.018573128807283176], ["accessibility", 0.017699940276671593], ["system", 0.017177199228226813], ["api", 0.016800578038365616], ["part", 0.015663793668989262], ["item", 0.015029048788911384], ["implementation details", 0.01413287781182475], ["length array", 0.011147190531897637], ["mutable object", 0.010577292231486764], ["public class", 0.010129901512355613], ["reference", 0.009711975518653994]]
Classes and Interfaces	Minimize mutability	[["immutable class", 0.04911565903204163], ["object", 0.03126967513010787], ["class", 0.02734094069241671], ["items", 0.02433607583414471], ["methods", 0.02300531501347003], ["biginteger", 0.016216598513684073], ["new complex(re", 0.016092016497768827], ["complex example", 0.015231921063261092], ["state", 0.014517918604441328], ["fields", 0.014464757603093771], ["private final double", 0.013066184908583484], ["instances", 0.012743010858313536], ["constructors", 0.012474127744941638], ["example classes", 0.011986868567368743], ["immutable objects", 0.011127510187165858], ["clients", 0.01099131293209262], ["imperative approach", 0.01033351148608775], ["basic arithmetic operations", 0.009229069770880508], ["values", 0.00878627237257344], ["static factories", 0.008679046379719946]]
Methods	Make defensive copies when needed	[["classes", 0.04412739587902327], ["date end", 0.036860585934606005], ["defensive copy", 0.032993756920786224], ["object", 0.02893047843532549], ["clients", 0.02616952108785234], ["native methods", 0.023474810264652972], ["period instance date", 0.023425875396202875], ["internal state", 0.02177028718300791], ["constructor", 0.020192825050154038], ["mutable parameter", 0.020143056823690823], ["period", 0.020102924712444452], ["end", 0.01868046093538016], ["time", 0.017174188355459603], ["attack", 0.016237590285297913], ["components", 0.013428270382315904], ["invariants", 0.013204751330112735], ["parameters", 0.012181135318161734], ["mutable internals", 0.010990976128111438], ["safe language", 0.010893992301112335], ["item", 0.01067614159761162]]
Methods	Introduction	[["method design", 0.18917631083120925], ["chapter", 0.1795282321381803], ["aspects", 0.10344605457790673], ["parameters", 0.07351852520701549], ["methods", 0.07132626607029653], ["values", 0.06784091726270515], ["usability", 0.06044610139672228], ["robustness", 0.05855646261482447], ["material", 0.055983956993357065], ["constructors", 0.05561930985574118], ["flexibility", 0.04552700934145999], ["method signatures", 0.039030853710581764]]
Methods	Use varargs judiciously	[["varargs methods", 0.07821214412649245], ["varargs facility", 0.05949233810308167], ["arguments", 0.056649564153441474], ["int arguments", 0.03996825539718706], ["array", 0.037160913557150885], ["varargs", 0.03682176803122555], ["args", 0.03270665114613408], ["int min", 0.027261053560512387], ["sum", 0.024993137769196424], ["method", 0.024327073141688627], ["specified type", 0.02395967303262763], ["number", 0.02333795410787113], ["parameters", 0.01781722420095796], ["example", 0.014195282269693323], ["performance", 0.014087635388243981], ["min", 0.014060619461041606], ["sequence", 0.013418530351976491], ["value", 0.011964625462535237], ["call site", 0.011431467541132575], ["wrong way", 0.01120489312732075]]
Methods	Return optionals judiciously	[["optional", 0.09707336405058875], ["method", 0.054863304201268843], ["exception", 0.0271757843048484], ["value", 0.02668393891039861], ["e", 0.025567314227596116], ["null", 0.023869121708277614], ["streams return optionals", 0.022407059537022964], ["immutable collection", 0.020179194451210872], ["map methods", 0.01369431792507112], ["stream", 0.01358128362267279], ["collection", 0.01346581703486742], ["item", 0.013276687547315659], ["return type", 0.012890526871564386], ["clients", 0.01120113294960627], ["case code", 0.01044894677760499], ["empty result", 0.010396614866576708], ["instance field", 0.010385939179205144], ["boxed primitive type", 0.009589235237464208], ["element", 0.00926215842474796], ["java", 0.009246749476435806]]
Methods	Return empty collections or arrays, not nulls	[["cheese", 0.07304914119595055], ["array", 0.057520324398417304], ["empty collection", 0.05413821227054605], ["private final list", 0.04384811958407511], ["null", 0.03333869925256852], ["performance", 0.032183041934710485], ["methods", 0.028087747299253063], ["getcheeses", 0.027520620195895455], ["returns", 0.021972557015289673], ["empty container complicates", 0.0212295155675969], ["new arraylist<>(cheesesinstock", 0.020199268998434945], ["place", 0.01931488256086948], ["public list", 0.01918479521673996], ["extra code", 0.015993973493559747], ["cheesesinstock", 0.014790605424106682], ["error", 0.014328430270307476], ["case", 0.014174728946260056], ["empty array", 0.013809152648561602], ["situation", 0.013525872996103026], ["client", 0.013008872096458434]]
Methods	Write doc comments for all exposed API elements	[["documentation comments", 0.0524752644860182], ["method", 0.0256372627763222], ["doc comments", 0.02484646891208357], ["javadoc utility", 0.02449637888807573], ["api", 0.021749868305397286], ["important doc tag", 0.01840879750642519], ["html tags", 0.018298766177224687], ["api documentation", 0.017908690897452412], ["class", 0.01686106797721907], ["code", 0.014661835688473538], ["java programmer", 0.014443153105731693], ["javadoc", 0.013929524274524005], ["description", 0.012838375051763815], ["tags", 0.010846010127269653], ["java", 0.010278607868292758], ["item", 0.00944677195809838], ["example", 0.009061963830631617], ["documentation", 0.00875350281247517], ["type parameters", 0.008615395773038654], ["use", 0.008319235599076142]]
Methods	Use overloading judiciously	[["overloading", 0.048321145917996876], ["overridden methods", 0.04634201003418829], ["class wine", 0.021815088144427147], ["parameter", 0.020590934623904177], ["lists", 0.019451522048777398], ["collections", 0.01817317860511399], ["public class collectionclassifier", 0.01785852009937362], ["sets", 0.017814250968480733], ["compiletime type", 0.017097780861212757], ["string name", 0.016044270195884055], ["times", 0.01603499728644653], ["program", 0.015238352892291713], ["compile time", 0.01504824379612154], ["constructors", 0.012773965727047393], ["collectionclassifier example", 0.01269070278238444], ["method", 0.012480588583225895], ["runtime type", 0.011501245654071695], ["wine", 0.011135980837090213], ["return", 0.010780033424871641], ["behavior", 0.010662976457519171]]
Methods	Design method signatures carefully	[["long parameter lists", 0.06413821965238505], ["convenience methods", 0.054791467697675636], ["class", 0.03828504905436054], ["method", 0.03398390486592029], ["parameters", 0.030359861620039282], ["method names", 0.026862925534680678], ["interfaces", 0.022096069433120976], ["item", 0.021851120967830723], ["enum types", 0.019516653122818972], ["api design hints", 0.01821602705483293], ["sublist", 0.01380878874835818], ["techniques", 0.013698828121183481], ["example", 0.01350794642040792], ["helper classes", 0.011473126250701581], ["broader consensus", 0.011241541529580408], ["element", 0.010981098690117437], ["api", 0.010923261384969943], ["names", 0.01079106733083802], ["java library apis", 0.010762437799331587], ["boolean parameters", 0.010505773960646421]]
Methods	Check parameters for validity	[["methods", 0.07897527640302159], ["parameters", 0.04467289529133285], ["appropriate exception", 0.034112563809550515], ["restrictions", 0.022048975288008463], ["object references", 0.02196210281020757], ["list", 0.019496396081637137], ["normal validity checks", 0.019419110335664923], ["use", 0.018502554879261834], ["assertions", 0.01683197711586392], ["object", 0.015485389992897936], ["undetermined time", 0.014893282552213739], ["exception", 0.013863328677516006], ["values", 0.012940432594184257], ["checks", 0.012730298691417207], ["item", 0.012640134687604566], ["null checks", 0.012540269413416617], ["facility this.strategy", 0.01228975456830994], ["computation", 0.011862961379263542], ["java", 0.01162117404801314], ["example", 0.010404038743265037]]
Lambdas and Streams	Prefer method references to lambdas	[["method references", 0.09921138843811844], ["lambdas", 0.06348148460666875], ["reference", 0.039975422588554924], ["value", 0.031196287671834487], ["map", 0.030682604946174617], ["arbitrary keys", 0.030093813968127273], ["function", 0.02774149878900419], ["method", 0.027515644868506342], ["anonymous classes", 0.02666628505949528], ["function objects", 0.02661248567252239], ["code snippet", 0.02440009808825374], ["parameters", 0.02210725430834171], ["code", 0.020073146507374486], ["key", 0.01758747079442418], ["integer values", 0.01593212791394521], ["java", 0.01526430340316988], ["program", 0.013875557692031023], ["number", 0.012353538682137701], ["kinds", 0.01223296188608876], ["class", 0.011727179425512746]]
Lambdas and Streams	Introduction	[["functional interfaces", 0.14103104706555095], ["lambdas", 0.09634614949322091], ["sequences", 0.07482225373903367], ["data elements", 0.07279843545487144], ["library support", 0.07185661875831185], ["method references", 0.07168463953270551], ["language changes", 0.07017799380988826], ["java", 0.06710760542427764], ["streams api", 0.0663910375446884], ["tandem", 0.06474557356281158], ["chapter", 0.054062270796630243], ["function objects", 0.05217955907977898], ["best use", 0.05127712087771541], ["facilities", 0.04551969486051512]]
Lambdas and Streams	Prefer side-effect-free functions in streams	[["streams", 0.03983485979240875], ["collector", 0.0373307959866832], ["map", 0.027123389643007267], ["elements", 0.02364417878642363], ["functional programming", 0.021385597017543223], ["method references", 0.019341386332278256], ["string", 0.016653900833315465], ["words", 0.01650976565124631], ["streams code", 0.015222524255818897], ["value", 0.014539808302711711], ["key", 0.013929879985566333], ["stream operations", 0.013323705592635406], ["frequency table", 0.012273890009317072], ["collection", 0.011649782430042955], ["tomap collector", 0.011482953901384303], ["groupingby method", 0.011099599769524906], ["result", 0.01054580521661844], ["computation", 0.009993082353104884], ["comparator", 0.009823968015089446], ["form", 0.009802680073609089]]
Lambdas and Streams	Use streams judiciously	[["stream", 0.06325443079918977], ["data elements", 0.03733041609552709], ["bulk operations", 0.02763292979892884], ["stream pipeline", 0.023278794755531573], ["primitive values", 0.02037426189220408], ["elements", 0.020185389687251785], ["computeifabsent method", 0.01867394443311087], ["programs", 0.017681235388499337], ["words", 0.016099838523720836], ["key abstractions", 0.013739234154961238], ["anagram groups", 0.01360366481802285], ["map", 0.012521754338704], ["dictionary file", 0.01171928640437925], ["code", 0.010889083182493573], ["task", 0.010697169636427197], ["streams api", 0.010521984840949144], ["multistage computation", 0.009413918540689693], ["values", 0.008936197829170954], ["infinite sequence", 0.008837425481816314], ["terminal operation", 0.008663458571778365]]
Lambdas and Streams	Use caution when making streams parallel	[["streams", 0.04475571234184801], ["parallel decomposition", 0.03609057571297342], ["stream pipeline", 0.03366843480292987], ["concurrent programming", 0.026527840769391447], ["java", 0.025256057106426557], ["bulk operations", 0.018490828469408895], ["performance", 0.016727614686858898], ["pipeline", 0.016581502676401568], ["parallelism", 0.015422386041687173], ["executor framework", 0.014972756953039498], ["reference", 0.014294564381932374], ["data structures", 0.013235499937154062], ["extra elements", 0.011192688250157139], ["concurrent collections", 0.011169780380126797], ["threads", 0.010941993425102848], ["excellent locality", 0.010927835974804909], ["program", 0.009736744652553668], ["memory", 0.009006916301828101], ["join package", 0.008487107994266167], ["spliterator", 0.008296365346264753]]
Lambdas and Streams	Favor the use of standard functional interfaces	[["functional interface", 0.07578559055601049], ["function object", 0.037379795984286604], ["map", 0.02778674010849192], ["template method pattern", 0.02537990948525038], ["eldest entry", 0.02450033521246995], ["argument types", 0.020528865149303938], ["function", 0.01803092426992086], ["k", 0.01541064665304139], ["primitive types", 0.013985820866764398], ["boolean removeeldestentry(map", 0.013824818875485213], ["interface", 0.013539154881560551], ["example", 0.013277426381798588], ["entries", 0.012980215714793852], ["v", 0.012511745228130321], ["predicate interface", 0.012013128320857873], ["constructor", 0.011606566749042193], ["variants", 0.011315754701295434], ["methods", 0.010799411542070316], ["apis", 0.009793026814841269], ["removeeldestentry method", 0.009665277053987275]]
Lambdas and Streams	Prefer Collection to Stream as a return type	[["streams", 0.05060386189554947], ["iterable", 0.043166091662750504], ["methods", 0.0421863552034077], ["e", 0.03911171988494066], ["collection interface", 0.02813786936315698], ["sequences", 0.025441210893614292], ["elements", 0.019284343174434358], ["obvious return types", 0.01720605142324839], ["list", 0.016337801611228588], ["public static", 0.01488498296497723], ["good code", 0.014295010505906898], ["adapter method", 0.013679937313250753], ["power set", 0.013481977190746104], ["set", 0.01150157718507229], ["sublists", 0.011213079565270902], ["c", 0.011111463310554043], ["collection", 0.009993310893738977], ["efficient implementations", 0.009790754254374636], ["java", 0.00978025774257392], ["loops", 0.009774063077526764]]
Lambdas and Streams	Prefer lambdas to anonymous classes	[["lambda expressions", 0.05988320857394071], ["abstract classes", 0.05900385510238048], ["function objects", 0.04174068855384921], ["lambdas", 0.03668545805144539], ["function types", 0.036611895519670326], ["anonymous class", 0.030901834194142785], ["instances", 0.029688790725548975], ["interfaces", 0.029444289652309597], ["single abstract method", 0.026002181498517622], ["strings", 0.02210480925877018], ["item", 0.019348040757093378], ["operation enum type", 0.018954976499664898], ["new comparator", 0.013427874765011883], ["code snippet", 0.013339910915431302], ["types", 0.011774496347469432], ["behavior", 0.011593511586566735], ["java", 0.011205314592594978], ["return value", 0.010104674033174754], ["double", 0.010078066685071283], ["functional programming", 0.01006585467982096]]
Lambdas and Streams	Prefer Collection to Stream as a return type.	[]
Enums and Annotations	Use EnumMap instead of ordinal indexing	[["phases", 0.047012534138737586], ["map", 0.03525734899230293], ["array", 0.03277145378701056], ["enummap", 0.029631924151468942], ["plant", 0.026298145180741115], ["public enum transition", 0.02321006838174628], ["program", 0.019477978093799794], ["gas", 0.018916007840151478], ["new set[plant", 0.014801164531788157], ["liquid", 0.014745126490564375], ["enum lifecycle", 0.013916185067311241], ["enum", 0.013394665347260363], ["original version", 0.01333208713596892], ["ordinal method", 0.011779659194800878], ["transitions", 0.011765361783735571], ["solid", 0.011596825565056534], ["garden", 0.011326940416583855], ["item", 0.01069742667518063], ["stream", 0.010581077728843678], ["plasma", 0.009688288394028955]]
Enums and Annotations	Use instance fields instead of ordinals	[["enums", 0.1027934163612624], ["single int value", 0.08495107773532401], ["ordinal method", 0.0504761240308916], ["constants", 0.03468760983611816], ["quartet", 0.030998436438809854], ["int value", 0.022741948732717267], ["octet", 0.021914052127417552], ["ordinal", 0.021341678988130212], ["public int numberofmusicians", 0.019294597192994624], ["musicians", 0.017635738258645322], ["quintet", 0.01763117321964289], ["numberofmusicians method", 0.01748784440269749], ["trio", 0.017404112776869714], ["ensemble(int size", 0.017374034864464323], ["septet", 0.016555534656962023], ["duet", 0.016036738057488904], ["use", 0.015904749140105826], ["numerical position", 0.015456063560271259], ["nonet", 0.015197015999792264], ["ensemble", 0.0143049064168189]]
Enums and Annotations	Prefer annotations to naming patterns	[["annotations", 0.06940181963095018], ["test methods", 0.0453455238345514], ["characters test", 0.04064503545881074], ["exception", 0.02844967941608655], ["class testsafetymechanisms", 0.025109390874710136], ["test", 0.018965314816947496], ["methods", 0.016397622463866616], ["program elements", 0.01605081483712184], ["parameter", 0.015349015142965106], ["example", 0.01217568733479629], ["annotated code", 0.011512513751163867], ["annotation type", 0.011210807324654633], ["array", 0.010961651045045689], ["names", 0.01094048545095534], ["tool", 0.01079910472677092], ["class", 0.010144999095088397], ["runtime", 0.009503919918363768], ["junit", 0.008864116131356858], ["parameter values", 0.008785218863230027], ["type", 0.00877521890097588]]
Enums and Annotations	Consistently use the Override annotation.	[]
Enums and Annotations	Introduction	[["reference types", 0.20561620216849083], ["kind", 0.15674973623381577], ["purpose families", 0.14097368653762024], ["class", 0.09110186982818543], ["interface", 0.0736833290439138], ["chapter", 0.06343931836122352], ["best practices", 0.05987618928120031], ["enum type", 0.05804045839708516], ["java", 0.05711388452506847], ["annotation type", 0.05409970231183157], ["type families", 0.03930562331156512]]
Enums and Annotations	Consistently use the Override annotation	[["method declarations", 0.0857532263118527], ["class bigram", 0.05284369409686304], ["override annotation", 0.03500777968023408], ["large class", 0.03159066699766707], ["method", 0.02803643104445093], ["annotation types", 0.026586844779098492], ["program", 0.026523260878483782], ["bigram", 0.023912497163270548], ["interfaces", 0.02374332914469186], ["nefarious bugs", 0.02114552187668247], ["declaration", 0.018060892303578355], ["compiler", 0.017818551681492472], ["set", 0.017782822854792546], ["error", 0.01710450746112506], ["private final char", 0.016682552746344222], ["superclass", 0.015305746002480277], ["supertype", 0.015057404742511016], ["public boolean equals(bigram", 0.014924815700307705], ["type object", 0.01467392566583385], ["annotation", 0.014475750245665478]]
Enums and Annotations	Use enums instead of int constants.	[]
Enums and Annotations	Use marker interfaces to define types	[["marker interface", 0.15160322795094955], ["marker annotations", 0.07886611054873609], ["method declarations", 0.04626934979239013], ["type", 0.044764456847804196], ["interface", 0.035832021574969355], ["class", 0.0351314988069773], ["method", 0.024822940170489187], ["object", 0.02434806867709885], ["advantages", 0.02201769606619777], ["compile time", 0.01962306817774684], ["instances", 0.01667052069346262], ["marks", 0.0162319191064483], ["annotation", 0.014494710999791353], ["marker", 0.014262244579045158], ["heavy use", 0.013841107463314618], ["subtypes", 0.012490958969836749], ["frameworks", 0.012411748355225216], ["argument", 0.011636157416781126], ["serializable interface", 0.011120278559744007], ["target elementtype", 0.010964243842463412]]
Enums and Annotations	Use EnumSet instead of bit fields	[["bit field", 0.07646712470911576], ["sets", 0.055938465756320215], ["style _ constants", 0.03965432697842367], ["enumset", 0.03794887636083056], ["enum pattern", 0.03408390695248439], ["constants", 0.03354881535099557], ["public class text", 0.03235057655108695], ["type", 0.030397439846263648], ["bitwise", 0.02576402011551378], ["int", 0.023549409053724144], ["operation", 0.021123704526276176], ["styles", 0.021075005220762996], ["item", 0.017306064757763553], ["elements", 0.013713122378915052], ["enumset class", 0.013222375097237568], ["applystyles method", 0.01288198967717783], ["client code", 0.012553884252069887], ["disadvantages", 0.01212930097227553], ["performance", 0.01208635882461207], ["bold", 0.010828993024592599]]
Enums and Annotations	Use EnumMap instead of ordinal indexing.	[]
Enums and Annotations	Emulate extensible enums with interfaces	[["enum types", 0.06710772771684406], ["operations", 0.06034350197481773], ["arbitrary interfaces", 0.04824959872289391], ["type", 0.03574398121528261], ["interface", 0.022498935036934918], ["exception concerns extensibility", 0.021592151550164387], ["enums", 0.021575760611725635], ["implementation", 0.019487841846304775], ["double", 0.01865815736733601], ["item", 0.018503484764009013], ["class", 0.015423396839129487], ["instances", 0.014807478077387855], ["return", 0.01478558549907347], ["typesafe enum pattern", 0.014634373823461343], ["elements", 0.014320612177024763], ["opcodes", 0.013011286642292865], ["public enum basicoperation", 0.012754626559086983], ["extensibility", 0.012652334829131251], ["example", 0.012509745462932497], ["api", 0.01236884353487716]]
Enums and Annotations	Use enums instead of int constants	[["enum types", 0.055659313458034404], ["constants", 0.029496219484241346], ["method", 0.027171710693820492], ["enums", 0.017518038584023406], ["int", 0.01531174132898619], ["type", 0.015212352452437442], ["legal values", 0.015132894770769163], ["planets", 0.013734703789340996], ["printable strings", 0.012478074525071828], ["operator", 0.011679427924621988], ["double radius", 0.011026028321628703], ["mass", 0.009100959318245182], ["clients", 0.008912456744181802], ["enum constants", 0.00887410467454325], ["accessible constructors", 0.008444508458553485], ["time", 0.00831469618751415], ["common pattern", 0.008073731473304493], ["classes", 0.007846765696686454], ["fields", 0.007765512601275617], ["behavior", 0.007628906362124666]]
General Programming	Adhere to generally accepted naming conventions	[["naming conventions", 0.03836887435446174], ["example", 0.03230424542015186], ["name", 0.031400427637755926], ["fields", 0.031108864906619266], ["packages", 0.028628424448743292], ["type variables", 0.02775477178167238], ["methods", 0.022858833777324495], ["classes", 0.01724483345653433], ["components", 0.015564137087574021], ["singular noun", 0.015223046285228818], ["single word", 0.013986856486895452], ["interfaces", 0.013447447786434478], ["meaningful abbreviations", 0.012373616902347694], ["alphabetic characters", 0.0112889138281847], ["referenced object", 0.010907401079403052], ["set", 0.01039399136778965], ["constant fields", 0.009375516251136948], ["local variable names", 0.009315861265177925], ["conventions", 0.009150254234192036], ["item", 0.008628016346535336]]
General Programming	Introduction	[["control structures", 0.0972171948193459], ["libraries", 0.09389344354028456], ["reflection", 0.08828204871247794], ["data types", 0.08752908003503658], ["local variables", 0.08524562797740612], ["extralinguistic facilities", 0.08504435511890718], ["bolts", 0.08051958341385035], ["native methods", 0.07765921403688492], ["language", 0.07413258165118368], ["nuts", 0.07363915059188805], ["optimization", 0.057962733147957565], ["conventions", 0.051440830254908386], ["chapter", 0.04743415669986868]]
General Programming	Prefer for-each loops to traditional for loops	[["iteration", 0.05650002539856128], ["loop", 0.048982003780390054], ["collection", 0.04434173003939281], ["enum suit", 0.031011690349812045], ["element", 0.02497255199579989], ["array", 0.024918770483152736], ["enum rank", 0.02219141369484499], ["suit", 0.02039504687344233], ["element e", 0.018642352917379743], ["index variables", 0.01836274476480853], ["bug", 0.01742625813683966], ["enum face", 0.014213862499420986], ["rank", 0.0135728932744068], ["type", 0.01281028877782844], ["idioms", 0.01201561587020397], ["next method", 0.011924374289567073], ["problem", 0.01049240486900282], ["i.hasnext", 0.009766004408159315], ["list", 0.009339156220871798], ["j", 0.009267616421583807]]
General Programming	Optimize judiciously	[["performance", 0.060128995040067516], ["good programs", 0.031165605779141115], ["optimization", 0.031162606685179558], ["design decisions", 0.029098412454476866], ["individual components", 0.026262901466212116], ["implementation type", 0.020518963972284296], ["java programming language", 0.01874280450144355], ["system", 0.017111408777273036], ["item", 0.016139240605803008], ["program", 0.014795637256212787], ["apis", 0.014038298784474025], ["individual decisions", 0.013882874613792532], ["time", 0.012934950031086639], ["performancecritical method", 0.012614906124014884], ["dimension instance", 0.012414707936338138], ["sound architectural principles", 0.011255843450687949], ["public class", 0.010737697589315013], ["algorithmic changes", 0.009961070978786382], ["components", 0.00945514625519469], ["fact", 0.009309905049986847]]
General Programming	Prefer primitive types to boxed primitives	[["primitives", 0.07582312016263212], ["reference types", 0.04450471472928286], ["integer", 0.042652605678764735], ["values", 0.04086216902220839], ["comparator", 0.03374866614530725], ["int", 0.033207899108674124], ["delightful little program", 0.0329026258207548], ["boxed primitive", 0.026753795541666688], ["identities", 0.022555117720190032], ["program", 0.02115490951993063], ["j", 0.020243757228425887], ["primitive type", 0.01961964645836536], ["local variables", 0.014676306233983267], ["problem", 0.014542905685768737], ["auto", 0.014139693100150693], ["item", 0.013620993404524691], ["compare method", 0.013234951277758028], ["list", 0.01279625981163385], ["expression", 0.012404176635456496], ["public class unbelievable", 0.01127492405050689]]
General Programming	Avoid strings where other types are more appropriate	[["strings", 0.1007736236899829], ["local variable facility", 0.04225281919922647], ["thread", 0.04011578419719127], ["value types", 0.029694229345318044], ["poor substitutes", 0.02227971352083573], ["value", 0.02206930679254391], ["api", 0.02070460833193515], ["client", 0.020408854689228786], ["unforgeable key", 0.01825526898157391], ["public class threadlocal", 0.018194091761015305], ["private threadlocal", 0.017283561417084148], ["data", 0.017199253981582042], ["appropriate enum type", 0.016834429529086543], ["local variable", 0.016640305891161788], ["capabilities", 0.01624449066773703], ["approach", 0.01487291856625362], ["natural tendency", 0.014269176027766084], ["item", 0.013776856418720151], ["string keys", 0.011835052063576417], ["aggregate types", 0.011643931171310547]]
General Programming	Avoid float and double if exact answers are required	[["double funds", 0.03971292198369809], ["bigdecimal", 0.03942348107679303], ["engineering calculations", 0.03319915764018589], ["int itemsbought", 0.032958764552286114], ["double price", 0.028968866433839155], ["delicious candies", 0.02815475085471715], ["point arithmetic", 0.02732200245680082], ["naive program fragment", 0.026651557832880243], ["float", 0.02317593581262317], ["funds", 0.021125865945860498], ["double types", 0.020433769388782254], ["dollar", 0.01813716955621354], ["problem", 0.017268370592116656], ["args", 0.016953042871459177], ["price", 0.016695985508921787], ["exact results", 0.016396963924418532], ["pocket", 0.01497927926730942], ["monetary calculations", 0.01465657119568541], ["candy", 0.014480437138615862], ["example", 0.013315800614704875]]
General Programming	Minimize the scope of local variables	[["local variables", 0.08011864873737315], ["loops", 0.06906033905404337], ["scope", 0.043280364907714836], ["iterator", 0.032159496705264905], ["variables", 0.031839426750087045], ["error", 0.02534291655094455], ["code", 0.022896367769621], ["block", 0.022773449761505863], ["element", 0.0211757045972216], ["preferred idiom", 0.02025866985647159], ["method", 0.01944098000191133], ["older programming languages", 0.017969858141636458], ["element e", 0.01794084296399242], ["c", 0.014347234827064986], ["exception", 0.012953001707966793], ["i2", 0.012597547189897432], ["item", 0.01166378141114876], ["idiom", 0.01122236855396018], ["activities", 0.011022407968319919], ["region", 0.010917554308615447]]
General Programming	Prefer interfaces to reflection	[["arbitrary classes", 0.0674994543025331], ["method", 0.05126665771234183], ["core reflection facility", 0.05121725438994789], ["class", 0.033245023215590475], ["programmatic access", 0.03186271179998785], ["class object", 0.030137340829108874], ["field instances", 0.02920862339924236], ["constructor", 0.027666356196770138], ["program", 0.021380023129340276], ["class instance", 0.019215540900689315], ["reflection", 0.01889737427854899], ["java.lang.reflect", 0.01736311138071841], ["set", 0.016987819476478358], ["time type checking", 0.016554966710776997], ["command line argument", 0.013619204455023293], ["catch", 0.01338163071627293], ["objects", 0.013249266762596884], ["classnotfoundexception e", 0.01198108110126755], ["example", 0.011805557079889091], ["string", 0.01179834622836188]]
General Programming	Know and use the libraries	[["library", 0.04601212707146767], ["random numbers", 0.03694867587470661], ["method", 0.03134405864182414], ["time", 0.021832120134860702], ["programmers", 0.02142782670002578], ["java", 0.018131031265224126], ["advantage", 0.01718746220104298], ["flaws", 0.016351105612364858], ["source code", 0.01602871692690987], ["static random rnd", 0.015245161960450835], ["program", 0.01503254800430949], ["random integers", 0.013683549288732635], ["library facilities", 0.012480720865722671], ["static int random(int", 0.012439192351185336], ["next release", 0.012327796539834955], ["numbers", 0.012056719865161544], ["part", 0.011886922919273303], ["common task", 0.010986326557348528], ["range", 0.010941515437114855], ["functionality", 0.010009187289849]]
General Programming	Refer to objects by their interfaces	[["interfaces", 0.07975607684163623], ["implementation", 0.05457746333322302], ["classes", 0.051210688754159205], ["type set", 0.033033936856038885], ["linkedhashset", 0.031147249271117724], ["code", 0.02728314263109555], ["objects", 0.02552443154568082], ["ordering policy", 0.024911923687865677], ["example", 0.021104926473857023], ["son", 0.020954038752849194], ["sonset", 0.020232424018839103], ["functionality", 0.019706633979643576], ["methods", 0.01856961015201748], ["declaration", 0.018203297551128258], ["values", 0.01744608043071525], ["variables", 0.016199874298783487], ["parameter types", 0.015958550702927354], ["new hashset", 0.01582175838722098], ["case", 0.015630250562484356], ["better performance", 0.015573964525309692]]
General Programming	Use native methods judiciously	[["native methods", 0.09284640702913344], ["java native interface", 0.08598396761744959], ["libraries", 0.04707077667492553], ["access", 0.042459915349762414], ["performance", 0.041529054241402436], ["java", 0.03807116549241974], ["native programming languages", 0.03729569028264117], ["native code", 0.02905653787810036], ["platform", 0.028975891584118982], ["jni", 0.028464825387735995], ["java programs", 0.025835619184112275], ["native languages", 0.019525337235390013], ["applications", 0.0191317794195671], ["facilities", 0.017352666309966836], ["main uses", 0.017059310353979007], ["improved performance", 0.015886502874109965], ["c", 0.0151544719124955], ["native libraries", 0.014211992216249938], ["methods", 0.013907141717844936], ["biginteger", 0.013740787920715236]]
General Programming	Beware the performance of string concatenation	[["string concatenation operator", 0.14388648006776736], ["method", 0.05678538937073357], ["time quadratic", 0.04094027503824447], ["stringbuilder", 0.040916467849070604], ["item", 0.03872023915883398], ["billing statement", 0.037477130491610784], ["performs", 0.0359075200419881], ["strings", 0.03302950497743874], ["string result", 0.02464672696979365], ["single line", 0.02376560138941012], ["number", 0.02176204257053227], ["numitems", 0.02067874328578394], ["times", 0.01999054109345682], ["n.", 0.017506401797259236], ["public string statement", 0.017024026256226933], ["i++", 0.01646701378424093], ["string concatenation", 0.016410012140515504], ["difference", 0.016117560145862495], ["string representation", 0.01610130486203124], ["output", 0.01449574554992182]]
General Programming	Use native methods judiciously.	[]
Generics	Prefer lists to arrays	[["arrays", 0.06938241675950332], ["generic types", 0.04725387256323556], ["list", 0.038864776343536946], ["incompatible types", 0.035742820460701326], ["chooser class", 0.026871023227471782], ["generics", 0.022606680789847313], ["object", 0.021964111196169003], ["compile time", 0.020922827703557075], ["element type", 0.02002797194637681], ["runtime", 0.01889464589239343], ["string", 0.01681360151731944], ["confusing warnings", 0.016383199711462494], ["item", 0.014457280201537921], ["varargs methods", 0.014045583667048982], ["integer > intlist", 0.012172367177304133], ["compiler", 0.011969007930704606], ["casts", 0.011463026998275764], ["error message", 0.011358172251275635], ["warning", 0.011027625544824391], ["time error", 0.010756427317563572]]
Generics	Introduction	[["object", 0.12777648955693938], ["wrong type", 0.1253314091943585], ["compiler", 0.09707760395479689], ["generics", 0.09243783245482827], ["collection", 0.08462506432428853], ["types", 0.05194921382098752], ["casts", 0.05045025036159054], ["benefits", 0.04581528640805119], ["runtime", 0.04463633249418485], ["language", 0.03724290696903633], ["part", 0.03583157862074536], ["price", 0.032500383580988536], ["chapter", 0.031646662927654085], ["programs", 0.031117323341328634], ["compiler inserts", 0.030824792459526934], ["java", 0.029016738175666995], ["compile time", 0.026981111921918235], ["complications", 0.024739019433109372]]
Generics	Eliminate unchecked warnings.	[]
Generics	Favor generic types	[["generic types", 0.0709921617255842], ["stack implementation", 0.05039592451951688], ["e", 0.03655063314142425], ["array", 0.03505644042753263], ["casts", 0.032666927618381816], ["object", 0.030338363346602514], ["elements", 0.026932033167456734], ["item", 0.02461045767497558], ["stack", 0.023831148320585464], ["warning", 0.016936734070109823], ["methods", 0.011684586593371845], ["error", 0.011457471122510093], ["new emptystackexception", 0.011276308678438759], ["generics", 0.0112461543647722], ["size", 0.01123645053265837], ["clients", 0.010839087295742688], ["unchecked cast", 0.010645809770066494], ["toy", 0.010631738370291377], ["program", 0.010150216073452517], ["lists", 0.010042199632257973]]
Generics	Favor generic types.	[]
Generics	Eliminate unchecked warnings	[["unchecked cast warnings", 0.12217016080069187], ["compiler warnings", 0.05669852643039173], ["warning", 0.04374835107838827], ["annotation", 0.032211473351541176], ["size", 0.02926783783265244], ["lark", 0.028720195569193727], ["short method", 0.02755355600707446], ["code", 0.02745441293686362], ["generics", 0.025765254531643314], ["new hashset", 0.02222305277219759], ["variable declaration", 0.020266297087850865], ["exaltation", 0.01969222763537784], ["smallest scope", 0.01742968612242416], ["unchecked warnings", 0.016885921109090284], ["suppresswarnings annotation", 0.01644280097461974], ["declaration", 0.015802997699767122], ["return", 0.015029423343070517], ["unchecked conversion set", 0.014434475474572358], ["constructor", 0.014050448699409907], ["example", 0.01347594747948909]]
Generics	Consider typesafe heterogeneous containers	[["type parameters", 0.07144436527244712], ["class object", 0.032084384081404564], ["favorites class", 0.03124009176995557], ["class literal", 0.025855463034893663], ["type", 0.02493350364015375], ["key", 0.02388675430017765], ["element containers", 0.02071980058141393], ["map", 0.01972212937035441], ["methods", 0.017769490784018835], ["string", 0.01530875780057964], ["value types", 0.015162175675971537], ["container", 0.01414553732069654], ["class", 0.013044480947996609], ["typesafe manner", 0.012742528758885175], ["collections", 0.01257158990933808], ["common uses", 0.012327479549922792], ["heterogeneous container pattern", 0.011744138539021542], ["clients", 0.01110484030728696], ["favorite list", 0.010822497957603297], ["favorites", 0.010640160678060855]]
Generics	Don’t use raw types	[["element type", 0.11106318841675349], ["list", 0.036867674841816044], ["exemplary collection declaration", 0.034399121075917784], ["arbitrary objects", 0.023719501347112936], ["generic class", 0.023146083809761207], ["type parameters", 0.021016780148110974], ["raw type", 0.020835585407854365], ["error", 0.018978250936513452], ["string", 0.016996234910719714], ["collections", 0.01646653167908038], ["object", 0.016226395754131685], ["interface", 0.015108708211259597], ["compiler", 0.014757133476430217], ["e", 0.014448866046399307], ["erroneous insertion compiles", 0.013963266062965423], ["generics", 0.013599794642221306], ["stamp instances", 0.012663345820177977], ["coin", 0.011217324533941756], ["full name", 0.011214457116689131], ["example", 0.0109768825022586]]
Generics	Combine generics and varargs judiciously.	[]
Generics	Combine generics and varargs judiciously	[["varargs methods", 0.10425565577613147], ["varargs", 0.05352048515385502], ["array", 0.038750713078118254], ["method", 0.037938738971900574], ["confusing compiler warnings", 0.024735588182681224], ["list", 0.02290725524458786], ["types", 0.020344005839096145], ["generics", 0.017940081248977724], ["compile", 0.016694137718676057], ["warning", 0.015946778297129444], ["varargs parameters", 0.014965129233608166], ["item", 0.013861151583058546], ["arguments", 0.012972171117086036], ["code fragment", 0.012033141936851868], ["annotations", 0.012025867364860332], ["generic varargs parameter", 0.011629643491498334], ["java", 0.011187674059513607], ["casts", 0.010610314078014714], ["possible heap pollution", 0.010449622917258494], ["string", 0.01036055288006319]]
Generics	Favor generic methods	[["parameterized types", 0.05627266351238548], ["methods", 0.04823908252331191], ["e", 0.0382263933538466], ["generic methods", 0.03420007506636839], ["type parameter", 0.02756334608908784], ["warnings", 0.026540530341039766], ["item", 0.020868773698831153], ["sets", 0.020767421750889317], ["element type", 0.01998390462077935], ["string", 0.019183106360559206], ["private static unaryoperator", 0.018375462618604156], ["types", 0.016870316177477487], ["return result", 0.015772610286555137], ["collections", 0.015452223569857785], ["program", 0.014333425139656448], ["return value", 0.013962815167442294], ["object", 0.013957824321645192], ["elements", 0.013484488391251463], ["casts", 0.013318017859618525], ["unaryoperator", 0.01311196071934986]]
Generics	Use bounded wildcards to increase API flexibility	[["parameterized types", 0.045284250248395046], ["wildcard type", 0.03377269555112943], ["stack class", 0.030656501002885483], ["e", 0.029349546373749882], ["list", 0.02580759985735596], ["original pushall declaration", 0.024026108905326908], ["input parameter", 0.02080416001731996], ["number", 0.019749429436472284], ["stack", 0.017485952165323813], ["item", 0.017332254563956373], ["public void pushall(iterable", 0.015338317105692889], ["method", 0.015233492393943478], ["error message", 0.013294547649010335], ["type integer", 0.012124563113466958], ["e producer", 0.012007389674720969], ["pushall method", 0.010732630403709762], ["subtype", 0.010441479215172658], ["collection", 0.010417576872344667], ["src", 0.010368582531916453], ["object", 0.010316825997360047]]
Concurrency	Avoid excessive synchronization	[["method", 0.040209883127686745], ["observer pattern", 0.035684874525803156], ["e", 0.03157487655672079], ["observers", 0.0245622303680092], ["insufficient synchronization", 0.022334882879923135], ["item", 0.022282957143423047], ["class", 0.018433179614910065], ["thread", 0.01808652186061212], ["set", 0.017209754126121975], ["synchronized region", 0.01600796381824536], ["lock", 0.015684704133377546], ["calls", 0.012247396579503203], ["client", 0.012138408189718302], ["alien method", 0.011642549022988308], ["setobserver", 0.011271102335712612], ["elements", 0.011151780309760342], ["deadlock", 0.010994104956063577], ["block", 0.010223317329923001], ["exceptions", 0.00986467090384519], ["public class observableset", 0.009578513333500106]]
Concurrency	Introduction	[["concurrent programming", 0.13581660107073512], ["multiple activities", 0.08630031126066827], ["good performance", 0.08161611307946845], ["multicore processors", 0.07942895065785387], ["threads", 0.07653130980803997], ["chapter", 0.07604261983224986], ["advice", 0.07378246643102017], ["requirement", 0.07162805529279757], ["platform", 0.07066636459381788], ["programming", 0.06991604959198316], ["things", 0.06902790569935731], ["failures", 0.059342119900624324], ["concurrency", 0.04990113278138401]]
Concurrency	Prefer executors, tasks, and streams to threads	[["background thread", 0.06408544750786196], ["executor framework", 0.049557658325192114], ["task", 0.0456335796352904], ["work queue", 0.03402800214100057], ["thread", 0.027849150714523284], ["work", 0.026406513786776165], ["code", 0.02323906567444745], ["task execution facility", 0.022946088107986876], ["class", 0.02152372154194837], ["executor service", 0.02055220212945831], ["method", 0.01950807846588402], ["book", 0.019423439909959643], ["clients", 0.016802613797667558], ["edition", 0.014873849964821752], ["item", 0.014279851436973993], ["java", 0.013604570797249223], ["loaded server", 0.01337082199822062], ["fork", 0.013015217158278667], ["unit", 0.012500078954854346], ["flexible interface", 0.011598982327966478]]
Concurrency	Use lazy initialization judiciously	[["lazy initialization", 0.10760232786293995], ["field", 0.08675554030704043], ["instance fields", 0.040488498439732984], ["check idiom", 0.03904631094414397], ["class", 0.026418116057264393], ["idioms", 0.02299135488467011], ["item", 0.021576194026699417], ["performance", 0.01881561351245619], ["multiple threads", 0.017885669166316773], ["field access", 0.017446355595034324], ["private fieldtype field", 0.016380629023146902], ["synchronization", 0.015828542138214205], ["check", 0.015716613846810706], ["initialization", 0.015611332184849492], ["value", 0.015141462998380246], ["fieldtype result", 0.014195775877736683], ["computefieldvalue", 0.013998022714678548], ["cost", 0.012892374000382465], ["accessor", 0.01207213324427375], ["static fields", 0.011805181357465631]]
Concurrency	Don’t depend on the thread scheduler	[["threads", 0.12691261739869103], ["programs", 0.04503681404962726], ["average number", 0.04294463793134705], ["runnable threads", 0.026737775873307737], ["performance", 0.022910639495392838], ["number", 0.022476892097153568], ["thread scheduler", 0.022125352813384732], ["countdownlatch", 0.02206926255087781], ["policy", 0.021089023893903085], ["useful work", 0.020017666968811614], ["private int count", 0.01995752349259224], ["thread priorities", 0.019369666740975868], ["portable program", 0.019320645142224792], ["public class slowcountdownlatch", 0.018358076355905518], ["determines", 0.014511943342372054], ["times", 0.014487114500660857], ["processors", 0.014478490564806552], ["waiting", 0.014339972633915277], ["thread.yield", 0.01385851639993101], ["extreme example", 0.013734838599648788]]
Concurrency	Prefer concurrency utilities to wait and notify	[["thread", 0.03486105287555462], ["concurrent collections", 0.03178348487508205], ["method invocations", 0.026586783486827574], ["item", 0.023308647850721797], ["wait", 0.022611100850227547], ["map", 0.02230108101748586], ["synchronizers", 0.021868507079544783], ["action", 0.018413817895223363], ["condition", 0.016522290356600244], ["worker threads", 0.015838396492841807], ["standard collection interfaces", 0.01427418252772336], ["level concurrency utilities", 0.014229015412751764], ["example", 0.013809894021387253], ["timer thread", 0.012902408346161177], ["dependent modify operations", 0.012518240950841225], ["queue", 0.011729412697777337], ["times", 0.011695842147896094], ["concurrent implementations", 0.011074642127302789], ["countdownlatch", 0.010687014318251383], ["notifyall", 0.009907896089510404]]
Concurrency	Document thread safety	[["thread", 0.07018002194166564], ["class", 0.060502855739927364], ["insufficient synchronization", 0.05323873276548358], ["methods", 0.03661952646318158], ["item", 0.030315385517015837], ["safe concurrent use", 0.023269988319871322], ["locks", 0.02143951361922961], ["external synchronization", 0.021053433390742095], ["object", 0.018111108359652555], ["clients", 0.017747877358419182], ["thread safety", 0.016582328524369916], ["examples", 0.014884100065921991], ["instances", 0.014611405875348404], ["synchronized modifier", 0.014077255328626045], ["invocation sequence", 0.014060539525421715], ["case", 0.011105765810586815], ["documentation", 0.010331469156203464], ["important part", 0.009866903853975869], ["purpose collection implementations", 0.009603432771068888], ["program", 0.009337459874934388]]
Concurrency	Synchronize access to shared mutable data	[["single thread", 0.09245018451147004], ["synchronized keyword", 0.06937300196414134], ["thread", 0.03914005045884953], ["synchronization", 0.03436903265566138], ["method", 0.034105957753734276], ["mutable data", 0.02390361229040656], ["object", 0.023045300761134986], ["inconsistent state", 0.02079993269738851], ["value", 0.020296395883223097], ["field", 0.01970042197944294], ["program", 0.017612593872287575], ["item", 0.011648902063564162], ["mutual exclusion", 0.010763193252554506], ["variable", 0.010694973411926169], ["public class stopthread", 0.010387789759738178], ["time", 0.009864711884114643], ["way", 0.009584469524973983], ["lock", 0.009444951683220723], ["invocation", 0.009035632754634057], ["stoprequested", 0.00894689456868745]]
Serialization	Implement Serializable with great caution	[["class", 0.07469070600073499], ["class serializable", 0.06110990717621967], ["serializable", 0.0313574585696787], ["form", 0.031217136868149198], ["immediate cost", 0.025941196324239243], ["instances", 0.02262843980856505], ["item", 0.01969923128903813], ["default", 0.018291346942775098], ["serialization", 0.01442426717569681], ["objects", 0.014355493659736658], ["original internal representation", 0.01366478721941115], ["old version", 0.01343288495742423], ["constructors", 0.013024657176857132], ["part", 0.012935056380604671], ["access", 0.011595519863027332], ["effort", 0.011070002283030634], ["interfaces", 0.009926168315615002], ["unique identification number", 0.009700112851475496], ["implementation", 0.0093515798699029], ["deserialization", 0.009113757592156015]]
Serialization	For instance control, prefer enum types to readResolve	[["single instance", 0.048015938834055416], ["singleton pattern", 0.04352210572582467], ["class", 0.0306458111083027], ["0x00", 0.028882736630046667], ["readresolve method", 0.024704102725267938], ["new elvis", 0.024291302042198974], ["object reference", 0.021844260391352927], ["object", 0.021374650461765125], ["item", 0.020967476128838612], ["elvis impersonator", 0.020149394277897657], ["instance", 0.01910079458733954], ["public class elvis", 0.01882726042205622], ["singleton", 0.016443201907964323], ["stealer", 0.01509033093350507], ["method", 0.013894018827517], ["determined attacker", 0.013109629788140642], ["0x6c", 0.01154661075056397], ["serializable", 0.01093724585364222], ["reference", 0.010706227125209734], ["element enum type", 0.010287069113710945]]
Serialization	Prefer alternatives to Java serialization	[["java", 0.030746241442966123], ["objects", 0.02708771491991252], ["java deserialization", 0.021762978015894607], ["readobject method", 0.020868333224389385], ["ransomware attack", 0.019978319101796774], ["type", 0.018938513579137693], ["class path", 0.01736017676606999], ["hash sets", 0.016167877553916417], ["data representations", 0.015655687691223018], ["deserialization", 0.014762223141310723], ["json", 0.014330607931156033], ["protobuf", 0.013830081063800893], ["serialization", 0.01356189593142841], ["untrusted streams", 0.012822091811769864], ["code", 0.012512614177078324], ["security", 0.012155981455560051], ["problems", 0.011499564974100413], ["new hashset", 0.010950899586818654], ["java messaging system", 0.010731834318557579], ["method", 0.01041791951339131]]
Serialization	Introduction	[["objects", 0.16312576388697672], ["deserializing", 0.12508770990125673], ["encodings", 0.11915519540945048], ["serializing", 0.11036136378741222], ["byte streams", 0.08169300943771561], ["framework", 0.06927337106058602], ["java", 0.06002260312916015], ["disk", 0.05875686413269002], ["later deserialization", 0.05628477451966671], ["chapter", 0.05426846486218566], ["dangers", 0.0539108070470173], ["vm", 0.04806007282588243]]
Serialization	Consider using a custom serialized form	[["form", 0.054844925725728993], ["class", 0.03322652922524705], ["default", 0.03147680006657902], ["object", 0.029409109253677276], ["private stringlist", 0.02080649281373123], ["fields", 0.019932266467174168], ["instance fields", 0.01918755940508289], ["readobject method", 0.016481215763501186], ["version", 0.016370083791618407], ["physical representation", 0.015418728265262704], ["name", 0.015243583397581733], ["entry", 0.014906218856501797], ["list", 0.013966366406287583], ["serialization logic", 0.01273746329369803], ["best api", 0.012512619809815021], ["stringlist", 0.012422178047841712], ["strings", 0.011075824693931674], ["values", 0.010561927283396578], ["example", 0.010548171627523922], ["implementation", 0.01002984785830186]]
Serialization	Consider serialization proxies instead of serialized instances	[["serialization proxy pattern", 0.03925752013261468], ["class", 0.029120726598239055], ["writereplace method", 0.021134306671837584], ["private object writereplace", 0.016269767937401515], ["instances", 0.014297324237959288], ["java", 0.01260969713085156], ["ordinary constructors", 0.012373995668016424], ["serialization proxy", 0.012049300010118169], ["enum type", 0.008606581005181808], ["fewer elements", 0.008529942281492618], ["prefer lambdas", 0.008059259296388004], ["immutable period class", 0.007914928153847131], ["isbn", 0.007640277589286807], ["object", 0.007159142470200295], ["method", 0.0069316145404452], ["items", 0.0068540178222798115], ["parameter type", 0.006684656585883428], ["prefer interfaces", 0.006181909899087398], ["exceptions", 0.006131512559317732], ["enumset", 0.00592306556734266]]
Serialization	Write readObject methods defensively	[["range class", 0.04428048737411726], ["0x00", 0.029092637860426346], ["period", 0.02719238889047987], ["instance", 0.023371995836003127], ["readobject method", 0.023370627120278546], ["immutable date", 0.02298703104963267], ["end", 0.021364103610368727], ["date end", 0.017770690838391032], ["date objects", 0.017662583552591864], ["constructor", 0.01736347619703108], ["class", 0.01698454363454725], ["item", 0.0166608538184301], ["invariants", 0.015522889943383465], ["byte stream", 0.014909665676888837], ["start", 0.01275713529592692], ["new date(end.gettime", 0.012289069178091553], ["attacker", 0.012024829881502186], ["pst", 0.011022360280536653], ["defensive copies", 0.010249394234108443], ["object", 0.00950285296913246]]
