Methods Common to All Objects	Always override toString	{}	{}	{}
Methods Common to All Objects	Consider implementing Comparable	{"java.util": 0.0, "java.util.concurrent": 0.033788759009013694}	{"Arrays": 0.009384197776159427, "Comparator": 0.0713377721557968, "Map": 0.019037784206367852, "Collections": 0.0019193686100653611, "Random": 0.003963209564210933, "HashSet": 0.0067029984115424485, "Set": 0.006397895366884537, "TreeMap": 0.008078031534324336, "NavigableSet": 0.01317470197961805, "Collection": 0.006345928068789284, "TreeSet": 0.04077336356234972, "Objects": 0.032794971979336826, "ThreadLocalRandom": 0.01019334089058743}	{"equals": 0.25733607901027905, "toString": 0.003275237547196789, "compare": 0.04980698303424756, "sort": 0.0065785166986114365, "hashCode": 0.20445078297486285, "addAll": 0.008301163839041262, "requireNonNull": 0.016137619782415777, "current": 0.008301163839041262}
Methods Common to All Objects	Introduction	{}	{}	{}
Methods Common to All Objects	Obey the general contract when overriding equals	{"java.net": 0.0457755120278379, "java.util": 0.0, "java.util.concurrent": 0.033788759009013694, "java.util.concurrent.atomic": 0.0457755120278379, "java.util.regex": 0.057762265046662105, "java.sql": 0.057762265046662105}	{"URL": 0.030580022671762293, "Arrays": 0.009384197776159427, "Map": 0.019037784206367852, "List": 0.0031989476834422687, "AbstractList": 0.008078031534324336, "AbstractMap": 0.01019334089058743, "Date": 0.01019334089058743, "ArrayList": 0.008944083267091863, "Map.Entry": 0.008078031534324336, "HashSet": 0.0067029984115424485, "Set": 0.006397895366884537, "Collection": 0.006345928068789284, "Objects": 0.032794971979336826, "AbstractSet": 0.01019334089058743, "AtomicInteger": 0.0526988079184722, "Pattern": 0.02038668178117486, "Timestamp": 0.06587350989809025}	{"equals": 0.25733607901027905, "hashCode": 0.20445078297486285, "compare": 0.04980698303424756, "get": 0.0021834916981311927, "add": 0.0021834916981311927, "contains": 0.016602327678082524, "requireNonNull": 0.016137619782415777, "incrementAndGet": 0.02145819723626413}
Methods Common to All Objects	Override clone judiciously	{"java.util": 0.0}	{"Arrays": 0.009384197776159427, "Map": 0.019037784206367852, "LinkedList": 0.01317470197961805, "HashSet": 0.0067029984115424485, "Stack": 0.1287454025520441, "Collection": 0.006345928068789284, "TreeSet": 0.04077336356234972, "HashMap": 0.04077336356234972}	{"equals": 0.25733607901027905, "toString": 0.003275237547196789, "hashCode": 0.20445078297486285, "put": 0.02145819723626413, "isEmpty": 0.01245174575856189, "pop": 0.026314066794445746, "push": 0.019735550095834307, "clone": 0.19922793213699025}
Methods Common to All Objects	Always override hashCode when you override equals	{"java.util": 0.0}	{"Arrays": 0.009384197776159427, "Map": 0.019037784206367852, "HashSet": 0.0067029984115424485, "Objects": 0.032794971979336826, "HashMap": 0.04077336356234972}	{"equals": 0.25733607901027905, "hashCode": 0.20445078297486285, "hash": 0.02145819723626413}
Creating and Destroying Objects	Consider static factory methods instead of constructors	{"java.util": 0.0}	{"List": 0.00056136372251374, "Collections": 0.00336818233508244, "ServiceLoader": 0.023119477022297483, "Date": 0.008943834587870262, "Random": 0.0034773967789205606, "Set": 0.0039295460575961795, "EnumSet": 0.027819174231364485}	{"equals": 0.012836058899258245, "of": 0.01621238402507222, "list": 0.033180730911630645, "valueOf": 0.03242476805014444, "from": 0.033180730911630645}
Creating and Destroying Objects	Consider a builder when faced with many constructor parameters	{"java.util": 0.0}	{"Set": 0.0039295460575961795, "Optional": 0.01129637080456645, "EnumSet": 0.027819174231364485, "Objects": 0.013079519616392398}	{"toString": 0.0067526502516279474, "clone": 0.05134423559703298, "requireNonNull": 0.039925666720939765}
Creating and Destroying Objects	Eliminate obsolete object references	{"java.lang": 0.05389965007326869, "java.lang.ref": 0.05836458249025999, "java.util": 0.0}	{"Object": 0.08505385460656334, "String": 0.03388911241369935, "NullPointerException": 0.008943834587870262, "System": 0.07342641022968192, "Arrays": 0.0035288043250442827, "LinkedHashMap": 0.007087821217213612, "Stack": 0.05083366862054903, "WeakHashMap": 0.034679215533446224}	{"pop": 0.10172336006186201, "push": 0.06103401603711721}
Creating and Destroying Objects	Prefer dependency injection to hardwiring resources	{}	{}	{}
Creating and Destroying Objects	Introduction	{}	{}	{}
Creating and Destroying Objects	Avoid creating unnecessary objects	{"java.util": 0.0, "java.util.regex": 0.046209812037329684}	{"Comparator": 0.0034773967789205606, "Map": 0.007424053482626603, "Set": 0.0039295460575961795, "Pattern": 0.08049451129083236}	{"matcher": 0.06636146182326129, "matches": 0.06636146182326129}
Creating and Destroying Objects	Enforce noninstantiability with a private constructor	{"java.lang": 0.05389965007326869, "java.util": 0.0}	{"Math": 0.007087821217213612, "Arrays": 0.0035288043250442827, "Collections": 0.00336818233508244}	{}
Creating and Destroying Objects	Avoid finalizers and cleaners	{"java.lang": 0.05389965007326869, "java.lang.ref": 0.05836458249025999, "java.util": 0.0, "java.util.concurrent": 0.01351550360360548, "java.sql": 0.09241962407465937}	{"Runnable": 0.034679215533446224, "Number": 0.023119477022297483, "Runtime": 0.011559738511148741, "String": 0.03388911241369935, "AutoCloseable": 0.05779869255574371, "System": 0.07342641022968192, "Cleaner.Cleanable": 0.023119477022297483, "Cleaner": 0.09247790808918993, "ThreadPoolExecutor": 0.008943834587870262, "TimeUnit": 0.008943834587870262, "Connection": 0.023119477022297483}	{"run": 0.06636146182326129, "gc": 0.06636146182326129, "close": 0.26544584729304516, "clean": 0.06636146182326129, "create": 0.06636146182326129, "register": 0.06636146182326129}
Creating and Destroying Objects	Prefer try-with-resources to try-finally	{"java.io": 0.19763205026865185, "java.sql": 0.09241962407465937}	{"FileInputStream": 0.046238954044594965, "FileOutputStream": 0.046238954044594965, "InputStream": 0.04471917293935131, "OutputStream": 0.04471917293935131, "BufferedReader": 0.1733960776672311, "Connection": 0.023119477022297483}	{"read": 0.13272292364652258, "close": 0.26544584729304516, "readLine": 0.19908438546978388}
Creating and Destroying Objects	Enforce the singleton property with a private constructor or an enum type	{}	{}	{}
Exceptions	Use checked exceptions for recoverable conditions and runtime exceptions for programming errors	{}	{}	{}
Exceptions	Throw exceptions appropriate to the abstraction.	{}	{}	{}
Exceptions	Document all exceptions thrown by each method.	{}	{}	{}
Exceptions	Favor the use of standard exceptions	{}	{}	{}
Exceptions	Introduction	{}	{}	{}
Exceptions	Avoid unnecessary use of checked exceptions	{}	{}	{}
Exceptions	Include failure-capture information in detail messages	{}	{}	{}
Exceptions	Favor the use of standard exceptions.	{}	{}	{}
Exceptions	Strive for failure atomicity	{}	{}	{}
Exceptions	Donâ€™t ignore exceptions	{}	{}	{}
Exceptions	Document all exceptions thrown by each method	{}	{}	{}
Exceptions	Use exceptions only for exceptional conditions	{}	{}	{}
Exceptions	Throw exceptions appropriate to the abstraction	{"java.util": 0.0, "java.util.logging": 0.8958797346140275}	{"AbstractSequentialList": 0.44793986730701374, "List": 0.04350568849481485, "ListIterator": 0.34657359027997264}	{"get": 0.04558038919848865, "listIterator": 0.44793986730701374, "size": 0.13474912518317173, "next": 0.17328679513998632}
Exceptions	Include failure-capture information in detail messages.	{}	{}	{}
Introduction	Introduction	{"java.io": 0.11977700016281931, "java.lang": 0.059888500081409654, "java.util": 0.0, "java.util.concurrent": 0.04505167867868493, "java.util.function": 0.12206803207423442}	{"Class": 0.6931471805599453}	{}
Classes and Interfaces	Favor static member classes over nonstatic	{}	{}	{}
Classes and Interfaces	Prefer interfaces to abstract classes	{"java.util": 0.0}	{"AbstractMap.SimpleEntry": 0.011412480695720095, "Map": 0.027485548323418554, "List": 0.0060963385151969855, "AbstractList": 0.034987652505353815, "AbstractMap": 0.017659800778597332, "AbstractCollection": 0.017659800778597332, "Collections": 0.0027710629614531752, "Map.Entry": 0.09796542701499067, "Objects": 0.03099096367705715, "AbstractSet": 0.008829900389298666}	{"toString": 0.011049791320845733, "equals": 0.047260035038178085, "getKey": 0.10859148298351849, "getValue": 0.10859148298351849, "setValue": 0.027147870745879623, "hashCode": 0.07958806703217272, "get": 0.00414367174531715, "size": 0.040833068237324764, "set": 0.02100446001696804, "shuffle": 0.01050223000848402, "requireNonNull": 0.01224992047119743}
Classes and Interfaces	Design and document for inheritance or else prohibit it	{"java.time": 0.09902102579427789, "java.util": 0.0}	{"Instant": 0.04414950194649333, "Map": 0.027485548323418554, "List": 0.0060963385151969855, "ListIterator": 0.026489701167895997, "AbstractList": 0.034987652505353815, "AbstractCollection": 0.017659800778597332, "Iterator": 0.017659800778597332, "HashSet": 0.018580540819766074, "Set": 0.00997582666123143, "Objects": 0.03099096367705715}	{"now": 0.027147870745879623, "equals": 0.047260035038178085, "remove": 0.04993692221218681, "removeRange": 0.013573935372939811}
Classes and Interfaces	Use interfaces only to define types.	{}	{}	{}
Classes and Interfaces	Prefer class hierarchies to tagged classes	{}	{}	{}
Classes and Interfaces	Introduction	{}	{}	{}
Classes and Interfaces	In public classes, use accessor methods, not public fields	{"java.awt": 0.19804205158855578}	{"Point": 0.07988736487004067, "Dimension": 0.017659800778597332}	{"getY": 0.027147870745879623, "getX": 0.027147870745879623}
Classes and Interfaces	Favor composition over inheritance	{"java.util": 0.0}	{"Arrays": 0.0011612838012353796, "List": 0.0060963385151969855, "Collections": 0.0027710629614531752, "Hashtable": 0.035319601557194664, "Iterator": 0.017659800778597332, "Vector": 0.017659800778597332, "HashSet": 0.018580540819766074, "Set": 0.00997582666123143, "Stack": 0.005576233995884713, "Collection": 0.027485548323418554, "TreeSet": 0.004414950194649333, "Properties": 0.04564992278288038}	{"equals": 0.047260035038178085, "toString": 0.011049791320845733, "hashCode": 0.07958806703217272, "remove": 0.04993692221218681, "toArray": 0.04993692221218681, "isEmpty": 0.02100446001696804, "addAll": 0.03150669002545206, "retainAll": 0.02100446001696804, "get": 0.00414367174531715, "add": 0.0165746869812686, "clear": 0.033291281474791205, "iterator": 0.02625557502121005, "size": 0.040833068237324764, "removeAll": 0.02100446001696804, "contains": 0.02100446001696804, "containsAll": 0.02100446001696804, "getProperty": 0.013573935372939811}
Classes and Interfaces	Design interfaces for posterity	{"java.util": 0.0}	{"Collections": 0.0027710629614531752, "Iterator": 0.017659800778597332, "Collection": 0.027485548323418554, "Objects": 0.03099096367705715}	{"hasNext": 0.006632338919347726, "next": 0.00525111500424201, "remove": 0.04993692221218681, "iterator": 0.02625557502121005, "requireNonNull": 0.01224992047119743}
Classes and Interfaces	Limit source files to a single top-level class	{}	{}	{}
Classes and Interfaces	Use interfaces only to define types	{"java.io": 0.038499750052334775}	{}	{}
Classes and Interfaces	Minimize the accessibility of classes and members	{}	{}	{}
Classes and Interfaces	Minimize mutability	{"java.util": 0.0, "java.awt": 0.19804205158855578}	{"Date": 0.004414950194649333, "BitSet": 0.057062403478600476, "Point": 0.07988736487004067}	{"valueOf": 0.013264677838695452, "equals": 0.047260035038178085, "toString": 0.011049791320845733, "hashCode": 0.07958806703217272, "toByteArray": 0.013573935372939811}
Methods	Make defensive copies when needed	{"java.time": 0.055451774444795626, "java.util": 0.0}	{"LocalDateTime": 0.014164106476111105, "Instant": 0.016438273056757595, "Period": 0.1841333841894444, "ZonedDateTime": 0.014164106476111105, "Map": 0.004548333161292977, "Date": 0.14246503315856585, "Set": 0.004127021833500223}	{"compareTo": 0.0401824452498519, "toString": 0.002642341402810936, "getTime": 0.18082100362433354, "setYear": 0.10387011415814812}
Methods	Introduction	{}	{}	{}
Methods	Use varargs judiciously	{"java.util": 0.0, "java.util.stream": 0.04394449154672439}	{"EnumSet": 0.002130420951512596, "IntStream": 0.005479424352252532}	{"sum": 0.05193505707907406}
Methods	Return optionals judiciously	{"java.util": 0.0}	{"OptionalDouble": 0.007082053238055552, "Arrays": 0.0007206385644029826, "Comparator": 0.004260841903025192, "Map": 0.004548333161292977, "List": 0.00962971761150052, "OptionalLong": 0.007082053238055552, "Optional": 0.1557157833238162, "Collection": 0.030701248838727598, "OptionalInt": 0.007082053238055552, "Objects": 0.014423659972227193}	{"of": 0.05075181086109565, "empty": 0.07790258561861109, "stream": 0.047765751681222164, "isPresent": 0.07790258561861109, "isEmpty": 0.0401824452498519, "asList": 0.012687952715273912, "naturalOrder": 0.0401824452498519, "get": 0.007927024208432809, "ofNullable": 0.02596752853953703, "requireNonNull": 0.03124617395551808}
Methods	Return empty collections or arrays, not nulls	{}	{}	{}
Methods	Write doc comments for all exposed API elements	{"java.lang": 0.0862394401172299, "java.lang.annotation": 0.17577796618689756}	{"Math": 0.004342341061929288, "Throwable": 0.010958848704505064, "Class": 0.005479424352252532, "Package": 0.007082053238055552, "RetentionPolicy": 0.016438273056757595, "ElementType": 0.016438273056757595}	{}
Methods	Use overloading judiciously	{"java.math": 0.07003749898831199, "java.util": 0.0}	{"BigInteger": 0.01736936424771715, "List": 0.00962971761150052, "ArrayList": 0.009615773314818127, "HashSet": 0.0021619156932089476, "Set": 0.004127021833500223, "Collection": 0.030701248838727598, "TreeSet": 0.005479424352252532, "HashMap": 0.01369856088063133}	{"valueOf": 0.025375905430547824, "add": 0.010569365611243744, "remove": 0.20698492395196272, "values": 0.047765751681222164}
Methods	Design method signatures carefully	{"java.util": 0.0}	{"Map": 0.004548333161292977, "List": 0.00962971761150052, "TreeMap": 0.008684682123858575, "HashMap": 0.01369856088063133}	{}
Methods	Check parameters for validity	{"java.util": 0.0}	{"List": 0.00962971761150052, "Collections": 0.00034391848612501857, "Objects": 0.014423659972227193}	{"sort": 0.015921917227074055}
Lambdas and Streams	Prefer method references to lambdas	{"java.util": 0.0}	{"Map": 0.01359127901346996, "TreeMap": 0.01730098092390724}	{"clear": 0.007275578070649734}
Lambdas and Streams	Introduction	{}	{}	{}
Lambdas and Streams	Prefer side-effect-free functions in streams	{"java.io": 0.03943876834629416, "java.util": 0.0, "java.util.stream": 0.21436337339865558}	{"File": 0.037622246073030025, "Comparator": 0.021220334674515232, "Map": 0.01359127901346996, "List": 0.008449923749649079, "EnumMap": 0.002883496820651207, "Iterator": 0.0036385678769550933, "TreeMap": 0.01730098092390724, "Scanner": 0.04232502683215878, "Collection": 0.010570994788254413, "HashMap": 0.009096419692387734, "Collector": 0.01410834227738626, "Collectors": 0.050939950277371304, "Stream": 0.2692540228946769}	{"reversed": 0.035597870249564005, "keySet": 0.01836151471681974, "values": 0.12368482720104548, "tokens": 0.04746382699941867, "stream": 0.0436534684238984, "toMap": 0.011865956749854668, "toSet": 0.01836151471681974, "toCollection": 0.023731913499709337, "counting": 0.05932978374927335, "toList": 0.05932978374927335}
Lambdas and Streams	Use streams judiciously	{"java.io": 0.03943876834629416, "java.math": 0.05338224008255487, "java.nio": 0.10143617276487003, "java.nio.file": 0.10143617276487003, "java.util": 0.0, "java.util.stream": 0.21436337339865558}	{"File": 0.037622246073030025, "BigInteger": 0.049019445951070516, "Files": 0.02821668455477252, "Paths": 0.02821668455477252, "Path": 0.02821668455477252, "Arrays": 0.005263876967804463, "Map": 0.01359127901346996, "List": 0.008449923749649079, "ArrayList": 0.008513703057389278, "Set": 0.00502427898627783, "Scanner": 0.04232502683215878, "TreeSet": 0.0036385678769550933, "HashMap": 0.009096419692387734, "Collectors": 0.050939950277371304, "Stream": 0.2692540228946769}	{"toString": 0.0072445651706207126, "intValueExact": 0.04746382699941867, "bitLength": 0.023731913499709337, "subtract": 0.03672302943363948, "add": 0.0024148550568735706, "lines": 0.04746382699941867, "size": 0.114224423996331, "stream": 0.0436534684238984, "sort": 0.0218267342119492, "values": 0.12368482720104548, "hasNext": 0.011595612415283441, "next": 0.00918075735840987, "toList": 0.05932978374927335, "sorted": 0.023731913499709337}
Lambdas and Streams	Use caution when making streams parallel	{"java.math": 0.05338224008255487, "java.util": 0.0, "java.util.concurrent": 0.0049446964403434684, "java.util.stream": 0.21436337339865558}	{"BigInteger": 0.049019445951070516, "SplittableRandom": 0.01091570363086528, "ArrayList": 0.008513703057389278, "Random": 0.0028293779566020308, "HashSet": 0.0023926713490020285, "Collection": 0.010570994788254413, "HashMap": 0.009096419692387734, "ThreadLocalRandom": 0.0036385678769550933, "ConcurrentHashMap": 0.0036385678769550933, "LongStream": 0.018811123036515012, "Stream": 0.2692540228946769}	{"intValueExact": 0.04746382699941867, "subtract": 0.03672302943363948, "rangeClosed": 0.035597870249564005, "count": 0.035597870249564005}
Lambdas and Streams	Favor the use of standard functional interfaces	{"java.util": 0.0, "java.util.function": 0.053590843349663894}	{"Arrays": 0.005263876967804463, "Comparator": 0.021220334674515232, "Map": 0.01359127901346996, "LinkedHashMap": 0.00865049046195362, "Map.Entry": 0.011533987282604827, "Collection": 0.010570994788254413, "ObjIntConsumer": 0.004702780759128753, "ToIntBiFunction": 0.009405561518257506, "LongToIntFunction": 0.004702780759128753, "Predicate": 0.018811123036515012, "IntPredicate": 0.004702780759128753, "ObjDoubleConsumer": 0.004702780759128753, "Function": 0.03274711089259584, "ToLongBiFunction": 0.004702780759128753, "LongBinaryOperator": 0.004702780759128753, "BiPredicate": 0.009405561518257506, "BiFunction": 0.009405561518257506, "BooleanSupplier": 0.009405561518257506, "BiConsumer": 0.004702780759128753, "Supplier": 0.01410834227738626, "Consumer": 0.01410834227738626, "LongFunction": 0.004702780759128753, "ToDoubleBiFunction": 0.004702780759128753, "ObjLongConsumer": 0.004702780759128753}	{"get": 0.006037137642183927, "size": 0.114224423996331, "accept": 0.011865956749854668, "test": 0.011865956749854668, "apply": 0.027542272075229614}
Lambdas and Streams	Prefer Collection to Stream as a return type	{"java.util": 0.0, "java.util.stream": 0.21436337339865558}	{"Arrays": 0.005263876967804463, "List": 0.008449923749649079, "AbstractList": 0.00865049046195362, "AbstractCollection": 0.0036385678769550933, "Collections": 0.0027405158106969985, "Iterator": 0.0036385678769550933, "ArrayList": 0.008513703057389278, "HashSet": 0.0023926713490020285, "Set": 0.00502427898627783, "Collection": 0.010570994788254413, "IntStream": 0.04002424664650603, "Stream": 0.2692540228946769, "StreamSupport": 0.01410834227738626}	{"asList": 0.017393418622925164, "spliterator": 0.023731913499709337, "subList": 0.035597870249564005, "of": 0.011595612415283441, "get": 0.006037137642183927, "iterator": 0.00918075735840987, "size": 0.114224423996331, "contains": 0.013771136037614807, "emptyList": 0.023731913499709337}
Lambdas and Streams	Prefer lambdas to anonymous classes	{"java.util": 0.0, "java.util.function": 0.053590843349663894}	{"Arrays": 0.005263876967804463, "Comparator": 0.021220334674515232, "List": 0.008449923749649079, "Collections": 0.0027405158106969985, "DoubleBinaryOperator": 0.02821668455477252}	{"toString": 0.0072445651706207126, "asList": 0.017393418622925164, "compare": 0.01836151471681974, "shuffle": 0.027542272075229614, "applyAsDouble": 0.023731913499709337}
Lambdas and Streams	Prefer Collection to Stream as a return type.	{}	{}	{}
Enums and Annotations	Use EnumMap instead of ordinal indexing	{"java.util": 0.0, "java.util.stream": 0.0941667676001237}	{"Arrays": 0.003906890502727599, "Map": 0.013356667649546967, "EnumMap": 0.14125015140018554, "HashSet": 0.005209187336970131, "Set": 0.006525853274222227, "Collectors": 0.02970630773828337, "Stream": 0.02970630773828337}	{"toString": 0.015036829426305532, "stream": 0.04530359953270556, "get": 0.01127762206972915, "values": 0.23784389754670418, "add": 0.007518414713152766, "toSet": 0.02858338888906991}
Enums and Annotations	Use instance fields instead of ordinals	{}	{}	{}
Enums and Annotations	Prefer annotations to naming patterns	{"java.lang": 0.13089915017793824, "java.lang.annotation": 0.1726390739335601, "java.lang.ref": 0.07504017748747713, "java.lang.reflect": 0.0941667676001237, "java.util": 0.0, "javax.annotation.processing": 0.02559656384611507}	{"Throwable": 0.11882523095313348, "String": 0.02501339249582571, "Class": 0.061888141121423684, "NullPointerException": 0.03465735902799726, "TypeNotPresentException": 0.006399140961528767, "System": 0.0906735477973682, "Annotation": 0.01980420515885558, "RetentionPolicy": 0.05941261547656674, "ElementType": 0.05941261547656674, "InvocationTargetException": 0.05446156418685284, "Method": 0.03465735902799726, "List": 0.0012430196712804242, "ArrayList": 0.005792358687259491}	{"getCause": 0.1572086388898845, "getDeclaredMethods": 0.09235873552721932, "isInstance": 0.1108304826326632, "getName": 0.02858338888906991, "invoke": 0.20318921815988253, "addAll": 0.021437541666802434}
Enums and Annotations	Consistently use the Override annotation.	{}	{}	{}
Enums and Annotations	Introduction	{}	{}	{}
Enums and Annotations	Consistently use the Override annotation	{"java.util": 0.0}	{"HashSet": 0.005209187336970131, "Set": 0.006525853274222227, "Collection": 0.005137179865210372}	{"size": 0.016669994868021246, "equals": 0.04287508333360487, "hashCode": 0.027076352701667007}
Enums and Annotations	Use enums instead of int constants.	{}	{}	{}
Enums and Annotations	Use marker interfaces to define types	{}	{}	{}
Enums and Annotations	Use EnumSet instead of bit fields	{"java.util": 0.0}	{"Collections": 0.00031075491782010605, "Set": 0.006525853274222227, "EnumSet": 0.03657476254971804, "Objects": 0.0014480896718148727}	{"requireNonNull": 0.005556664956007081}
Enums and Annotations	Use EnumMap instead of ordinal indexing.	{}	{}	{}
Enums and Annotations	Emulate extensible enums with interfaces	{"java.nio": 0.01980420515885558, "java.nio.file": 0.01980420515885558, "java.util": 0.0}	{"LinkOption": 0.006399140961528767, "Arrays": 0.003906890502727599, "EnumMap": 0.14125015140018554, "Collection": 0.005137179865210372, "EnumSet": 0.03657476254971804}	{"values": 0.23784389754670418, "toString": 0.015036829426305532}
Enums and Annotations	Use enums instead of int constants	{"java.math": 0.012506696247912855, "java.util": 0.0, "java.util.stream": 0.0941667676001237}	{"BigDecimal": 0.00990210257942779, "RoundingMode": 0.012798281923057535, "Map": 0.013356667649546967, "Optional": 0.01563337030989107, "Collectors": 0.02970630773828337, "Stream": 0.02970630773828337}	{"valueOf": 0.009025450900555669, "toString": 0.015036829426305532, "values": 0.23784389754670418, "get": 0.01127762206972915}
General Programming	Adhere to generally accepted naming conventions	{"java.util": 0.0, "java.util.concurrent": 0.034754152123556946, "java.util.concurrent.atomic": 0.031388922533374566}	{"Comparator": 0.01730722708774683, "List": 0.0015965390273326551, "LinkedHashMap": 0.005039505911321605, "Collections": 0.0007982695136663276, "PriorityQueue": 0.008219080134073646, "Collection": 0.011876782807642329, "FutureTask": 0.016438160268147293}	{}
General Programming	Introduction	{}	{}	{}
General Programming	Prefer for-each loops to traditional for loops	{"java.util": 0.0}	{"Arrays": 0.005854361915402212, "List": 0.0015965390273326551, "Iterator": 0.04133446489577656, "ArrayList": 0.0037198633771391232, "Collection": 0.011876782807642329, "EnumSet": 0.004944922025070522}	{"iterator": 0.11882523095313348, "hasNext": 0.13757365872704141, "next": 0.10892312837370569}
General Programming	Optimize judiciously	{"java.awt": 0.03960841031771116}	{"Dimension": 0.03179574222752043, "Component": 0.016438160268147293}	{}
General Programming	Prefer primitive types to boxed primitives	{"java.util": 0.0}	{"Comparator": 0.01730722708774683, "List": 0.0015965390273326551, "Collections": 0.0007982695136663276}	{"naturalOrder": 0.01980420515885558}
General Programming	Avoid strings where other types are more appropriate	{"java.lang": 0.07699950010466955}	{"Object": 0.035276541379251236, "String": 0.09236596770247568, "ThreadLocal": 0.06995063290054494}	{"get": 0.010418374673940262, "set": 0.07921682063542232}
General Programming	Avoid float and double if exact answers are required	{"java.math": 0.05002678499165142}	{"BigDecimal": 0.12082382046457762}	{"compareTo": 0.03960841031771116, "subtract": 0.03960841031771116, "add": 0.005209187336970131}
General Programming	Minimize the scope of local variables	{}	{}	{}
General Programming	Prefer interfaces to reflection	{"java.lang": 0.07699950010466955, "java.lang.ref": 0.07504017748747713, "java.lang.reflect": 0.0941667676001237, "java.util": 0.0}	{"String": 0.09236596770247568, "Class": 0.054052761786784725, "System": 0.04015911639238073, "ClassNotFoundException": 0.016438160268147293, "Constructor": 0.08219080134073647, "InvocationTargetException": 0.019077445336512257, "Method": 0.02543659378201634, "Field": 0.02465724040222094, "Arrays": 0.005854361915402212, "HashSet": 0.0008363374164860303, "Set": 0.006785290866163784, "TreeSet": 0.006359148445504085}	{"getDeclaredConstructor": 0.05119312769223014, "newInstance": 0.05119312769223014, "exit": 0.03960841031771116, "getCause": 0.03960841031771116, "asList": 0.02501339249582571}
General Programming	Know and use the libraries	{"java.io": 0.06159960008373564, "java.lang": 0.07699950010466955, "java.net": 0.031388922533374566, "java.util": 0.0, "java.util.concurrent": 0.034754152123556946}	{"InputStream": 0.02543659378201634, "Math": 0.02015802364528642, "Integer": 0.02543659378201634, "String": 0.09236596770247568, "System": 0.04015911639238073, "URL": 0.038154890673024515, "SplittableRandom": 0.006359148445504085, "Random": 0.01977968810028209, "ThreadLocalRandom": 0.0031795742227520426}	{"random": 0.10238625538446028, "openStream": 0.05119312769223014, "nextInt": 0.09902102579427789}
General Programming	Refer to objects by their interfaces	{"java.io": 0.06159960008373564}	{"OutputStream": 0.006359148445504085}	{}
General Programming	Use native methods judiciously	{"java.math": 0.05002678499165142}	{"BigInteger": 0.015118517733964814}	{}
General Programming	Beware the performance of string concatenation	{}	{}	{}
General Programming	Use native methods judiciously.	{}	{}	{}
Generics	Prefer lists to arrays	{"java.util": 0.0, "java.util.concurrent": 0.04607558046683686}	{"Arrays": 0.005514451623257606, "Map": 0.00489440198878266, "List": 0.02615275792315902, "ArrayList": 0.012263594952231815, "Random": 0.0071322788376726055, "Collection": 0.016314673295942203, "ThreadLocalRandom": 0.011792674149413058}	{"of": 0.09464526890312432, "size": 0.014567472992775322, "toArray": 0.08165361604965682, "current": 0.056201122748103675}
Generics	Introduction	{}	{}	{}
Generics	Eliminate unchecked warnings.	{}	{}	{}
Generics	Favor generic types	{"java.util": 0.0, "java.util.concurrent": 0.04607558046683686}	{"Arrays": 0.005514451623257606, "List": 0.02615275792315902, "ArrayList": 0.012263594952231815, "Stack": 0.08936731912497277, "HashMap": 0.005241188510850248, "BlockingQueue": 0.002620594255425124, "Delayed": 0.01693534469969806, "DelayQueue": 0.01693534469969806}	{"isEmpty": 0.07025140343512959, "ensureCapacity": 0.10895834610170604, "pop": 0.10392278406319957, "push": 0.12619195207674236}
Generics	Favor generic types.	{}	{}	{}
Generics	Eliminate unchecked warnings	{}	{}	{}
Generics	Consider typesafe heterogeneous containers	{"java.lang": 0.02449984094239486, "java.lang.annotation": 0.024968461106093406, "java.lang.ref": 0.01989701675804318, "java.lang.reflect": 0.024968461106093406, "java.util": 0.0}	{"Integer": 0.03144713106510149, "Object": 0.012460630873362305, "String": 0.044683659562486384, "Class": 0.07075604489647835, "System": 0.008274751770830811, "ThreadLocal": 0.002620594255425124, "Annotation": 0.015723565532550745, "AnnotatedElement": 0.010161206819818839, "Map": 0.00489440198878266, "List": 0.02615275792315902, "Collections": 0.0008224137711685227, "HashSet": 0.004135838717443205, "Set": 0.011678275550593023, "Collection": 0.016314673295942203, "Objects": 0.0038323734225724423, "HashMap": 0.005241188510850248}	{"getAnnotation": 0.024212965800379124, "cast": 0.036319448700568684, "forName": 0.036319448700568684, "getName": 0.018733707582701226, "exit": 0.009366853791350613, "get": 0.007391414464619781, "requireNonNull": 0.018209341240969155}
Generics	Donâ€™t use raw types	{"java.util": 0.0}	{"List": 0.02615275792315902, "Iterator": 0.001310297127712562, "ArrayList": 0.012263594952231815, "Set": 0.011678275550593023, "Collection": 0.016314673295942203}	{"add": 0.008623316875389744, "iterator": 0.004683426895675307, "contains": 0.004683426895675307, "hasNext": 0.00591532930644527, "next": 0.004683426895675307}
Generics	Combine generics and varargs judiciously.	{}	{}	{}
Generics	Combine generics and varargs judiciously	{"java.util": 0.0, "java.util.concurrent": 0.04607558046683686}	{"Arrays": 0.005514451623257606, "List": 0.02615275792315902, "Collections": 0.0008224137711685227, "ArrayList": 0.012263594952231815, "Collection": 0.016314673295942203, "EnumSet": 0.0010188969768103722, "ThreadLocalRandom": 0.011792674149413058}	{"toString": 0.0012319024107699636, "toArray": 0.08165361604965682, "of": 0.09464526890312432, "addAll": 0.042150842061077755, "nextInt": 0.03746741516540245, "current": 0.056201122748103675}
Generics	Favor generic methods	{"java.util": 0.0, "java.util.function": 0.024968461106093406}	{"Arrays": 0.005514451623257606, "List": 0.02615275792315902, "Collections": 0.0008224137711685227, "HashSet": 0.004135838717443205, "Set": 0.011678275550593023, "Optional": 0.0016549503541661624, "Collection": 0.016314673295942203, "Objects": 0.0038323734225724423, "Function": 0.002620594255425124}	{"asList": 0.02366131722578108, "isEmpty": 0.07025140343512959, "addAll": 0.042150842061077755, "max": 0.012106482900189562, "requireNonNull": 0.018209341240969155, "apply": 0.03746741516540245}
Generics	Use bounded wildcards to increase API flexibility	{"java.util": 0.0}	{"Arrays": 0.005514451623257606, "Comparator": 0.0030566909304311166, "List": 0.02615275792315902, "ArrayList": 0.012263594952231815, "Random": 0.0071322788376726055, "HashSet": 0.004135838717443205, "Set": 0.011678275550593023, "Stack": 0.08936731912497277, "Collection": 0.016314673295942203}	{"asList": 0.02366131722578108, "isEmpty": 0.07025140343512959, "of": 0.09464526890312432, "addAll": 0.042150842061077755, "get": 0.007391414464619781, "add": 0.008623316875389744, "size": 0.014567472992775322, "ensureCapacity": 0.10895834610170604, "pop": 0.10392278406319957, "push": 0.12619195207674236}
Concurrency	Avoid excessive synchronization	{"java.util": 0.0, "java.util.concurrent": 0.15866025969449912}	{"List": 0.005194709074007743, "Hashtable": 0.010345480306864855, "Iterator": 0.005172740153432428, "ArrayList": 0.01815515409439542, "Random": 0.00402236194576632, "Vector": 0.010345480306864855, "HashSet": 0.005442434531162823, "Set": 0.004545370439756775, "Collection": 0.01288128682619914, "Observer": 0.04011401796779227, "ExecutorService": 0.06685669661298711, "CopyOnWriteArrayList": 0.1069707145807794, "Executors": 0.09359937525818197, "ThreadLocalRandom": 0.005172740153432428}	{"remove": 0.08137868804948961, "equals": 0.017114745199010992, "toArray": 0.040689344024744806, "isEmpty": 0.017114745199010992, "addAll": 0.008557372599505496, "retainAll": 0.017114745199010992, "get": 0.009003533668837263, "add": 0.03601413467534905, "clear": 0.027126229349829868, "iterator": 0.017114745199010992, "size": 0.01330855557364659, "removeAll": 0.017114745199010992, "contains": 0.017114745199010992, "hashCode": 0.021616512033429625, "containsAll": 0.017114745199010992, "toString": 0.004501766834418631, "shutdown": 0.06636146182326129, "newSingleThreadExecutor": 0.06636146182326129}
Concurrency	Introduction	{}	{}	{}
Concurrency	Prefer executors, tasks, and streams to threads	{"java.util": 0.0, "java.util.concurrent": 0.15866025969449912}	{"Collections": 0.0038960318055058073, "ExecutorService": 0.06685669661298711, "ForkJoinTask": 0.013371339322597426, "Callable": 0.013371339322597426, "ExecutorCompletionService": 0.013371339322597426, "ScheduledThreadPoolExecutor": 0.013371339322597426, "ThreadPoolExecutor": 0.031036440920594564, "ForkJoinPool": 0.013371339322597426, "Executors": 0.09359937525818197, "Executor": 0.09359937525818197}	{"shutdown": 0.06636146182326129, "execute": 0.022120487274420432, "newSingleThreadExecutor": 0.06636146182326129}
Concurrency	Use lazy initialization judiciously	{}	{}	{}
Concurrency	Donâ€™t depend on the thread scheduler	{}	{}	{}
Concurrency	Prefer concurrency utilities to wait and notify	{"java.util": 0.0, "java.util.concurrent": 0.15866025969449912}	{"Map": 0.00644064341309957, "List": 0.005194709074007743, "Collections": 0.0038960318055058073, "Queue": 0.02674267864519485, "ExecutorService": 0.06685669661298711, "BlockingQueue": 0.02069096061372971, "Semaphore": 0.013371339322597426, "ConcurrentMap": 0.09359937525818197, "CountDownLatch": 0.20057008983896138, "Phaser": 0.02674267864519485, "ThreadPoolExecutor": 0.031036440920594564, "Exchanger": 0.013371339322597426, "ConcurrentHashMap": 0.07241836214805399, "Executor": 0.09359937525818197, "CyclicBarrier": 0.02674267864519485}	{"putIfAbsent": 0.11060243637210215, "get": 0.009003533668837263, "await": 0.13272292364652258, "countDown": 0.13272292364652258}
Concurrency	Document thread safety	{"java.util": 0.0, "java.util.concurrent": 0.15866025969449912, "java.util.concurrent.locks": 0.038951292809305545}	{"Map": 0.00644064341309957, "Collections": 0.0038960318055058073, "ArrayList": 0.01815515409439542, "Set": 0.004545370439756775, "HashMap": 0.010345480306864855, "ConcurrentHashMap": 0.07241836214805399, "Lock": 0.013371339322597426}	{"keySet": 0.017114745199010992}
Concurrency	Synchronize access to shared mutable data	{"java.util": 0.0, "java.util.concurrent": 0.15866025969449912, "java.util.concurrent.atomic": 0.047765751681222164}	{"TimeUnit": 0.06207288184118913, "AtomicLong": 0.04011401796779227}	{"sleep": 0.13272292364652258, "getAndIncrement": 0.022120487274420432}
Serialization	Implement Serializable with great caution	{}	{}	{}
Serialization	For instance control, prefer enum types to readResolve	{"java.util": 0.0}	{"Arrays": 0.011219788110397207}	{"toString": 0.020836749347880525}
Serialization	Prefer alternatives to Java serialization	{"java.io": 0.2021236877747576, "java.util": 0.0}	{"ObjectInputFilter": 0.02756553029581623, "ObjectInputStream": 0.13782765147908116, "Collections": 0.0026772731381424523, "HashSet": 0.030854417303592317, "Set": 0.014725002259783489}	{"add": 0.04167349869576105}
Serialization	Introduction	{}	{}	{}
Serialization	Consider using a custom serialized form	{"java.io": 0.2021236877747576}	{"ObjectOutputStream": 0.0826965908874487, "InvalidClassException": 0.02756553029581623, "ObjectInputStream": 0.13782765147908116}	{"defaultWriteObject": 0.15357938307669042, "writeInt": 0.10238625538446028, "writeObject": 0.15357938307669042, "readObject": 0.30715876615338084, "readInt": 0.10238625538446028, "defaultReadObject": 0.10238625538446028}
Serialization	Consider serialization proxies instead of serialized instances	{"java.io": 0.2021236877747576, "java.net": 0.13732653608351372, "java.util": 0.0}	{"ObjectInputStream": 0.13782765147908116, "Proxy": 0.05513106059163246, "Arrays": 0.011219788110397207, "EnumMap": 0.01690172751797092, "Collections": 0.0026772731381424523, "Date": 0.14929323888983437, "EnumSet": 0.07463028471683357, "Objects": 0.006237924740125606}	{"readObject": 0.30715876615338084, "toString": 0.020836749347880525, "getTime": 0.15843364127084464, "noneOf": 0.05119312769223014}
Serialization	Write readObject methods defensively	{}	{}	{}
